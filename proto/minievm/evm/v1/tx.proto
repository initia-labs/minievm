syntax = "proto3";
package minievm.evm.v1;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "minievm/evm/v1/types.proto";

option go_package = "github.com/initia-labs/minievm/x/evm/types";

// Msg defines the evm Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // Create defines a method calling create of EVM.
  rpc Create(MsgCreate) returns (MsgCreateResponse);
  // Create2 defines a method calling create2 of EVM.
  rpc Create2(MsgCreate2) returns (MsgCreate2Response);
  // Call defines a method submitting Ethereum transactions.
  rpc Call(MsgCall) returns (MsgCallResponse);
  // UpdateParams defines an operation for updating the x/evm module
  // parameters.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgCreate is a message to create a contract with the CREATE opcode.
message MsgCreate {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name)           = "evm/MsgCreate";

  // Sender is the that actor that signed the messages
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // Code is hex encoded raw contract bytes code.
  string code = 2;

  // Value is the amount of fee denom token to transfer to the contract.
  string value = 3 [
    (cosmos_proto.scalar)  = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgCreateResponse defines the Msg/Create response type.
message MsgCreateResponse {
  string result = 1;

  // hex encoded address
  string contract_addr = 2;

  // logs are the contract logs generated by the contract execution.
  repeated Log logs = 3 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgCreate2 is a message to create a contract with the CREATE2 opcode.
message MsgCreate2 {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name)           = "evm/MsgCreate2";

  // Sender is the that actor that signed the messages
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // Code is hex encoded raw contract bytes code.
  string code = 2;

  // Salt is a random value to distinguish contract creation.
  uint64 salt = 3;

  // Value is the amount of fee denom token to transfer to the contract.
  string value = 4 [
    (cosmos_proto.scalar)  = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgCreate2Response defines the Msg/Create2 response type.
message MsgCreate2Response {
  string result = 1;

  // hex encoded address
  string contract_addr = 2;

  // logs are the contract logs generated by the contract execution.
  repeated Log logs = 3 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgCall is a message to call an Ethereum contract.
message MsgCall {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name)           = "evm/MsgCall";

  // Sender is the that actor that signed the messages
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // ContractAddr is the contract address to be executed.
  // It can be cosmos address or hex encoded address.
  string contract_addr = 2;

  // Hex encoded execution input bytes.
  string input = 3;

  // Value is the amount of fee denom token to transfer to the contract.
  string value = 4 [
    (cosmos_proto.scalar)  = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgCallResponse defines the Msg/Call response type.
message MsgCallResponse {
  string result = 1;

  // logs are the contract logs generated by the contract execution.
  repeated Log logs = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParams defines a Msg for updating the x/evm module parameters.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address that controls the module
  // (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // params defines the x/evm parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}