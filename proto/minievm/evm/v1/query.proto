syntax = "proto3";
package minievm.evm.v1;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "minievm/evm/v1/types.proto";

option go_package                      = "github.com/initia-labs/minievm/x/evm/types";
option (gogoproto.equal_all)           = false;
option (gogoproto.goproto_getters_all) = false;

// Query provides defines the gRPC querier service
service Query {
  // Code gets the module info.
  rpc Code(QueryCodeRequest) returns (QueryCodeResponse) {
    option (google.api.http).get = "/minievm/evm/v1/codes/{contract_addr}";
  }

  // State gets the state bytes of the given address and key bytes.
  rpc State(QueryStateRequest) returns (QueryStateResponse) {
    option (google.api.http).get = "/minievm/evm/v1/states/{contract_addr}/{key}";
  }

  // ContractAddrByDenom gets the contract address by denom.
  rpc ContractAddrByDenom(QueryContractAddrByDenomRequest) returns (QueryContractAddrByDenomResponse) {
    option (google.api.http).get = "/minievm/evm/v1/contracts/by_denom";
  }

  // Denom gets the denom of the given contract address.
  rpc Denom(QueryDenomRequest) returns (QueryDenomResponse) {
    option (google.api.http).get = "/minievm/evm/v1/denoms/{contract_addr}";
  }

  // Call execute entry function and return  the function result
  rpc Call(QueryCallRequest) returns (QueryCallResponse) {
    option (google.api.http) = {
      post: "/minievm/evm/v1/call"
      body: "*"
    };
  }

  // Params queries all parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/minievm/evm/v1/params";
  }
}

// QueryCodeRequest is the request type for the Query/Code RPC
// method
message QueryCodeRequest {
  // hex encoded contract address to query
  string contract_addr = 1;
}

// QueryCodeResponse is the response type for the Query/Code RPC
// method
message QueryCodeResponse {
  option (gogoproto.equal) = true;
  string code              = 1;
}

// QueryStateRequest is the request type for the Query/State RPC
// method
message QueryStateRequest {
  // It can be cosmos address or hex encoded address.
  string contract_addr = 1;
  // hex encoded hash string
  string key = 2;
}

// QueryStateResponse is the response type for the Query/State RPC
// method
message QueryStateResponse {
  option (gogoproto.equal) = true;
  // hex encoded hash string
  string value = 1;
}

// QueryCallRequest is the request type for the Query/Call RPC
// method
message QueryCallRequest {
  // sender address
  string sender = 1;
  // It can be cosmos address or hex encoded address.
  string contract_addr = 2;
  // hex encoded call input
  string input = 3;
  // Value is the amount of fee denom token to transfer to the contract.
  string value = 4 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable)   = false,
    (amino.dont_omitempty) = true
  ];
  // whether to trace the call
  // `nil` means no trace
  TraceOptions trace_options = 5;
}

// TraceOption is the option for tracing
message TraceOptions {
  // whether to trace memory
  bool with_memory = 1;
  // whether to trace stack
  bool with_stack = 2;
  // wtether to trace storage
  bool with_storage = 3;
  // whether to return data trace
  bool with_return_data = 4;
}

// QueryCallResponse is the response type for the Query/Call RPC
// method
message QueryCallResponse {
  // hex encoded response bytes.
  string       response     = 1;
  uint64       used_gas     = 2;
  repeated Log logs         = 3 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
  string       trace_output = 4;
  string       error        = 5;
}

// QueryContractAddrByDenomRequest is the request type for the Query/ContractAddrByDenom RPC
// method
message QueryContractAddrByDenomRequest {
  string denom = 1;
}

// QueryContractAddrByDenomResponse is the response type for the Query/ContractAddrByDenom RPC
// method
message QueryContractAddrByDenomResponse {
  option (gogoproto.equal) = true;
  // 0x prefixed hex address
  string address = 1;
}

// QueryDenomRequest is the request type for the Query/Denom RPC
// method
message QueryDenomRequest {
  // It can be cosmos address or hex encoded address.
  string contract_addr = 1;
}

// QueryDenomResponse is the response type for the Query/Denom RPC
// method
message QueryDenomResponse {
  option (gogoproto.equal) = true;
  string denom             = 1;
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1 [(gogoproto.nullable) = false];
}
