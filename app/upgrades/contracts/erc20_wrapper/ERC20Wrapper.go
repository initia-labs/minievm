// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package erc20_wrapper

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// Erc20WrapperMetaData contains all meta data concerning the Erc20Wrapper contract.
var Erc20WrapperMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"srcDenom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"dstDenom\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"srcDecimal\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"dstDecimal\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Converted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contractERC20Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"remoteDenom\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimal\",\"type\":\"uint8\"}],\"name\":\"getToLocalERC20Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"localDenom\",\"type\":\"string\"}],\"name\":\"getToRemoteERC20Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"callback_id\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"ibc_ack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"callback_id\",\"type\":\"uint64\"}],\"name\":\"ibc_timeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"localTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"remoteDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"remoteTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"remoteDenom\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"remoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_remoteDecimals\",\"type\":\"uint8\"}],\"name\":\"toLocal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"remoteDenom\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_remoteDecimals\",\"type\":\"uint8\"}],\"name\":\"toLocal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"localDenom\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"}],\"name\":\"toRemote\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"remoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_remoteDecimals\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"localDenom\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"}],\"name\":\"toRemoteAndIBCTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"localDenom\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"}],\"name\":\"toRemoteAndIBCTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"localDenom\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"}],\"name\":\"toRemoteAndIBCTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"localDenom\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"}],\"name\":\"toRemoteAndOPWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"localDenom\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"}],\"name\":\"toRemoteAndOPWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561000f575f80fd5b506004361061012a575f3560e01c8063701dcf21116100ab578063c45a01551161006f578063c45a015514610338578063cd78fdec14610356578063cf9ee0c314610386578063f2fde38b146103b8578063f787cbdd146103d45761012a565b8063701dcf21146102825780638da5cb5b1461029e5780639548153f146102bc5780639f65ade5146102ec578063b9cf37421461031c5761012a565b80631efb51e6116100f25780631efb51e6146101e25780631efd1a8414610212578063247219171461022e57806331a503f01461024a5780635bb47808146102665761012a565b806301ffc9a71461012e5780630423d4d81461015e5780630d4f1f9d1461017a5780631b750022146101965780631de5537c146101b2575b5f80fd5b610148600480360381019061014391906131c6565b6103f0565b604051610155919061320b565b60405180910390f35b610178600480360381019061017391906133d0565b610459565b005b610194600480360381019061018f9190613496565b61050e565b005b6101b060048036038101906101ab91906134d4565b61058f565b005b6101cc60048036038101906101c7919061363b565b6107da565b6040516101d99190613675565b60405180910390f35b6101fc60048036038101906101f791906136c4565b61080a565b6040516102099190613675565b60405180910390f35b61022c60048036038101906102279190613702565b610847565b005b61024860048036038101906102439190613782565b610c29565b005b610264600480360381019061025f919061384d565b610c77565b005b610280600480360381019061027b919061363b565b610cf1565b005b61029c60048036038101906102979190613878565b610e11565b005b6102a6610f1b565b6040516102b39190613675565b60405180910390f35b6102d660048036038101906102d191906138e4565b610f3e565b6040516102e39190613675565b60405180910390f35b6103066004803603810190610301919061363b565b611283565b604051610313919061393a565b60405180910390f35b61033660048036038101906103319190613953565b6112a0565b005b6103406112b4565b60405161034d9190613a36565b60405180910390f35b610370600480360381019061036b9190613a4f565b6112d9565b60405161037d9190613675565b60405180910390f35b6103a0600480360381019061039b9190613b07565b61145a565b6040516103af93929190613b82565b60405180910390f35b6103d260048036038101906103cd919061363b565b61188d565b005b6103ee60048036038101906103e99190613bb7565b6119d5565b005b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b5f8061046630868661145a565b50915091505f8103610479575050610508565b5f6104858784846119ef565b905060f173ffffffffffffffffffffffffffffffffffffffff166356c657a582866040518363ffffffff1660e01b81526004016104c3929190613d1f565b6020604051808303815f875af11580156104df573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105039190613d61565b505050505b50505050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461057c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057390613dfc565b60405180910390fd5b8061058b5761058a82611b1e565b5b5050565b5f805f61059d308b8b61145a565b9250925092505f82036105b2575050506107d1565b600160055f8282829054906101000a900467ffffffffffffffff166105d79190613e47565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060405180608001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018260ff1681525060065f60055f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015f6101000a81548160ff021916908360ff1602179055509050505f61074d8985858a8c8b611f9f565b905060f173ffffffffffffffffffffffffffffffffffffffff166356c657a582876040518363ffffffff1660e01b815260040161078b929190613d1f565b6020604051808303815f875af11580156107a7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107cb9190613d61565b50505050505b50505050505050565b6002602052805f5260405f205f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6004602052815f5260405f20602052805f5260405f205f915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f60f173ffffffffffffffffffffffffffffffffffffffff16632b3324ce856040518263ffffffff1660e01b81526004016108829190613e82565b602060405180830381865afa15801561089d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108c19190613eb6565b90505f6108cf858385612231565b90505f84036108df575050610c23565b6108e882612696565b1561096e578173ffffffffffffffffffffffffffffffffffffffff166379cc679033866040518363ffffffff1660e01b8152600401610928929190613ee1565b6020604051808303815f875af1158015610944573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109689190613d61565b506109ed565b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b81526004016109ab93929190613f08565b6020604051808303815f875af11580156109c7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109eb9190613d61565b505b5f8173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a37573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a5b9190613f51565b90505f610a69868684612743565b9050610a7483612696565b15610ae6578273ffffffffffffffffffffffffffffffffffffffff166340c10f1989836040518363ffffffff1660e01b8152600401610ab4929190613ee1565b5f604051808303815f87803b158015610acb575f80fd5b505af1158015610add573d5f803e3d5ffd5b50505050610b63565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb89836040518363ffffffff1660e01b8152600401610b21929190613ee1565b6020604051808303815f875af1158015610b3d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b619190613d61565b505b7fa115381c3e3d88df4f33d381b1fee8644c837f96f60a1e630c5da72e27f769a38760f173ffffffffffffffffffffffffffffffffffffffff166381cf0f6a866040518263ffffffff1660e01b8152600401610bbf9190613675565b5f60405180830381865afa158015610bd9573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190610c019190613fea565b8760128a604051610c16959493929190614031565b60405180910390a1505050505b50505050565b610c7085858585856040518060400160405280600281526020017f7b7d0000000000000000000000000000000000000000000000000000000000008152506203d09061058f565b5050505050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ce5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cdc90613dfc565b60405180910390fd5b610cee81611b1e565b50565b600173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d57906140da565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610dce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc590614142565b60405180910390fd5b8060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b5f60f173ffffffffffffffffffffffffffffffffffffffff16632b3324ce846040518263ffffffff1660e01b8152600401610e4c9190613e82565b602060405180830381865afa158015610e67573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e8b9190613eb6565b90505f8173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610ec79190613675565b602060405180830381865afa158015610ee2573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f069190614174565b9050610f1485858386610847565b5050505050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f8060f173ffffffffffffffffffffffffffffffffffffffff16632b3324ce846040518263ffffffff1660e01b8152600401610f7a9190613e82565b602060405180830381865afa158015610f95573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fb99190613eb6565b905060015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663654082c8306040518060400160405280600781526020017f57726170706564000000000000000000000000000000000000000000000000008152508473ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa158015611077573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f8201168201806040525081019061109f9190613fea565b6040516020016110b09291906141d9565b6040516020818303038152906040526040518060400160405280600181526020017f57000000000000000000000000000000000000000000000000000000000000008152508573ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa15801561113d573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906111659190613fea565b6040516020016111769291906141d9565b6040516020818303038152906040526006888773ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111d1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111f59190613f51565b604051602001611206929190614230565b604051602081830303815290604052805190602001206040518663ffffffff1660e01b815260040161123c95949392919061426f565b602060405180830381865afa158015611257573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061127b9190613eb6565b915050919050565b6003602052805f5260405f205f915054906101000a900460ff1681565b6112af8383836203d090610459565b505050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663654082c8306040518060400160405280600781526020017f5772617070656400000000000000000000000000000000000000000000000000815250876040516020016113609291906141d9565b6040516020818303038152906040526040518060400160405280600181526020017f5700000000000000000000000000000000000000000000000000000000000000815250876040516020016113b79291906141d9565b60405160208183030381529060405260128a886040516020016113db929190614230565b604051602081830303815290604052805190602001206040518663ffffffff1660e01b815260040161141195949392919061426f565b602060405180830381865afa15801561142c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114509190613eb6565b9050949350505050565b5f805f8060f173ffffffffffffffffffffffffffffffffffffffff16632b3324ce876040518263ffffffff1660e01b81526004016114989190613e82565b602060405180830381865afa1580156114b3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114d79190613eb6565b90506114e3868261281d565b935060035f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1691505f850361154457835f9350935050611884565b61154d81612696565b156115d3578073ffffffffffffffffffffffffffffffffffffffff166379cc679033876040518363ffffffff1660e01b815260040161158d929190613ee1565b6020604051808303815f875af11580156115a9573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115cd9190613d61565b50611652565b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b815260040161161093929190613f08565b6020604051808303815f875af115801561162c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116509190613d61565b505b5f8173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561169c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116c09190613f51565b90506116cd868285612743565b93506116d885612696565b1561174a578473ffffffffffffffffffffffffffffffffffffffff166340c10f1989866040518363ffffffff1660e01b8152600401611718929190613ee1565b5f604051808303815f87803b15801561172f575f80fd5b505af1158015611741573d5f803e3d5ffd5b505050506117c7565b8473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb89866040518363ffffffff1660e01b8152600401611785929190613ee1565b6020604051808303815f875af11580156117a1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906117c59190613d61565b505b7fa115381c3e3d88df4f33d381b1fee8644c837f96f60a1e630c5da72e27f769a38760f173ffffffffffffffffffffffffffffffffffffffff166381cf0f6a886040518263ffffffff1660e01b81526004016118239190613675565b5f60405180830381865afa15801561183d573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906118659190613fea565b83868a604051611879959493929190614031565b60405180910390a150505b93509350939050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146118e3575f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361191a575f80fd5b8073ffffffffffffffffffffffffffffffffffffffff165f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3805f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6119e78686868686866203d09061058f565b505050505050565b606060f173ffffffffffffffffffffffffffffffffffffffff166381cf0f6a846040518263ffffffff1660e01b8152600401611a2b9190613675565b5f60405180830381865afa158015611a45573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190611a6d9190613fea565b611a7683612cda565b60f173ffffffffffffffffffffffffffffffffffffffff16636af32a55306040518263ffffffff1660e01b8152600401611ab09190613675565b5f60405180830381865afa158015611aca573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190611af29190613fea565b86604051602001611b0694939291906144b0565b60405160208183030381529060405290509392505050565b5f60065f8367ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f206040518060800160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015f9054906101000a900460ff1660ff1660ff168152505090505f60045f836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f836060015160ff1660ff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611d0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0290614579565b60405180910390fd5b5f611d8b836040015184606001518473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d62573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d869190613f51565b612743565b9050611d9a8360200151612696565b15611e0e57826020015173ffffffffffffffffffffffffffffffffffffffff166342966c6884604001516040518263ffffffff1660e01b8152600401611de09190614597565b5f604051808303815f87803b158015611df7575f80fd5b505af1158015611e09573d5f803e3d5ffd5b505050505b611e1782612696565b15611e8c578173ffffffffffffffffffffffffffffffffffffffff166340c10f19845f0151836040518363ffffffff1660e01b8152600401611e5a929190613ee1565b5f604051808303815f87803b158015611e71575f80fd5b505af1158015611e83573d5f803e3d5ffd5b50505050611f0c565b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb845f0151836040518363ffffffff1660e01b8152600401611eca929190613ee1565b6020604051808303815f875af1158015611ee6573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f0a9190613d61565b505b60065f8567ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f205f8082015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282015f9055600382015f6101000a81549060ff0219169055505050505050565b60605f611fca60055f9054906101000a900467ffffffffffffffff1667ffffffffffffffff16612cda565b611fd330612da4565b604051602001611fe49291906146b4565b60405160208183030381529060405290505f60f373ffffffffffffffffffffffffffffffffffffffff16635cc855e385846040518363ffffffff1660e01b81526004016120329291906146f8565b5f60405180830381865afa15801561204c573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906120749190613fea565b90508860f173ffffffffffffffffffffffffffffffffffffffff166381cf0f6a8a6040518263ffffffff1660e01b81526004016120b19190613675565b5f60405180830381865afa1580156120cb573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906120f39190613fea565b6120fc89612cda565b60f173ffffffffffffffffffffffffffffffffffffffff16636af32a55306040518263ffffffff1660e01b81526004016121369190613675565b5f60405180830381865afa158015612150573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906121789190613fea565b886121828b612cda565b60f373ffffffffffffffffffffffffffffffffffffffff16638d5c8817886040518263ffffffff1660e01b81526004016121bc9190613e82565b5f60405180830381865afa1580156121d6573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906121fe9190613fea565b6040516020016122149796959493929190614b61565b604051602081830303815290604052925050509695505050505050565b5f60045f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8360ff1660ff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361268f5760015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636d2b9d876040518060400160405280600781526020017f57726170706564000000000000000000000000000000000000000000000000008152508573ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa158015612394573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906123bc9190613fea565b6040516020016123cd9291906141d9565b6040516020818303038152906040526040518060400160405280600181526020017f57000000000000000000000000000000000000000000000000000000000000008152508673ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa15801561245a573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906124829190613fea565b6040516020016124939291906141d9565b604051602081830303815290604052601288876040516020016124b7929190614230565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b81526004016124ec9493929190614c80565b6020604051808303815f875af1158015612508573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061252c9190613eb6565b90508060045f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8460ff1660ff1681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908360ff1602179055505b9392505050565b5f8173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156126ff57506040513d601f19601f820116820180604052508101906126fc9190613eb6565b60015b61270b575f905061273e565b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16149150505b919050565b5f8160ff168360ff1611156127d1575f828461275f9190614cd1565b60ff16600a61276e9190614e34565b90505f818661277d9190614eab565b146127bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127b490614f25565b60405180910390fd5b80856127c99190614f43565b915050612816565b8160ff168360ff161015612811575f83836127ec9190614cd1565b60ff16600a6127fb9190614e34565b905080856128099190614f73565b915050612815565b8390505b5b9392505050565b5f60025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612cd45760015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636d2b9d876040518060400160405280600781526020017f57726170706564000000000000000000000000000000000000000000000000008152508473ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa15801561296b573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906129939190613fea565b6040516020016129a49291906141d9565b6040516020818303038152906040526040518060400160405280600181526020017f57000000000000000000000000000000000000000000000000000000000000008152508573ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa158015612a31573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190612a599190613fea565b604051602001612a6a9291906141d9565b6040516020818303038152906040526006878773ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ac5573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612ae99190613f51565b604051602001612afa929190614230565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b8152600401612b2f9493929190614c80565b6020604051808303815f875af1158015612b4b573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612b6f9190613eb6565b90508060025f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600660035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908360ff1602179055508160045f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f600660ff1660ff1681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b92915050565b60605f6001612ce884612dd1565b0190505f8167ffffffffffffffff811115612d0657612d0561323c565b5b6040519080825280601f01601f191660200182016040528015612d385781602001600182028036833780820191505090505b5090505f82602001820190505b600115612d99578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581612d8e57612d8d614e7e565b5b0494505f8503612d45575b819350505050919050565b6060612dca8273ffffffffffffffffffffffffffffffffffffffff16601460ff16612f22565b9050919050565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612e2d577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381612e2357612e22614e7e565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612e6a576d04ee2d6d415b85acef81000000008381612e6057612e5f614e7e565b5b0492506020810190505b662386f26fc100008310612e9957662386f26fc100008381612e8f57612e8e614e7e565b5b0492506010810190505b6305f5e1008310612ec2576305f5e1008381612eb857612eb7614e7e565b5b0492506008810190505b6127108310612ee7576127108381612edd57612edc614e7e565b5b0492506004810190505b60648310612f0a5760648381612f0057612eff614e7e565b5b0492506002810190505b600a8310612f19576001810190505b80915050919050565b60605f8390505f6002846002612f389190614f73565b612f429190614fb4565b67ffffffffffffffff811115612f5b57612f5a61323c565b5b6040519080825280601f01601f191660200182016040528015612f8d5781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000815f81518110612fc457612fc3614fe7565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061302757613026614fe7565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053505f60018560026130659190614f73565b61306f9190614fb4565b90505b600181111561310e577f3031323334353637383961626364656600000000000000000000000000000000600f8416601081106130b1576130b0614fe7565b5b1a60f81b8282815181106130c8576130c7614fe7565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350600483901c92508061310790615014565b9050613072565b505f82146131555784846040517fe22e27eb00000000000000000000000000000000000000000000000000000000815260040161314c92919061503b565b60405180910390fd5b809250505092915050565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6131a581613171565b81146131af575f80fd5b50565b5f813590506131c08161319c565b92915050565b5f602082840312156131db576131da613169565b5b5f6131e8848285016131b2565b91505092915050565b5f8115159050919050565b613205816131f1565b82525050565b5f60208201905061321e5f8301846131fc565b92915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6132728261322c565b810181811067ffffffffffffffff821117156132915761329061323c565b5b80604052505050565b5f6132a3613160565b90506132af8282613269565b919050565b5f67ffffffffffffffff8211156132ce576132cd61323c565b5b6132d78261322c565b9050602081019050919050565b828183375f83830152505050565b5f6133046132ff846132b4565b61329a565b9050828152602081018484840111156133205761331f613228565b5b61332b8482856132e4565b509392505050565b5f82601f83011261334757613346613224565b5b81356133578482602086016132f2565b91505092915050565b5f819050919050565b61337281613360565b811461337c575f80fd5b50565b5f8135905061338d81613369565b92915050565b5f67ffffffffffffffff82169050919050565b6133af81613393565b81146133b9575f80fd5b50565b5f813590506133ca816133a6565b92915050565b5f805f80608085870312156133e8576133e7613169565b5b5f85013567ffffffffffffffff8111156134055761340461316d565b5b61341187828801613333565b945050602085013567ffffffffffffffff8111156134325761343161316d565b5b61343e87828801613333565b935050604061344f8782880161337f565b9250506060613460878288016133bc565b91505092959194509250565b613475816131f1565b811461347f575f80fd5b50565b5f813590506134908161346c565b92915050565b5f80604083850312156134ac576134ab613169565b5b5f6134b9858286016133bc565b92505060206134ca85828601613482565b9150509250929050565b5f805f805f805f60e0888a0312156134ef576134ee613169565b5b5f88013567ffffffffffffffff81111561350c5761350b61316d565b5b6135188a828b01613333565b97505060206135298a828b0161337f565b965050604088013567ffffffffffffffff81111561354a5761354961316d565b5b6135568a828b01613333565b955050606088013567ffffffffffffffff8111156135775761357661316d565b5b6135838a828b01613333565b94505060806135948a828b0161337f565b93505060a088013567ffffffffffffffff8111156135b5576135b461316d565b5b6135c18a828b01613333565b92505060c06135d28a828b016133bc565b91505092959891949750929550565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61360a826135e1565b9050919050565b61361a81613600565b8114613624575f80fd5b50565b5f8135905061363581613611565b92915050565b5f602082840312156136505761364f613169565b5b5f61365d84828501613627565b91505092915050565b61366f81613600565b82525050565b5f6020820190506136885f830184613666565b92915050565b5f60ff82169050919050565b6136a38161368e565b81146136ad575f80fd5b50565b5f813590506136be8161369a565b92915050565b5f80604083850312156136da576136d9613169565b5b5f6136e785828601613627565b92505060206136f8858286016136b0565b9150509250929050565b5f805f806080858703121561371a57613719613169565b5b5f61372787828801613627565b945050602085013567ffffffffffffffff8111156137485761374761316d565b5b61375487828801613333565b93505060406137658782880161337f565b9250506060613776878288016136b0565b91505092959194509250565b5f805f805f60a0868803121561379b5761379a613169565b5b5f86013567ffffffffffffffff8111156137b8576137b761316d565b5b6137c488828901613333565b95505060206137d58882890161337f565b945050604086013567ffffffffffffffff8111156137f6576137f561316d565b5b61380288828901613333565b935050606086013567ffffffffffffffff8111156138235761382261316d565b5b61382f88828901613333565b92505060806138408882890161337f565b9150509295509295909350565b5f6020828403121561386257613861613169565b5b5f61386f848285016133bc565b91505092915050565b5f805f6060848603121561388f5761388e613169565b5b5f61389c86828701613627565b935050602084013567ffffffffffffffff8111156138bd576138bc61316d565b5b6138c986828701613333565b92505060406138da868287016136b0565b9150509250925092565b5f602082840312156138f9576138f8613169565b5b5f82013567ffffffffffffffff8111156139165761391561316d565b5b61392284828501613333565b91505092915050565b6139348161368e565b82525050565b5f60208201905061394d5f83018461392b565b92915050565b5f805f6060848603121561396a57613969613169565b5b5f84013567ffffffffffffffff8111156139875761398661316d565b5b61399386828701613333565b935050602084013567ffffffffffffffff8111156139b4576139b361316d565b5b6139c086828701613333565b92505060406139d18682870161337f565b9150509250925092565b5f819050919050565b5f6139fe6139f96139f4846135e1565b6139db565b6135e1565b9050919050565b5f613a0f826139e4565b9050919050565b5f613a2082613a05565b9050919050565b613a3081613a16565b82525050565b5f602082019050613a495f830184613a27565b92915050565b5f805f8060808587031215613a6757613a66613169565b5b5f85013567ffffffffffffffff811115613a8457613a8361316d565b5b613a9087828801613333565b945050602085013567ffffffffffffffff811115613ab157613ab061316d565b5b613abd87828801613333565b935050604085013567ffffffffffffffff811115613ade57613add61316d565b5b613aea87828801613333565b9250506060613afb878288016136b0565b91505092959194509250565b5f805f60608486031215613b1e57613b1d613169565b5b5f613b2b86828701613627565b935050602084013567ffffffffffffffff811115613b4c57613b4b61316d565b5b613b5886828701613333565b9250506040613b698682870161337f565b9150509250925092565b613b7c81613360565b82525050565b5f606082019050613b955f830186613666565b613ba26020830185613b73565b613baf604083018461392b565b949350505050565b5f805f805f8060c08789031215613bd157613bd0613169565b5b5f87013567ffffffffffffffff811115613bee57613bed61316d565b5b613bfa89828a01613333565b9650506020613c0b89828a0161337f565b955050604087013567ffffffffffffffff811115613c2c57613c2b61316d565b5b613c3889828a01613333565b945050606087013567ffffffffffffffff811115613c5957613c5861316d565b5b613c6589828a01613333565b9350506080613c7689828a0161337f565b92505060a087013567ffffffffffffffff811115613c9757613c9661316d565b5b613ca389828a01613333565b9150509295509295509295565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f613ce282613cb0565b613cec8185613cba565b9350613cfc818560208601613cca565b613d058161322c565b840191505092915050565b613d1981613393565b82525050565b5f6040820190508181035f830152613d378185613cd8565b9050613d466020830184613d10565b9392505050565b5f81519050613d5b8161346c565b92915050565b5f60208284031215613d7657613d75613169565b5b5f613d8384828501613d4d565b91505092915050565b7f6f6e6c792074686520636f6e747261637420697473656c662063616e2063616c5f8201527f6c20746869732066756e6374696f6e0000000000000000000000000000000000602082015250565b5f613de6602f83613cba565b9150613df182613d8c565b604082019050919050565b5f6020820190508181035f830152613e1381613dda565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f613e5182613393565b9150613e5c83613393565b9250828201905067ffffffffffffffff811115613e7c57613e7b613e1a565b5b92915050565b5f6020820190508181035f830152613e9a8184613cd8565b905092915050565b5f81519050613eb081613611565b92915050565b5f60208284031215613ecb57613eca613169565b5b5f613ed884828501613ea2565b91505092915050565b5f604082019050613ef45f830185613666565b613f016020830184613b73565b9392505050565b5f606082019050613f1b5f830186613666565b613f286020830185613666565b613f356040830184613b73565b949350505050565b5f81519050613f4b8161369a565b92915050565b5f60208284031215613f6657613f65613169565b5b5f613f7384828501613f3d565b91505092915050565b5f613f8e613f89846132b4565b61329a565b905082815260208101848484011115613faa57613fa9613228565b5b613fb5848285613cca565b509392505050565b5f82601f830112613fd157613fd0613224565b5b8151613fe1848260208601613f7c565b91505092915050565b5f60208284031215613fff57613ffe613169565b5b5f82015167ffffffffffffffff81111561401c5761401b61316d565b5b61402884828501613fbd565b91505092915050565b5f60a0820190508181035f8301526140498188613cd8565b9050818103602083015261405d8187613cd8565b905061406c604083018661392b565b614079606083018561392b565b6140866080830184613b73565b9695505050505050565b7f45524332303a2063616c6c6572206973206e6f742074686520636861696e00005f82015250565b5f6140c4601e83613cba565b91506140cf82614090565b602082019050919050565b5f6020820190508181035f8301526140f1816140b8565b9050919050565b7f696e76616c696420666163746f727920616464726573730000000000000000005f82015250565b5f61412c601783613cba565b9150614137826140f8565b602082019050919050565b5f6020820190508181035f83015261415981614120565b9050919050565b5f8151905061416e81613369565b92915050565b5f6020828403121561418957614188613169565b5b5f61419684828501614160565b91505092915050565b5f81905092915050565b5f6141b382613cb0565b6141bd818561419f565b93506141cd818560208601613cca565b80840191505092915050565b5f6141e482856141a9565b91506141f082846141a9565b91508190509392505050565b5f8160f81b9050919050565b5f614212826141fc565b9050919050565b61422a6142258261368e565b614208565b82525050565b5f61423b82856141a9565b91506142478284614219565b6001820191508190509392505050565b5f819050919050565b61426981614257565b82525050565b5f60a0820190506142825f830188613666565b81810360208301526142948187613cd8565b905081810360408301526142a88186613cd8565b90506142b7606083018561392b565b6142c46080830184614260565b9695505050505050565b7f7b224074797065223a20222f6f70696e69742e6f706368696c642e76312e4d735f8201527f67496e697469617465546f6b656e5769746864726177616c2200000000000000602082015250565b5f61432860398361419f565b9150614333826142ce565b603982019050919050565b7f2c22616d6f756e74223a207b202264656e6f6d223a20220000000000000000005f82015250565b5f61437260178361419f565b915061437d8261433e565b601782019050919050565b7f222c22616d6f756e74223a2022000000000000000000000000000000000000005f82015250565b5f6143bc600d8361419f565b91506143c782614388565b600d82019050919050565b7f227d2c2273656e646572223a20220000000000000000000000000000000000005f82015250565b5f614406600e8361419f565b9150614411826143d2565b600e82019050919050565b7f222c22746f223a202200000000000000000000000000000000000000000000005f82015250565b5f61445060098361419f565b915061445b8261441c565b600982019050919050565b7f227d0000000000000000000000000000000000000000000000000000000000005f82015250565b5f61449a60028361419f565b91506144a582614466565b600282019050919050565b5f6144ba8261431c565b91506144c582614366565b91506144d182876141a9565b91506144dc826143b0565b91506144e882866141a9565b91506144f3826143fa565b91506144ff82856141a9565b915061450a82614444565b915061451682846141a9565b91506145218261448e565b915081905095945050505050565b7f6c6f63616c20746f6b656e20646f65736e2774206578697374000000000000005f82015250565b5f614563601983613cba565b915061456e8261452f565b602082019050919050565b5f6020820190508181035f83015261459081614557565b9050919050565b5f6020820190506145aa5f830184613b73565b92915050565b7f7b2265766d223a207b226173796e635f63616c6c6261636b223a207b226964225f8201527f3a20000000000000000000000000000000000000000000000000000000000000602082015250565b5f61460a60228361419f565b9150614615826145b0565b602282019050919050565b7f2c22636f6e74726163745f61646472657373223a2200000000000000000000005f82015250565b5f61465460158361419f565b915061465f82614620565b601582019050919050565b7f227d7d7d000000000000000000000000000000000000000000000000000000005f82015250565b5f61469e60048361419f565b91506146a98261466a565b600482019050919050565b5f6146be826145fe565b91506146ca82856141a9565b91506146d582614648565b91506146e182846141a9565b91506146ec82614692565b91508190509392505050565b5f6040820190508181035f8301526147108185613cd8565b905081810360208301526147248184613cd8565b90509392505050565b7f7b224074797065223a20222f6962632e6170706c69636174696f6e732e7472615f8201527f6e736665722e76312e4d73675472616e73666572222c00000000000000000000602082015250565b5f61478760368361419f565b91506147928261472d565b603682019050919050565b7f22736f757263655f706f7274223a20227472616e73666572222c0000000000005f82015250565b5f6147d1601a8361419f565b91506147dc8261479d565b601a82019050919050565b7f22736f757263655f6368616e6e656c223a2022000000000000000000000000005f82015250565b5f61481b60138361419f565b9150614826826147e7565b601382019050919050565b7f222c0000000000000000000000000000000000000000000000000000000000005f82015250565b5f61486560028361419f565b915061487082614831565b600282019050919050565b7f22746f6b656e223a207b202264656e6f6d223a202200000000000000000000005f82015250565b5f6148af60158361419f565b91506148ba8261487b565b601582019050919050565b7f22616d6f756e74223a20220000000000000000000000000000000000000000005f82015250565b5f6148f9600b8361419f565b9150614904826148c5565b600b82019050919050565b7f227d2c00000000000000000000000000000000000000000000000000000000005f82015250565b5f61494360038361419f565b915061494e8261490f565b600382019050919050565b7f2273656e646572223a20220000000000000000000000000000000000000000005f82015250565b5f61498d600b8361419f565b915061499882614959565b600b82019050919050565b7f227265636569766572223a2022000000000000000000000000000000000000005f82015250565b5f6149d7600d8361419f565b91506149e2826149a3565b600d82019050919050565b7f2274696d656f75745f686569676874223a207b227265766973696f6e5f6e756d5f8201527f626572223a202230222c227265766973696f6e5f686569676874223a2022302260208201527f7d2c000000000000000000000000000000000000000000000000000000000000604082015250565b5f614a6d60428361419f565b9150614a78826149ed565b604282019050919050565b7f2274696d656f75745f74696d657374616d70223a2022000000000000000000005f82015250565b5f614ab760168361419f565b9150614ac282614a83565b601682019050919050565b7f226d656d6f223a200000000000000000000000000000000000000000000000005f82015250565b5f614b0160088361419f565b9150614b0c82614acd565b600882019050919050565b7f7d000000000000000000000000000000000000000000000000000000000000005f82015250565b5f614b4b60018361419f565b9150614b5682614b17565b600182019050919050565b5f614b6b8261477b565b9150614b76826147c5565b9150614b818261480f565b9150614b8d828a6141a9565b9150614b9882614859565b9150614ba3826148a3565b9150614baf82896141a9565b9150614bba82614859565b9150614bc5826148ed565b9150614bd182886141a9565b9150614bdc82614937565b9150614be782614981565b9150614bf382876141a9565b9150614bfe82614859565b9150614c09826149cb565b9150614c1582866141a9565b9150614c2082614859565b9150614c2b82614a61565b9150614c3682614aab565b9150614c4282856141a9565b9150614c4d82614859565b9150614c5882614af5565b9150614c6482846141a9565b9150614c6f82614b3f565b915081905098975050505050505050565b5f6080820190508181035f830152614c988187613cd8565b90508181036020830152614cac8186613cd8565b9050614cbb604083018561392b565b614cc86060830184614260565b95945050505050565b5f614cdb8261368e565b9150614ce68361368e565b9250828203905060ff811115614cff57614cfe613e1a565b5b92915050565b5f8160011c9050919050565b5f808291508390505b6001851115614d5a57808604811115614d3657614d35613e1a565b5b6001851615614d455780820291505b8081029050614d5385614d05565b9450614d1a565b94509492505050565b5f82614d725760019050614e2d565b81614d7f575f9050614e2d565b8160018114614d955760028114614d9f57614dce565b6001915050614e2d565b60ff841115614db157614db0613e1a565b5b8360020a915084821115614dc857614dc7613e1a565b5b50614e2d565b5060208310610133831016604e8410600b8410161715614e035782820a905083811115614dfe57614dfd613e1a565b5b614e2d565b614e108484846001614d11565b92509050818404811115614e2757614e26613e1a565b5b81810290505b9392505050565b5f614e3e82613360565b9150614e4983613360565b9250614e767fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484614d63565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f614eb582613360565b9150614ec083613360565b925082614ed057614ecf614e7e565b5b828206905092915050565b7f6475737420616d6f756e742073686f756c64206265207a65726f0000000000005f82015250565b5f614f0f601a83613cba565b9150614f1a82614edb565b602082019050919050565b5f6020820190508181035f830152614f3c81614f03565b9050919050565b5f614f4d82613360565b9150614f5883613360565b925082614f6857614f67614e7e565b5b828204905092915050565b5f614f7d82613360565b9150614f8883613360565b9250828202614f9681613360565b91508282048414831517614fad57614fac613e1a565b5b5092915050565b5f614fbe82613360565b9150614fc983613360565b9250828201905080821115614fe157614fe0613e1a565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f61501e82613360565b91505f82036150305761502f613e1a565b5b600182039050919050565b5f60408201905061504e5f830185613b73565b61505b6020830184613b73565b939250505056fea164736f6c6343000819000a",
}

// Erc20WrapperABI is the input ABI used to generate the binding from.
// Deprecated: Use Erc20WrapperMetaData.ABI instead.
var Erc20WrapperABI = Erc20WrapperMetaData.ABI

// Erc20WrapperBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use Erc20WrapperMetaData.Bin instead.
var Erc20WrapperBin = Erc20WrapperMetaData.Bin

// DeployErc20Wrapper deploys a new Ethereum contract, binding an instance of Erc20Wrapper to it.
func DeployErc20Wrapper(auth *bind.TransactOpts, backend bind.ContractBackend, erc20Factory common.Address) (common.Address, *types.Transaction, *Erc20Wrapper, error) {
	parsed, err := Erc20WrapperMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(Erc20WrapperBin), backend, erc20Factory)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Erc20Wrapper{Erc20WrapperCaller: Erc20WrapperCaller{contract: contract}, Erc20WrapperTransactor: Erc20WrapperTransactor{contract: contract}, Erc20WrapperFilterer: Erc20WrapperFilterer{contract: contract}}, nil
}

// Erc20Wrapper is an auto generated Go binding around an Ethereum contract.
type Erc20Wrapper struct {
	Erc20WrapperCaller     // Read-only binding to the contract
	Erc20WrapperTransactor // Write-only binding to the contract
	Erc20WrapperFilterer   // Log filterer for contract events
}

// Erc20WrapperCaller is an auto generated read-only Go binding around an Ethereum contract.
type Erc20WrapperCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Erc20WrapperTransactor is an auto generated write-only Go binding around an Ethereum contract.
type Erc20WrapperTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Erc20WrapperFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type Erc20WrapperFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Erc20WrapperSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type Erc20WrapperSession struct {
	Contract     *Erc20Wrapper     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// Erc20WrapperCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type Erc20WrapperCallerSession struct {
	Contract *Erc20WrapperCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// Erc20WrapperTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type Erc20WrapperTransactorSession struct {
	Contract     *Erc20WrapperTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// Erc20WrapperRaw is an auto generated low-level Go binding around an Ethereum contract.
type Erc20WrapperRaw struct {
	Contract *Erc20Wrapper // Generic contract binding to access the raw methods on
}

// Erc20WrapperCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type Erc20WrapperCallerRaw struct {
	Contract *Erc20WrapperCaller // Generic read-only contract binding to access the raw methods on
}

// Erc20WrapperTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type Erc20WrapperTransactorRaw struct {
	Contract *Erc20WrapperTransactor // Generic write-only contract binding to access the raw methods on
}

// NewErc20Wrapper creates a new instance of Erc20Wrapper, bound to a specific deployed contract.
func NewErc20Wrapper(address common.Address, backend bind.ContractBackend) (*Erc20Wrapper, error) {
	contract, err := bindErc20Wrapper(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Erc20Wrapper{Erc20WrapperCaller: Erc20WrapperCaller{contract: contract}, Erc20WrapperTransactor: Erc20WrapperTransactor{contract: contract}, Erc20WrapperFilterer: Erc20WrapperFilterer{contract: contract}}, nil
}

// NewErc20WrapperCaller creates a new read-only instance of Erc20Wrapper, bound to a specific deployed contract.
func NewErc20WrapperCaller(address common.Address, caller bind.ContractCaller) (*Erc20WrapperCaller, error) {
	contract, err := bindErc20Wrapper(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperCaller{contract: contract}, nil
}

// NewErc20WrapperTransactor creates a new write-only instance of Erc20Wrapper, bound to a specific deployed contract.
func NewErc20WrapperTransactor(address common.Address, transactor bind.ContractTransactor) (*Erc20WrapperTransactor, error) {
	contract, err := bindErc20Wrapper(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperTransactor{contract: contract}, nil
}

// NewErc20WrapperFilterer creates a new log filterer instance of Erc20Wrapper, bound to a specific deployed contract.
func NewErc20WrapperFilterer(address common.Address, filterer bind.ContractFilterer) (*Erc20WrapperFilterer, error) {
	contract, err := bindErc20Wrapper(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperFilterer{contract: contract}, nil
}

// bindErc20Wrapper binds a generic wrapper to an already deployed contract.
func bindErc20Wrapper(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := Erc20WrapperMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Erc20Wrapper *Erc20WrapperRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Erc20Wrapper.Contract.Erc20WrapperCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Erc20Wrapper *Erc20WrapperRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.Erc20WrapperTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Erc20Wrapper *Erc20WrapperRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.Erc20WrapperTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Erc20Wrapper *Erc20WrapperCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Erc20Wrapper.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Erc20Wrapper *Erc20WrapperTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Erc20Wrapper *Erc20WrapperTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.contract.Transact(opts, method, params...)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) Factory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "factory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) Factory() (common.Address, error) {
	return _Erc20Wrapper.Contract.Factory(&_Erc20Wrapper.CallOpts)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) Factory() (common.Address, error) {
	return _Erc20Wrapper.Contract.Factory(&_Erc20Wrapper.CallOpts)
}

// GetToLocalERC20Address is a free data retrieval call binding the contract method 0xcd78fdec.
//
// Solidity: function getToLocalERC20Address(string remoteDenom, string name, string symbol, uint8 decimal) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) GetToLocalERC20Address(opts *bind.CallOpts, remoteDenom string, name string, symbol string, decimal uint8) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "getToLocalERC20Address", remoteDenom, name, symbol, decimal)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetToLocalERC20Address is a free data retrieval call binding the contract method 0xcd78fdec.
//
// Solidity: function getToLocalERC20Address(string remoteDenom, string name, string symbol, uint8 decimal) view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) GetToLocalERC20Address(remoteDenom string, name string, symbol string, decimal uint8) (common.Address, error) {
	return _Erc20Wrapper.Contract.GetToLocalERC20Address(&_Erc20Wrapper.CallOpts, remoteDenom, name, symbol, decimal)
}

// GetToLocalERC20Address is a free data retrieval call binding the contract method 0xcd78fdec.
//
// Solidity: function getToLocalERC20Address(string remoteDenom, string name, string symbol, uint8 decimal) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) GetToLocalERC20Address(remoteDenom string, name string, symbol string, decimal uint8) (common.Address, error) {
	return _Erc20Wrapper.Contract.GetToLocalERC20Address(&_Erc20Wrapper.CallOpts, remoteDenom, name, symbol, decimal)
}

// GetToRemoteERC20Address is a free data retrieval call binding the contract method 0x9548153f.
//
// Solidity: function getToRemoteERC20Address(string localDenom) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) GetToRemoteERC20Address(opts *bind.CallOpts, localDenom string) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "getToRemoteERC20Address", localDenom)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetToRemoteERC20Address is a free data retrieval call binding the contract method 0x9548153f.
//
// Solidity: function getToRemoteERC20Address(string localDenom) view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) GetToRemoteERC20Address(localDenom string) (common.Address, error) {
	return _Erc20Wrapper.Contract.GetToRemoteERC20Address(&_Erc20Wrapper.CallOpts, localDenom)
}

// GetToRemoteERC20Address is a free data retrieval call binding the contract method 0x9548153f.
//
// Solidity: function getToRemoteERC20Address(string localDenom) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) GetToRemoteERC20Address(localDenom string) (common.Address, error) {
	return _Erc20Wrapper.Contract.GetToRemoteERC20Address(&_Erc20Wrapper.CallOpts, localDenom)
}

// LocalTokens is a free data retrieval call binding the contract method 0x1efb51e6.
//
// Solidity: function localTokens(address , uint8 ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) LocalTokens(opts *bind.CallOpts, arg0 common.Address, arg1 uint8) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "localTokens", arg0, arg1)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LocalTokens is a free data retrieval call binding the contract method 0x1efb51e6.
//
// Solidity: function localTokens(address , uint8 ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) LocalTokens(arg0 common.Address, arg1 uint8) (common.Address, error) {
	return _Erc20Wrapper.Contract.LocalTokens(&_Erc20Wrapper.CallOpts, arg0, arg1)
}

// LocalTokens is a free data retrieval call binding the contract method 0x1efb51e6.
//
// Solidity: function localTokens(address , uint8 ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) LocalTokens(arg0 common.Address, arg1 uint8) (common.Address, error) {
	return _Erc20Wrapper.Contract.LocalTokens(&_Erc20Wrapper.CallOpts, arg0, arg1)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) Owner() (common.Address, error) {
	return _Erc20Wrapper.Contract.Owner(&_Erc20Wrapper.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) Owner() (common.Address, error) {
	return _Erc20Wrapper.Contract.Owner(&_Erc20Wrapper.CallOpts)
}

// RemoteDecimals is a free data retrieval call binding the contract method 0x9f65ade5.
//
// Solidity: function remoteDecimals(address ) view returns(uint8)
func (_Erc20Wrapper *Erc20WrapperCaller) RemoteDecimals(opts *bind.CallOpts, arg0 common.Address) (uint8, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "remoteDecimals", arg0)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// RemoteDecimals is a free data retrieval call binding the contract method 0x9f65ade5.
//
// Solidity: function remoteDecimals(address ) view returns(uint8)
func (_Erc20Wrapper *Erc20WrapperSession) RemoteDecimals(arg0 common.Address) (uint8, error) {
	return _Erc20Wrapper.Contract.RemoteDecimals(&_Erc20Wrapper.CallOpts, arg0)
}

// RemoteDecimals is a free data retrieval call binding the contract method 0x9f65ade5.
//
// Solidity: function remoteDecimals(address ) view returns(uint8)
func (_Erc20Wrapper *Erc20WrapperCallerSession) RemoteDecimals(arg0 common.Address) (uint8, error) {
	return _Erc20Wrapper.Contract.RemoteDecimals(&_Erc20Wrapper.CallOpts, arg0)
}

// RemoteTokens is a free data retrieval call binding the contract method 0x1de5537c.
//
// Solidity: function remoteTokens(address ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) RemoteTokens(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "remoteTokens", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RemoteTokens is a free data retrieval call binding the contract method 0x1de5537c.
//
// Solidity: function remoteTokens(address ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) RemoteTokens(arg0 common.Address) (common.Address, error) {
	return _Erc20Wrapper.Contract.RemoteTokens(&_Erc20Wrapper.CallOpts, arg0)
}

// RemoteTokens is a free data retrieval call binding the contract method 0x1de5537c.
//
// Solidity: function remoteTokens(address ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) RemoteTokens(arg0 common.Address) (common.Address, error) {
	return _Erc20Wrapper.Contract.RemoteTokens(&_Erc20Wrapper.CallOpts, arg0)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Erc20Wrapper *Erc20WrapperCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Erc20Wrapper *Erc20WrapperSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Erc20Wrapper.Contract.SupportsInterface(&_Erc20Wrapper.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Erc20Wrapper *Erc20WrapperCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Erc20Wrapper.Contract.SupportsInterface(&_Erc20Wrapper.CallOpts, interfaceId)
}

// IbcAck is a paid mutator transaction binding the contract method 0x0d4f1f9d.
//
// Solidity: function ibc_ack(uint64 callback_id, bool success) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) IbcAck(opts *bind.TransactOpts, callback_id uint64, success bool) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "ibc_ack", callback_id, success)
}

// IbcAck is a paid mutator transaction binding the contract method 0x0d4f1f9d.
//
// Solidity: function ibc_ack(uint64 callback_id, bool success) returns()
func (_Erc20Wrapper *Erc20WrapperSession) IbcAck(callback_id uint64, success bool) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.IbcAck(&_Erc20Wrapper.TransactOpts, callback_id, success)
}

// IbcAck is a paid mutator transaction binding the contract method 0x0d4f1f9d.
//
// Solidity: function ibc_ack(uint64 callback_id, bool success) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) IbcAck(callback_id uint64, success bool) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.IbcAck(&_Erc20Wrapper.TransactOpts, callback_id, success)
}

// IbcTimeout is a paid mutator transaction binding the contract method 0x31a503f0.
//
// Solidity: function ibc_timeout(uint64 callback_id) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) IbcTimeout(opts *bind.TransactOpts, callback_id uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "ibc_timeout", callback_id)
}

// IbcTimeout is a paid mutator transaction binding the contract method 0x31a503f0.
//
// Solidity: function ibc_timeout(uint64 callback_id) returns()
func (_Erc20Wrapper *Erc20WrapperSession) IbcTimeout(callback_id uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.IbcTimeout(&_Erc20Wrapper.TransactOpts, callback_id)
}

// IbcTimeout is a paid mutator transaction binding the contract method 0x31a503f0.
//
// Solidity: function ibc_timeout(uint64 callback_id) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) IbcTimeout(callback_id uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.IbcTimeout(&_Erc20Wrapper.TransactOpts, callback_id)
}

// SetFactory is a paid mutator transaction binding the contract method 0x5bb47808.
//
// Solidity: function setFactory(address newFactory) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) SetFactory(opts *bind.TransactOpts, newFactory common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "setFactory", newFactory)
}

// SetFactory is a paid mutator transaction binding the contract method 0x5bb47808.
//
// Solidity: function setFactory(address newFactory) returns()
func (_Erc20Wrapper *Erc20WrapperSession) SetFactory(newFactory common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.SetFactory(&_Erc20Wrapper.TransactOpts, newFactory)
}

// SetFactory is a paid mutator transaction binding the contract method 0x5bb47808.
//
// Solidity: function setFactory(address newFactory) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) SetFactory(newFactory common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.SetFactory(&_Erc20Wrapper.TransactOpts, newFactory)
}

// ToLocal is a paid mutator transaction binding the contract method 0x1efd1a84.
//
// Solidity: function toLocal(address receiver, string remoteDenom, uint256 remoteAmount, uint8 _remoteDecimals) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) ToLocal(opts *bind.TransactOpts, receiver common.Address, remoteDenom string, remoteAmount *big.Int, _remoteDecimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "toLocal", receiver, remoteDenom, remoteAmount, _remoteDecimals)
}

// ToLocal is a paid mutator transaction binding the contract method 0x1efd1a84.
//
// Solidity: function toLocal(address receiver, string remoteDenom, uint256 remoteAmount, uint8 _remoteDecimals) returns()
func (_Erc20Wrapper *Erc20WrapperSession) ToLocal(receiver common.Address, remoteDenom string, remoteAmount *big.Int, _remoteDecimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToLocal(&_Erc20Wrapper.TransactOpts, receiver, remoteDenom, remoteAmount, _remoteDecimals)
}

// ToLocal is a paid mutator transaction binding the contract method 0x1efd1a84.
//
// Solidity: function toLocal(address receiver, string remoteDenom, uint256 remoteAmount, uint8 _remoteDecimals) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) ToLocal(receiver common.Address, remoteDenom string, remoteAmount *big.Int, _remoteDecimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToLocal(&_Erc20Wrapper.TransactOpts, receiver, remoteDenom, remoteAmount, _remoteDecimals)
}

// ToLocal0 is a paid mutator transaction binding the contract method 0x701dcf21.
//
// Solidity: function toLocal(address receiver, string remoteDenom, uint8 _remoteDecimals) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) ToLocal0(opts *bind.TransactOpts, receiver common.Address, remoteDenom string, _remoteDecimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "toLocal0", receiver, remoteDenom, _remoteDecimals)
}

// ToLocal0 is a paid mutator transaction binding the contract method 0x701dcf21.
//
// Solidity: function toLocal(address receiver, string remoteDenom, uint8 _remoteDecimals) returns()
func (_Erc20Wrapper *Erc20WrapperSession) ToLocal0(receiver common.Address, remoteDenom string, _remoteDecimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToLocal0(&_Erc20Wrapper.TransactOpts, receiver, remoteDenom, _remoteDecimals)
}

// ToLocal0 is a paid mutator transaction binding the contract method 0x701dcf21.
//
// Solidity: function toLocal(address receiver, string remoteDenom, uint8 _remoteDecimals) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) ToLocal0(receiver common.Address, remoteDenom string, _remoteDecimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToLocal0(&_Erc20Wrapper.TransactOpts, receiver, remoteDenom, _remoteDecimals)
}

// ToRemote is a paid mutator transaction binding the contract method 0xcf9ee0c3.
//
// Solidity: function toRemote(address receiver, string localDenom, uint256 localAmount) returns(address remoteToken, uint256 remoteAmount, uint8 _remoteDecimals)
func (_Erc20Wrapper *Erc20WrapperTransactor) ToRemote(opts *bind.TransactOpts, receiver common.Address, localDenom string, localAmount *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "toRemote", receiver, localDenom, localAmount)
}

// ToRemote is a paid mutator transaction binding the contract method 0xcf9ee0c3.
//
// Solidity: function toRemote(address receiver, string localDenom, uint256 localAmount) returns(address remoteToken, uint256 remoteAmount, uint8 _remoteDecimals)
func (_Erc20Wrapper *Erc20WrapperSession) ToRemote(receiver common.Address, localDenom string, localAmount *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemote(&_Erc20Wrapper.TransactOpts, receiver, localDenom, localAmount)
}

// ToRemote is a paid mutator transaction binding the contract method 0xcf9ee0c3.
//
// Solidity: function toRemote(address receiver, string localDenom, uint256 localAmount) returns(address remoteToken, uint256 remoteAmount, uint8 _remoteDecimals)
func (_Erc20Wrapper *Erc20WrapperTransactorSession) ToRemote(receiver common.Address, localDenom string, localAmount *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemote(&_Erc20Wrapper.TransactOpts, receiver, localDenom, localAmount)
}

// ToRemoteAndIBCTransfer is a paid mutator transaction binding the contract method 0x1b750022.
//
// Solidity: function toRemoteAndIBCTransfer(string localDenom, uint256 localAmount, string channel, string receiver, uint256 timeout, string memo, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) ToRemoteAndIBCTransfer(opts *bind.TransactOpts, localDenom string, localAmount *big.Int, channel string, receiver string, timeout *big.Int, memo string, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "toRemoteAndIBCTransfer", localDenom, localAmount, channel, receiver, timeout, memo, gasLimit)
}

// ToRemoteAndIBCTransfer is a paid mutator transaction binding the contract method 0x1b750022.
//
// Solidity: function toRemoteAndIBCTransfer(string localDenom, uint256 localAmount, string channel, string receiver, uint256 timeout, string memo, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperSession) ToRemoteAndIBCTransfer(localDenom string, localAmount *big.Int, channel string, receiver string, timeout *big.Int, memo string, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndIBCTransfer(&_Erc20Wrapper.TransactOpts, localDenom, localAmount, channel, receiver, timeout, memo, gasLimit)
}

// ToRemoteAndIBCTransfer is a paid mutator transaction binding the contract method 0x1b750022.
//
// Solidity: function toRemoteAndIBCTransfer(string localDenom, uint256 localAmount, string channel, string receiver, uint256 timeout, string memo, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) ToRemoteAndIBCTransfer(localDenom string, localAmount *big.Int, channel string, receiver string, timeout *big.Int, memo string, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndIBCTransfer(&_Erc20Wrapper.TransactOpts, localDenom, localAmount, channel, receiver, timeout, memo, gasLimit)
}

// ToRemoteAndIBCTransfer0 is a paid mutator transaction binding the contract method 0x24721917.
//
// Solidity: function toRemoteAndIBCTransfer(string localDenom, uint256 localAmount, string channel, string receiver, uint256 timeout) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) ToRemoteAndIBCTransfer0(opts *bind.TransactOpts, localDenom string, localAmount *big.Int, channel string, receiver string, timeout *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "toRemoteAndIBCTransfer0", localDenom, localAmount, channel, receiver, timeout)
}

// ToRemoteAndIBCTransfer0 is a paid mutator transaction binding the contract method 0x24721917.
//
// Solidity: function toRemoteAndIBCTransfer(string localDenom, uint256 localAmount, string channel, string receiver, uint256 timeout) returns()
func (_Erc20Wrapper *Erc20WrapperSession) ToRemoteAndIBCTransfer0(localDenom string, localAmount *big.Int, channel string, receiver string, timeout *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndIBCTransfer0(&_Erc20Wrapper.TransactOpts, localDenom, localAmount, channel, receiver, timeout)
}

// ToRemoteAndIBCTransfer0 is a paid mutator transaction binding the contract method 0x24721917.
//
// Solidity: function toRemoteAndIBCTransfer(string localDenom, uint256 localAmount, string channel, string receiver, uint256 timeout) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) ToRemoteAndIBCTransfer0(localDenom string, localAmount *big.Int, channel string, receiver string, timeout *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndIBCTransfer0(&_Erc20Wrapper.TransactOpts, localDenom, localAmount, channel, receiver, timeout)
}

// ToRemoteAndIBCTransfer1 is a paid mutator transaction binding the contract method 0xf787cbdd.
//
// Solidity: function toRemoteAndIBCTransfer(string localDenom, uint256 localAmount, string channel, string receiver, uint256 timeout, string memo) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) ToRemoteAndIBCTransfer1(opts *bind.TransactOpts, localDenom string, localAmount *big.Int, channel string, receiver string, timeout *big.Int, memo string) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "toRemoteAndIBCTransfer1", localDenom, localAmount, channel, receiver, timeout, memo)
}

// ToRemoteAndIBCTransfer1 is a paid mutator transaction binding the contract method 0xf787cbdd.
//
// Solidity: function toRemoteAndIBCTransfer(string localDenom, uint256 localAmount, string channel, string receiver, uint256 timeout, string memo) returns()
func (_Erc20Wrapper *Erc20WrapperSession) ToRemoteAndIBCTransfer1(localDenom string, localAmount *big.Int, channel string, receiver string, timeout *big.Int, memo string) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndIBCTransfer1(&_Erc20Wrapper.TransactOpts, localDenom, localAmount, channel, receiver, timeout, memo)
}

// ToRemoteAndIBCTransfer1 is a paid mutator transaction binding the contract method 0xf787cbdd.
//
// Solidity: function toRemoteAndIBCTransfer(string localDenom, uint256 localAmount, string channel, string receiver, uint256 timeout, string memo) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) ToRemoteAndIBCTransfer1(localDenom string, localAmount *big.Int, channel string, receiver string, timeout *big.Int, memo string) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndIBCTransfer1(&_Erc20Wrapper.TransactOpts, localDenom, localAmount, channel, receiver, timeout, memo)
}

// ToRemoteAndOPWithdraw is a paid mutator transaction binding the contract method 0x0423d4d8.
//
// Solidity: function toRemoteAndOPWithdraw(string receiver, string localDenom, uint256 localAmount, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) ToRemoteAndOPWithdraw(opts *bind.TransactOpts, receiver string, localDenom string, localAmount *big.Int, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "toRemoteAndOPWithdraw", receiver, localDenom, localAmount, gasLimit)
}

// ToRemoteAndOPWithdraw is a paid mutator transaction binding the contract method 0x0423d4d8.
//
// Solidity: function toRemoteAndOPWithdraw(string receiver, string localDenom, uint256 localAmount, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperSession) ToRemoteAndOPWithdraw(receiver string, localDenom string, localAmount *big.Int, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndOPWithdraw(&_Erc20Wrapper.TransactOpts, receiver, localDenom, localAmount, gasLimit)
}

// ToRemoteAndOPWithdraw is a paid mutator transaction binding the contract method 0x0423d4d8.
//
// Solidity: function toRemoteAndOPWithdraw(string receiver, string localDenom, uint256 localAmount, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) ToRemoteAndOPWithdraw(receiver string, localDenom string, localAmount *big.Int, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndOPWithdraw(&_Erc20Wrapper.TransactOpts, receiver, localDenom, localAmount, gasLimit)
}

// ToRemoteAndOPWithdraw0 is a paid mutator transaction binding the contract method 0xb9cf3742.
//
// Solidity: function toRemoteAndOPWithdraw(string receiver, string localDenom, uint256 localAmount) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) ToRemoteAndOPWithdraw0(opts *bind.TransactOpts, receiver string, localDenom string, localAmount *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "toRemoteAndOPWithdraw0", receiver, localDenom, localAmount)
}

// ToRemoteAndOPWithdraw0 is a paid mutator transaction binding the contract method 0xb9cf3742.
//
// Solidity: function toRemoteAndOPWithdraw(string receiver, string localDenom, uint256 localAmount) returns()
func (_Erc20Wrapper *Erc20WrapperSession) ToRemoteAndOPWithdraw0(receiver string, localDenom string, localAmount *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndOPWithdraw0(&_Erc20Wrapper.TransactOpts, receiver, localDenom, localAmount)
}

// ToRemoteAndOPWithdraw0 is a paid mutator transaction binding the contract method 0xb9cf3742.
//
// Solidity: function toRemoteAndOPWithdraw(string receiver, string localDenom, uint256 localAmount) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) ToRemoteAndOPWithdraw0(receiver string, localDenom string, localAmount *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndOPWithdraw0(&_Erc20Wrapper.TransactOpts, receiver, localDenom, localAmount)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Erc20Wrapper *Erc20WrapperSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.TransferOwnership(&_Erc20Wrapper.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.TransferOwnership(&_Erc20Wrapper.TransactOpts, newOwner)
}

// Erc20WrapperConvertedIterator is returned from FilterConverted and is used to iterate over the raw logs and unpacked data for Converted events raised by the Erc20Wrapper contract.
type Erc20WrapperConvertedIterator struct {
	Event *Erc20WrapperConverted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Erc20WrapperConvertedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Erc20WrapperConverted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Erc20WrapperConverted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Erc20WrapperConvertedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Erc20WrapperConvertedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Erc20WrapperConverted represents a Converted event raised by the Erc20Wrapper contract.
type Erc20WrapperConverted struct {
	SrcDenom   string
	DstDenom   string
	SrcDecimal uint8
	DstDecimal uint8
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterConverted is a free log retrieval operation binding the contract event 0xa115381c3e3d88df4f33d381b1fee8644c837f96f60a1e630c5da72e27f769a3.
//
// Solidity: event Converted(string srcDenom, string dstDenom, uint8 srcDecimal, uint8 dstDecimal, uint256 amount)
func (_Erc20Wrapper *Erc20WrapperFilterer) FilterConverted(opts *bind.FilterOpts) (*Erc20WrapperConvertedIterator, error) {

	logs, sub, err := _Erc20Wrapper.contract.FilterLogs(opts, "Converted")
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperConvertedIterator{contract: _Erc20Wrapper.contract, event: "Converted", logs: logs, sub: sub}, nil
}

// WatchConverted is a free log subscription operation binding the contract event 0xa115381c3e3d88df4f33d381b1fee8644c837f96f60a1e630c5da72e27f769a3.
//
// Solidity: event Converted(string srcDenom, string dstDenom, uint8 srcDecimal, uint8 dstDecimal, uint256 amount)
func (_Erc20Wrapper *Erc20WrapperFilterer) WatchConverted(opts *bind.WatchOpts, sink chan<- *Erc20WrapperConverted) (event.Subscription, error) {

	logs, sub, err := _Erc20Wrapper.contract.WatchLogs(opts, "Converted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Erc20WrapperConverted)
				if err := _Erc20Wrapper.contract.UnpackLog(event, "Converted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConverted is a log parse operation binding the contract event 0xa115381c3e3d88df4f33d381b1fee8644c837f96f60a1e630c5da72e27f769a3.
//
// Solidity: event Converted(string srcDenom, string dstDenom, uint8 srcDecimal, uint8 dstDecimal, uint256 amount)
func (_Erc20Wrapper *Erc20WrapperFilterer) ParseConverted(log types.Log) (*Erc20WrapperConverted, error) {
	event := new(Erc20WrapperConverted)
	if err := _Erc20Wrapper.contract.UnpackLog(event, "Converted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Erc20WrapperOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Erc20Wrapper contract.
type Erc20WrapperOwnershipTransferredIterator struct {
	Event *Erc20WrapperOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Erc20WrapperOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Erc20WrapperOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Erc20WrapperOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Erc20WrapperOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Erc20WrapperOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Erc20WrapperOwnershipTransferred represents a OwnershipTransferred event raised by the Erc20Wrapper contract.
type Erc20WrapperOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Erc20Wrapper *Erc20WrapperFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*Erc20WrapperOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Erc20Wrapper.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperOwnershipTransferredIterator{contract: _Erc20Wrapper.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Erc20Wrapper *Erc20WrapperFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *Erc20WrapperOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Erc20Wrapper.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Erc20WrapperOwnershipTransferred)
				if err := _Erc20Wrapper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Erc20Wrapper *Erc20WrapperFilterer) ParseOwnershipTransferred(log types.Log) (*Erc20WrapperOwnershipTransferred, error) {
	event := new(Erc20WrapperOwnershipTransferred)
	if err := _Erc20Wrapper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
