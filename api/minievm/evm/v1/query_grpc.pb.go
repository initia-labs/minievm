// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: minievm/evm/v1/query.proto

package evmv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Code_FullMethodName                        = "/minievm.evm.v1.Query/Code"
	Query_State_FullMethodName                       = "/minievm.evm.v1.Query/State"
	Query_ERC20Factory_FullMethodName                = "/minievm.evm.v1.Query/ERC20Factory"
	Query_ERC20Wrapper_FullMethodName                = "/minievm.evm.v1.Query/ERC20Wrapper"
	Query_ConnectOracle_FullMethodName               = "/minievm.evm.v1.Query/ConnectOracle"
	Query_ContractAddrByDenom_FullMethodName         = "/minievm.evm.v1.Query/ContractAddrByDenom"
	Query_ERC721ClassIdByContractAddr_FullMethodName = "/minievm.evm.v1.Query/ERC721ClassIdByContractAddr"
	Query_ERC721OriginTokenInfos_FullMethodName      = "/minievm.evm.v1.Query/ERC721OriginTokenInfos"
	Query_Denom_FullMethodName                       = "/minievm.evm.v1.Query/Denom"
	Query_Call_FullMethodName                        = "/minievm.evm.v1.Query/Call"
	Query_Params_FullMethodName                      = "/minievm.evm.v1.Query/Params"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Code gets the module info.
	Code(ctx context.Context, in *QueryCodeRequest, opts ...grpc.CallOption) (*QueryCodeResponse, error)
	// State gets the state bytes of the given address and key bytes.
	State(ctx context.Context, in *QueryStateRequest, opts ...grpc.CallOption) (*QueryStateResponse, error)
	// ERC20Factory gets the ERC20Factory contract address.
	ERC20Factory(ctx context.Context, in *QueryERC20FactoryRequest, opts ...grpc.CallOption) (*QueryERC20FactoryResponse, error)
	// ERC20Wrapper gets the ERC20Wrapper contract address.
	ERC20Wrapper(ctx context.Context, in *QueryERC20WrapperRequest, opts ...grpc.CallOption) (*QueryERC20WrapperResponse, error)
	ConnectOracle(ctx context.Context, in *QueryConnectOracleRequest, opts ...grpc.CallOption) (*QueryConnectOracleResponse, error)
	// ContractAddrByDenom gets the contract address by denom.
	ContractAddrByDenom(ctx context.Context, in *QueryContractAddrByDenomRequest, opts ...grpc.CallOption) (*QueryContractAddrByDenomResponse, error)
	// ERC721ClassIdByContractAddr gets the class id by contract address.
	ERC721ClassIdByContractAddr(ctx context.Context, in *QueryERC721ClassIdByContractAddrRequest, opts ...grpc.CallOption) (*QueryERC721ClassIdByContractAddrResponse, error)
	// ERC721OriginTokenInfos gets the origin token infos by class id and token ids.
	ERC721OriginTokenInfos(ctx context.Context, in *QueryERC721OriginTokenInfosRequest, opts ...grpc.CallOption) (*QueryERC721OriginTokenInfosResponse, error)
	// Denom gets the denom of the given contract address.
	Denom(ctx context.Context, in *QueryDenomRequest, opts ...grpc.CallOption) (*QueryDenomResponse, error)
	// Call execute entry function and return  the function result
	Call(ctx context.Context, in *QueryCallRequest, opts ...grpc.CallOption) (*QueryCallResponse, error)
	// Params queries all parameters.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Code(ctx context.Context, in *QueryCodeRequest, opts ...grpc.CallOption) (*QueryCodeResponse, error) {
	out := new(QueryCodeResponse)
	err := c.cc.Invoke(ctx, Query_Code_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) State(ctx context.Context, in *QueryStateRequest, opts ...grpc.CallOption) (*QueryStateResponse, error) {
	out := new(QueryStateResponse)
	err := c.cc.Invoke(ctx, Query_State_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ERC20Factory(ctx context.Context, in *QueryERC20FactoryRequest, opts ...grpc.CallOption) (*QueryERC20FactoryResponse, error) {
	out := new(QueryERC20FactoryResponse)
	err := c.cc.Invoke(ctx, Query_ERC20Factory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ERC20Wrapper(ctx context.Context, in *QueryERC20WrapperRequest, opts ...grpc.CallOption) (*QueryERC20WrapperResponse, error) {
	out := new(QueryERC20WrapperResponse)
	err := c.cc.Invoke(ctx, Query_ERC20Wrapper_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ConnectOracle(ctx context.Context, in *QueryConnectOracleRequest, opts ...grpc.CallOption) (*QueryConnectOracleResponse, error) {
	out := new(QueryConnectOracleResponse)
	err := c.cc.Invoke(ctx, Query_ConnectOracle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ContractAddrByDenom(ctx context.Context, in *QueryContractAddrByDenomRequest, opts ...grpc.CallOption) (*QueryContractAddrByDenomResponse, error) {
	out := new(QueryContractAddrByDenomResponse)
	err := c.cc.Invoke(ctx, Query_ContractAddrByDenom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ERC721ClassIdByContractAddr(ctx context.Context, in *QueryERC721ClassIdByContractAddrRequest, opts ...grpc.CallOption) (*QueryERC721ClassIdByContractAddrResponse, error) {
	out := new(QueryERC721ClassIdByContractAddrResponse)
	err := c.cc.Invoke(ctx, Query_ERC721ClassIdByContractAddr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ERC721OriginTokenInfos(ctx context.Context, in *QueryERC721OriginTokenInfosRequest, opts ...grpc.CallOption) (*QueryERC721OriginTokenInfosResponse, error) {
	out := new(QueryERC721OriginTokenInfosResponse)
	err := c.cc.Invoke(ctx, Query_ERC721OriginTokenInfos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Denom(ctx context.Context, in *QueryDenomRequest, opts ...grpc.CallOption) (*QueryDenomResponse, error) {
	out := new(QueryDenomResponse)
	err := c.cc.Invoke(ctx, Query_Denom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Call(ctx context.Context, in *QueryCallRequest, opts ...grpc.CallOption) (*QueryCallResponse, error) {
	out := new(QueryCallResponse)
	err := c.cc.Invoke(ctx, Query_Call_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Code gets the module info.
	Code(context.Context, *QueryCodeRequest) (*QueryCodeResponse, error)
	// State gets the state bytes of the given address and key bytes.
	State(context.Context, *QueryStateRequest) (*QueryStateResponse, error)
	// ERC20Factory gets the ERC20Factory contract address.
	ERC20Factory(context.Context, *QueryERC20FactoryRequest) (*QueryERC20FactoryResponse, error)
	// ERC20Wrapper gets the ERC20Wrapper contract address.
	ERC20Wrapper(context.Context, *QueryERC20WrapperRequest) (*QueryERC20WrapperResponse, error)
	ConnectOracle(context.Context, *QueryConnectOracleRequest) (*QueryConnectOracleResponse, error)
	// ContractAddrByDenom gets the contract address by denom.
	ContractAddrByDenom(context.Context, *QueryContractAddrByDenomRequest) (*QueryContractAddrByDenomResponse, error)
	// ERC721ClassIdByContractAddr gets the class id by contract address.
	ERC721ClassIdByContractAddr(context.Context, *QueryERC721ClassIdByContractAddrRequest) (*QueryERC721ClassIdByContractAddrResponse, error)
	// ERC721OriginTokenInfos gets the origin token infos by class id and token ids.
	ERC721OriginTokenInfos(context.Context, *QueryERC721OriginTokenInfosRequest) (*QueryERC721OriginTokenInfosResponse, error)
	// Denom gets the denom of the given contract address.
	Denom(context.Context, *QueryDenomRequest) (*QueryDenomResponse, error)
	// Call execute entry function and return  the function result
	Call(context.Context, *QueryCallRequest) (*QueryCallResponse, error)
	// Params queries all parameters.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Code(context.Context, *QueryCodeRequest) (*QueryCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Code not implemented")
}
func (UnimplementedQueryServer) State(context.Context, *QueryStateRequest) (*QueryStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method State not implemented")
}
func (UnimplementedQueryServer) ERC20Factory(context.Context, *QueryERC20FactoryRequest) (*QueryERC20FactoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ERC20Factory not implemented")
}
func (UnimplementedQueryServer) ERC20Wrapper(context.Context, *QueryERC20WrapperRequest) (*QueryERC20WrapperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ERC20Wrapper not implemented")
}
func (UnimplementedQueryServer) ConnectOracle(context.Context, *QueryConnectOracleRequest) (*QueryConnectOracleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectOracle not implemented")
}
func (UnimplementedQueryServer) ContractAddrByDenom(context.Context, *QueryContractAddrByDenomRequest) (*QueryContractAddrByDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractAddrByDenom not implemented")
}
func (UnimplementedQueryServer) ERC721ClassIdByContractAddr(context.Context, *QueryERC721ClassIdByContractAddrRequest) (*QueryERC721ClassIdByContractAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ERC721ClassIdByContractAddr not implemented")
}
func (UnimplementedQueryServer) ERC721OriginTokenInfos(context.Context, *QueryERC721OriginTokenInfosRequest) (*QueryERC721OriginTokenInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ERC721OriginTokenInfos not implemented")
}
func (UnimplementedQueryServer) Denom(context.Context, *QueryDenomRequest) (*QueryDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Denom not implemented")
}
func (UnimplementedQueryServer) Call(context.Context, *QueryCallRequest) (*QueryCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Code_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Code(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Code_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Code(ctx, req.(*QueryCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_State_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).State(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_State_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).State(ctx, req.(*QueryStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ERC20Factory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryERC20FactoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ERC20Factory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ERC20Factory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ERC20Factory(ctx, req.(*QueryERC20FactoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ERC20Wrapper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryERC20WrapperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ERC20Wrapper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ERC20Wrapper_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ERC20Wrapper(ctx, req.(*QueryERC20WrapperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ConnectOracle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConnectOracleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ConnectOracle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ConnectOracle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ConnectOracle(ctx, req.(*QueryConnectOracleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ContractAddrByDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryContractAddrByDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ContractAddrByDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ContractAddrByDenom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ContractAddrByDenom(ctx, req.(*QueryContractAddrByDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ERC721ClassIdByContractAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryERC721ClassIdByContractAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ERC721ClassIdByContractAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ERC721ClassIdByContractAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ERC721ClassIdByContractAddr(ctx, req.(*QueryERC721ClassIdByContractAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ERC721OriginTokenInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryERC721OriginTokenInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ERC721OriginTokenInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ERC721OriginTokenInfos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ERC721OriginTokenInfos(ctx, req.(*QueryERC721OriginTokenInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Denom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Denom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Denom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Denom(ctx, req.(*QueryDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Call_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Call(ctx, req.(*QueryCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "minievm.evm.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Code",
			Handler:    _Query_Code_Handler,
		},
		{
			MethodName: "State",
			Handler:    _Query_State_Handler,
		},
		{
			MethodName: "ERC20Factory",
			Handler:    _Query_ERC20Factory_Handler,
		},
		{
			MethodName: "ERC20Wrapper",
			Handler:    _Query_ERC20Wrapper_Handler,
		},
		{
			MethodName: "ConnectOracle",
			Handler:    _Query_ConnectOracle_Handler,
		},
		{
			MethodName: "ContractAddrByDenom",
			Handler:    _Query_ContractAddrByDenom_Handler,
		},
		{
			MethodName: "ERC721ClassIdByContractAddr",
			Handler:    _Query_ERC721ClassIdByContractAddr_Handler,
		},
		{
			MethodName: "ERC721OriginTokenInfos",
			Handler:    _Query_ERC721OriginTokenInfos_Handler,
		},
		{
			MethodName: "Denom",
			Handler:    _Query_Denom_Handler,
		},
		{
			MethodName: "Call",
			Handler:    _Query_Call_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "minievm/evm/v1/query.proto",
}
