// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package erc20_wrapper

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// Erc20WrapperMetaData contains all meta data concerning the Erc20Wrapper contract.
var Erc20WrapperMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contractERC20Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"callback_id\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"ibc_ack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"callback_id\",\"type\":\"uint64\"}],\"name\":\"ibc_timeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"localTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"remoteDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"remoteTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"remoteDenom\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"remoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_remoteDecimals\",\"type\":\"uint8\"}],\"name\":\"toLocal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"remoteDenom\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_remoteDecimals\",\"type\":\"uint8\"}],\"name\":\"toLocal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"localDenom\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"}],\"name\":\"toRemote\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"remoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_remoteDecimals\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"localDenom\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"}],\"name\":\"toRemoteAndIBCTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"localDenom\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"}],\"name\":\"toRemoteAndIBCTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"localDenom\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"}],\"name\":\"toRemoteAndIBCTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"localDenom\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"}],\"name\":\"toRemoteAndOPWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"localDenom\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"}],\"name\":\"toRemoteAndOPWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040525f60055f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550348015610037575f80fd5b5060405161498d38038061498d8339818101604052810190610059919061013c565b335f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610167565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61010b826100e2565b9050919050565b61011b81610101565b8114610125575f80fd5b50565b5f8151905061013681610112565b92915050565b5f60208284031215610151576101506100de565b5b5f61015e84828501610128565b91505092915050565b614819806101745f395ff3fe608060405234801561000f575f80fd5b5060043610610114575f3560e01c80635bb47808116100a0578063b9cf37421161006f578063b9cf3742146102d6578063c45a0155146102f2578063cf9ee0c314610310578063f2fde38b14610342578063f787cbdd1461035e57610114565b80635bb4780814610250578063701dcf211461026c5780638da5cb5b146102885780639f65ade5146102a657610114565b80631de5537c116100e75780631de5537c1461019c5780631efb51e6146101cc5780631efd1a84146101fc578063247219171461021857806331a503f01461023457610114565b806301ffc9a7146101185780630423d4d8146101485780630d4f1f9d146101645780631b75002214610180575b5f80fd5b610132600480360381019061012d9190612aa8565b61037a565b60405161013f9190612aed565b60405180910390f35b610162600480360381019061015d9190612cb2565b6103e3565b005b61017e60048036038101906101799190612d78565b610498565b005b61019a60048036038101906101959190612db6565b610519565b005b6101b660048036038101906101b19190612f1d565b610764565b6040516101c39190612f57565b60405180910390f35b6101e660048036038101906101e19190612fa6565b610794565b6040516101f39190612f57565b60405180910390f35b61021660048036038101906102119190612fe4565b6107d1565b005b610232600480360381019061022d9190613064565b610af7565b005b61024e6004803603810190610249919061312f565b610b45565b005b61026a60048036038101906102659190612f1d565b610bbf565b005b6102866004803603810190610281919061315a565b610cdf565b005b610290610de9565b60405161029d9190612f57565b60405180910390f35b6102c060048036038101906102bb9190612f1d565b610e0c565b6040516102cd91906131d5565b60405180910390f35b6102f060048036038101906102eb91906131ee565b610e29565b005b6102fa610e3d565b60405161030791906132d1565b60405180910390f35b61032a600480360381019061032591906132ea565b610e62565b60405161033993929190613365565b60405180910390f35b61035c60048036038101906103579190612f1d565b6111da565b005b6103786004803603810190610373919061339a565b611322565b005b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b5f806103f0308686610e62565b50915091505f8103610403575050610492565b5f61040f87848461133c565b905060f173ffffffffffffffffffffffffffffffffffffffff166356c657a582866040518363ffffffff1660e01b815260040161044d929190613502565b6020604051808303815f875af1158015610469573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061048d9190613544565b505050505b50505050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610506576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fd906135df565b60405180910390fd5b80610515576105148261146b565b5b5050565b5f805f610527308b8b610e62565b9250925092505f820361053c5750505061075b565b600160055f8282829054906101000a900467ffffffffffffffff16610561919061362a565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060405180608001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018260ff1681525060065f60055f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015f6101000a81548160ff021916908360ff1602179055509050505f6106d78985858a8c8b6118ec565b905060f173ffffffffffffffffffffffffffffffffffffffff166356c657a582876040518363ffffffff1660e01b8152600401610715929190613502565b6020604051808303815f875af1158015610731573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107559190613544565b50505050505b50505050505050565b6002602052805f5260405f205f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6004602052815f5260405f20602052805f5260405f205f915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f60f173ffffffffffffffffffffffffffffffffffffffff16632b3324ce856040518263ffffffff1660e01b815260040161080c9190613665565b602060405180830381865afa158015610827573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061084b9190613699565b90505f6108588284611b7e565b90505f8403610868575050610af1565b61087182611fe2565b156108f7578173ffffffffffffffffffffffffffffffffffffffff166379cc679033866040518363ffffffff1660e01b81526004016108b19291906136c4565b6020604051808303815f875af11580156108cd573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108f19190613544565b50610976565b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b8152600401610934939291906136eb565b6020604051808303815f875af1158015610950573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109749190613544565b505b5f8173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109c0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109e49190613734565b90505f6109f286868461208f565b90506109fd83611fe2565b15610a6f578273ffffffffffffffffffffffffffffffffffffffff166340c10f1989836040518363ffffffff1660e01b8152600401610a3d9291906136c4565b5f604051808303815f87803b158015610a54575f80fd5b505af1158015610a66573d5f803e3d5ffd5b50505050610aec565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb89836040518363ffffffff1660e01b8152600401610aaa9291906136c4565b6020604051808303815f875af1158015610ac6573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610aea9190613544565b505b505050505b50505050565b610b3e85858585856040518060400160405280600281526020017f7b7d0000000000000000000000000000000000000000000000000000000000008152506203d090610519565b5050505050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610baa906135df565b60405180910390fd5b610bbc8161146b565b50565b600173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c25906137a9565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9390613811565b60405180910390fd5b8060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b5f60f173ffffffffffffffffffffffffffffffffffffffff16632b3324ce846040518263ffffffff1660e01b8152600401610d1a9190613665565b602060405180830381865afa158015610d35573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d599190613699565b90505f8173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610d959190612f57565b602060405180830381865afa158015610db0573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610dd49190613843565b9050610de2858583866107d1565b5050505050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6003602052805f5260405f205f915054906101000a900460ff1681565b610e388383836203d0906103e3565b505050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f805f8060f173ffffffffffffffffffffffffffffffffffffffff16632b3324ce876040518263ffffffff1660e01b8152600401610ea09190613665565b602060405180830381865afa158015610ebb573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610edf9190613699565b9050610eea81612169565b935060035f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1691505f8503610f4b57835f93509350506111d1565b610f5481611fe2565b15610fda578073ffffffffffffffffffffffffffffffffffffffff166379cc679033876040518363ffffffff1660e01b8152600401610f949291906136c4565b6020604051808303815f875af1158015610fb0573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fd49190613544565b50611059565b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b8152600401611017939291906136eb565b6020604051808303815f875af1158015611033573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110579190613544565b505b5f8173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110a3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110c79190613734565b90506110d486828561208f565b93506110df85611fe2565b15611151578473ffffffffffffffffffffffffffffffffffffffff166340c10f1989866040518363ffffffff1660e01b815260040161111f9291906136c4565b5f604051808303815f87803b158015611136575f80fd5b505af1158015611148573d5f803e3d5ffd5b505050506111ce565b8473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb89866040518363ffffffff1660e01b815260040161118c9291906136c4565b6020604051808303815f875af11580156111a8573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111cc9190613544565b505b50505b93509350939050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611230575f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611267575f80fd5b8073ffffffffffffffffffffffffffffffffffffffff165f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3805f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6113348686868686866203d090610519565b505050505050565b606060f173ffffffffffffffffffffffffffffffffffffffff166381cf0f6a846040518263ffffffff1660e01b81526004016113789190612f57565b5f60405180830381865afa158015611392573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906113ba91906138dc565b6113c3836125bc565b60f173ffffffffffffffffffffffffffffffffffffffff16636af32a55306040518263ffffffff1660e01b81526004016113fd9190612f57565b5f60405180830381865afa158015611417573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f8201168201806040525081019061143f91906138dc565b866040516020016114539493929190613b3f565b60405160208183030381529060405290509392505050565b5f60065f8367ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f206040518060800160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015f9054906101000a900460ff1660ff1660ff168152505090505f60045f836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f836060015160ff1660ff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611658576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164f90613c08565b60405180910390fd5b5f6116d8836040015184606001518473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116af573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116d39190613734565b61208f565b90506116e78360200151611fe2565b1561175b57826020015173ffffffffffffffffffffffffffffffffffffffff166342966c6884604001516040518263ffffffff1660e01b815260040161172d9190613c26565b5f604051808303815f87803b158015611744575f80fd5b505af1158015611756573d5f803e3d5ffd5b505050505b61176482611fe2565b156117d9578173ffffffffffffffffffffffffffffffffffffffff166340c10f19845f0151836040518363ffffffff1660e01b81526004016117a79291906136c4565b5f604051808303815f87803b1580156117be575f80fd5b505af11580156117d0573d5f803e3d5ffd5b50505050611859565b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb845f0151836040518363ffffffff1660e01b81526004016118179291906136c4565b6020604051808303815f875af1158015611833573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906118579190613544565b505b60065f8567ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f205f8082015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282015f9055600382015f6101000a81549060ff0219169055505050505050565b60605f61191760055f9054906101000a900467ffffffffffffffff1667ffffffffffffffff166125bc565b61192030612686565b604051602001611931929190613d43565b60405160208183030381529060405290505f60f373ffffffffffffffffffffffffffffffffffffffff16635cc855e385846040518363ffffffff1660e01b815260040161197f929190613d87565b5f60405180830381865afa158015611999573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906119c191906138dc565b90508860f173ffffffffffffffffffffffffffffffffffffffff166381cf0f6a8a6040518263ffffffff1660e01b81526004016119fe9190612f57565b5f60405180830381865afa158015611a18573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190611a4091906138dc565b611a49896125bc565b60f173ffffffffffffffffffffffffffffffffffffffff16636af32a55306040518263ffffffff1660e01b8152600401611a839190612f57565b5f60405180830381865afa158015611a9d573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190611ac591906138dc565b88611acf8b6125bc565b60f373ffffffffffffffffffffffffffffffffffffffff16638d5c8817886040518263ffffffff1660e01b8152600401611b099190613665565b5f60405180830381865afa158015611b23573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190611b4b91906138dc565b604051602001611b6197969594939291906141f0565b604051602081830303815290604052925050509695505050505050565b5f60045f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8360ff1660ff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611fdc5760015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636d2b9d876040518060400160405280600781526020017f57726170706564000000000000000000000000000000000000000000000000008152508573ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa158015611ce1573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190611d0991906138dc565b604051602001611d1a92919061430f565b6040516020818303038152906040526040518060400160405280600181526020017f57000000000000000000000000000000000000000000000000000000000000008152508673ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa158015611da7573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190611dcf91906138dc565b604051602001611de092919061430f565b60405160208183030381529060405260128787604051602001611e049291906143ab565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b8152600401611e3994939291906143ee565b6020604051808303815f875af1158015611e55573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e799190613699565b90508060045f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8460ff1660ff1681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908360ff1602179055505b92915050565b5f8173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561204b57506040513d601f19601f820116820180604052508101906120489190613699565b60015b612057575f905061208a565b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16149150505b919050565b5f8160ff168360ff16111561211d575f82846120ab919061443f565b60ff16600a6120ba91906145a2565b90505f81866120c99190614619565b14612109576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161210090614693565b60405180910390fd5b808561211591906146b1565b915050612162565b8160ff168360ff16101561215d575f8383612138919061443f565b60ff16600a61214791906145a2565b9050808561215591906146e1565b915050612161565b8390505b5b9392505050565b5f60025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036125b75760015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636d2b9d876040518060400160405280600781526020017f57726170706564000000000000000000000000000000000000000000000000008152508473ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa1580156122b7573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906122df91906138dc565b6040516020016122f092919061430f565b6040516020818303038152906040526040518060400160405280600181526020017f57000000000000000000000000000000000000000000000000000000000000008152508573ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa15801561237d573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906123a591906138dc565b6040516020016123b692919061430f565b6040516020818303038152906040526006338760066040516020016123dd93929190614722565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b815260040161241294939291906143ee565b6020604051808303815f875af115801561242e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906124529190613699565b90508060025f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600660035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908360ff1602179055508160045f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f600660ff1660ff1681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b919050565b60605f60016125ca846126b3565b0190505f8167ffffffffffffffff8111156125e8576125e7612b1e565b5b6040519080825280601f01601f19166020018201604052801561261a5781602001600182028036833780820191505090505b5090505f82602001820190505b60011561267b578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816126705761266f6145ec565b5b0494505f8503612627575b819350505050919050565b60606126ac8273ffffffffffffffffffffffffffffffffffffffff16601460ff16612804565b9050919050565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061270f577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381612705576127046145ec565b5b0492506040810190505b6d04ee2d6d415b85acef8100000000831061274c576d04ee2d6d415b85acef81000000008381612742576127416145ec565b5b0492506020810190505b662386f26fc10000831061277b57662386f26fc100008381612771576127706145ec565b5b0492506010810190505b6305f5e10083106127a4576305f5e100838161279a576127996145ec565b5b0492506008810190505b61271083106127c95761271083816127bf576127be6145ec565b5b0492506004810190505b606483106127ec57606483816127e2576127e16145ec565b5b0492506002810190505b600a83106127fb576001810190505b80915050919050565b60605f8390505f600284600261281a91906146e1565b612824919061475e565b67ffffffffffffffff81111561283d5761283c612b1e565b5b6040519080825280601f01601f19166020018201604052801561286f5781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000815f815181106128a6576128a5614791565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061290957612908614791565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053505f600185600261294791906146e1565b612951919061475e565b90505b60018111156129f0577f3031323334353637383961626364656600000000000000000000000000000000600f84166010811061299357612992614791565b5b1a60f81b8282815181106129aa576129a9614791565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350600483901c9250806129e9906147be565b9050612954565b505f8214612a375784846040517fe22e27eb000000000000000000000000000000000000000000000000000000008152600401612a2e9291906147e5565b60405180910390fd5b809250505092915050565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612a8781612a53565b8114612a91575f80fd5b50565b5f81359050612aa281612a7e565b92915050565b5f60208284031215612abd57612abc612a4b565b5b5f612aca84828501612a94565b91505092915050565b5f8115159050919050565b612ae781612ad3565b82525050565b5f602082019050612b005f830184612ade565b92915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b612b5482612b0e565b810181811067ffffffffffffffff82111715612b7357612b72612b1e565b5b80604052505050565b5f612b85612a42565b9050612b918282612b4b565b919050565b5f67ffffffffffffffff821115612bb057612baf612b1e565b5b612bb982612b0e565b9050602081019050919050565b828183375f83830152505050565b5f612be6612be184612b96565b612b7c565b905082815260208101848484011115612c0257612c01612b0a565b5b612c0d848285612bc6565b509392505050565b5f82601f830112612c2957612c28612b06565b5b8135612c39848260208601612bd4565b91505092915050565b5f819050919050565b612c5481612c42565b8114612c5e575f80fd5b50565b5f81359050612c6f81612c4b565b92915050565b5f67ffffffffffffffff82169050919050565b612c9181612c75565b8114612c9b575f80fd5b50565b5f81359050612cac81612c88565b92915050565b5f805f8060808587031215612cca57612cc9612a4b565b5b5f85013567ffffffffffffffff811115612ce757612ce6612a4f565b5b612cf387828801612c15565b945050602085013567ffffffffffffffff811115612d1457612d13612a4f565b5b612d2087828801612c15565b9350506040612d3187828801612c61565b9250506060612d4287828801612c9e565b91505092959194509250565b612d5781612ad3565b8114612d61575f80fd5b50565b5f81359050612d7281612d4e565b92915050565b5f8060408385031215612d8e57612d8d612a4b565b5b5f612d9b85828601612c9e565b9250506020612dac85828601612d64565b9150509250929050565b5f805f805f805f60e0888a031215612dd157612dd0612a4b565b5b5f88013567ffffffffffffffff811115612dee57612ded612a4f565b5b612dfa8a828b01612c15565b9750506020612e0b8a828b01612c61565b965050604088013567ffffffffffffffff811115612e2c57612e2b612a4f565b5b612e388a828b01612c15565b955050606088013567ffffffffffffffff811115612e5957612e58612a4f565b5b612e658a828b01612c15565b9450506080612e768a828b01612c61565b93505060a088013567ffffffffffffffff811115612e9757612e96612a4f565b5b612ea38a828b01612c15565b92505060c0612eb48a828b01612c9e565b91505092959891949750929550565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f612eec82612ec3565b9050919050565b612efc81612ee2565b8114612f06575f80fd5b50565b5f81359050612f1781612ef3565b92915050565b5f60208284031215612f3257612f31612a4b565b5b5f612f3f84828501612f09565b91505092915050565b612f5181612ee2565b82525050565b5f602082019050612f6a5f830184612f48565b92915050565b5f60ff82169050919050565b612f8581612f70565b8114612f8f575f80fd5b50565b5f81359050612fa081612f7c565b92915050565b5f8060408385031215612fbc57612fbb612a4b565b5b5f612fc985828601612f09565b9250506020612fda85828601612f92565b9150509250929050565b5f805f8060808587031215612ffc57612ffb612a4b565b5b5f61300987828801612f09565b945050602085013567ffffffffffffffff81111561302a57613029612a4f565b5b61303687828801612c15565b935050604061304787828801612c61565b925050606061305887828801612f92565b91505092959194509250565b5f805f805f60a0868803121561307d5761307c612a4b565b5b5f86013567ffffffffffffffff81111561309a57613099612a4f565b5b6130a688828901612c15565b95505060206130b788828901612c61565b945050604086013567ffffffffffffffff8111156130d8576130d7612a4f565b5b6130e488828901612c15565b935050606086013567ffffffffffffffff81111561310557613104612a4f565b5b61311188828901612c15565b925050608061312288828901612c61565b9150509295509295909350565b5f6020828403121561314457613143612a4b565b5b5f61315184828501612c9e565b91505092915050565b5f805f6060848603121561317157613170612a4b565b5b5f61317e86828701612f09565b935050602084013567ffffffffffffffff81111561319f5761319e612a4f565b5b6131ab86828701612c15565b92505060406131bc86828701612f92565b9150509250925092565b6131cf81612f70565b82525050565b5f6020820190506131e85f8301846131c6565b92915050565b5f805f6060848603121561320557613204612a4b565b5b5f84013567ffffffffffffffff81111561322257613221612a4f565b5b61322e86828701612c15565b935050602084013567ffffffffffffffff81111561324f5761324e612a4f565b5b61325b86828701612c15565b925050604061326c86828701612c61565b9150509250925092565b5f819050919050565b5f61329961329461328f84612ec3565b613276565b612ec3565b9050919050565b5f6132aa8261327f565b9050919050565b5f6132bb826132a0565b9050919050565b6132cb816132b1565b82525050565b5f6020820190506132e45f8301846132c2565b92915050565b5f805f6060848603121561330157613300612a4b565b5b5f61330e86828701612f09565b935050602084013567ffffffffffffffff81111561332f5761332e612a4f565b5b61333b86828701612c15565b925050604061334c86828701612c61565b9150509250925092565b61335f81612c42565b82525050565b5f6060820190506133785f830186612f48565b6133856020830185613356565b61339260408301846131c6565b949350505050565b5f805f805f8060c087890312156133b4576133b3612a4b565b5b5f87013567ffffffffffffffff8111156133d1576133d0612a4f565b5b6133dd89828a01612c15565b96505060206133ee89828a01612c61565b955050604087013567ffffffffffffffff81111561340f5761340e612a4f565b5b61341b89828a01612c15565b945050606087013567ffffffffffffffff81111561343c5761343b612a4f565b5b61344889828a01612c15565b935050608061345989828a01612c61565b92505060a087013567ffffffffffffffff81111561347a57613479612a4f565b5b61348689828a01612c15565b9150509295509295509295565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f6134c582613493565b6134cf818561349d565b93506134df8185602086016134ad565b6134e881612b0e565b840191505092915050565b6134fc81612c75565b82525050565b5f6040820190508181035f83015261351a81856134bb565b905061352960208301846134f3565b9392505050565b5f8151905061353e81612d4e565b92915050565b5f6020828403121561355957613558612a4b565b5b5f61356684828501613530565b91505092915050565b7f6f6e6c792074686520636f6e747261637420697473656c662063616e2063616c5f8201527f6c20746869732066756e6374696f6e0000000000000000000000000000000000602082015250565b5f6135c9602f8361349d565b91506135d48261356f565b604082019050919050565b5f6020820190508181035f8301526135f6816135bd565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61363482612c75565b915061363f83612c75565b9250828201905067ffffffffffffffff81111561365f5761365e6135fd565b5b92915050565b5f6020820190508181035f83015261367d81846134bb565b905092915050565b5f8151905061369381612ef3565b92915050565b5f602082840312156136ae576136ad612a4b565b5b5f6136bb84828501613685565b91505092915050565b5f6040820190506136d75f830185612f48565b6136e46020830184613356565b9392505050565b5f6060820190506136fe5f830186612f48565b61370b6020830185612f48565b6137186040830184613356565b949350505050565b5f8151905061372e81612f7c565b92915050565b5f6020828403121561374957613748612a4b565b5b5f61375684828501613720565b91505092915050565b7f45524332303a2063616c6c6572206973206e6f742074686520636861696e00005f82015250565b5f613793601e8361349d565b915061379e8261375f565b602082019050919050565b5f6020820190508181035f8301526137c081613787565b9050919050565b7f696e76616c696420666163746f727920616464726573730000000000000000005f82015250565b5f6137fb60178361349d565b9150613806826137c7565b602082019050919050565b5f6020820190508181035f830152613828816137ef565b9050919050565b5f8151905061383d81612c4b565b92915050565b5f6020828403121561385857613857612a4b565b5b5f6138658482850161382f565b91505092915050565b5f61388061387b84612b96565b612b7c565b90508281526020810184848401111561389c5761389b612b0a565b5b6138a78482856134ad565b509392505050565b5f82601f8301126138c3576138c2612b06565b5b81516138d384826020860161386e565b91505092915050565b5f602082840312156138f1576138f0612a4b565b5b5f82015167ffffffffffffffff81111561390e5761390d612a4f565b5b61391a848285016138af565b91505092915050565b5f81905092915050565b7f7b224074797065223a20222f6f70696e69742e6f706368696c642e76312e4d735f8201527f67496e697469617465546f6b656e5769746864726177616c2200000000000000602082015250565b5f613987603983613923565b91506139928261392d565b603982019050919050565b7f2c22616d6f756e74223a207b202264656e6f6d223a20220000000000000000005f82015250565b5f6139d1601783613923565b91506139dc8261399d565b601782019050919050565b5f6139f182613493565b6139fb8185613923565b9350613a0b8185602086016134ad565b80840191505092915050565b7f222c22616d6f756e74223a2022000000000000000000000000000000000000005f82015250565b5f613a4b600d83613923565b9150613a5682613a17565b600d82019050919050565b7f227d2c2273656e646572223a20220000000000000000000000000000000000005f82015250565b5f613a95600e83613923565b9150613aa082613a61565b600e82019050919050565b7f222c22746f223a202200000000000000000000000000000000000000000000005f82015250565b5f613adf600983613923565b9150613aea82613aab565b600982019050919050565b7f227d0000000000000000000000000000000000000000000000000000000000005f82015250565b5f613b29600283613923565b9150613b3482613af5565b600282019050919050565b5f613b498261397b565b9150613b54826139c5565b9150613b6082876139e7565b9150613b6b82613a3f565b9150613b7782866139e7565b9150613b8282613a89565b9150613b8e82856139e7565b9150613b9982613ad3565b9150613ba582846139e7565b9150613bb082613b1d565b915081905095945050505050565b7f6c6f63616c20746f6b656e20646f65736e2774206578697374000000000000005f82015250565b5f613bf260198361349d565b9150613bfd82613bbe565b602082019050919050565b5f6020820190508181035f830152613c1f81613be6565b9050919050565b5f602082019050613c395f830184613356565b92915050565b7f7b2265766d223a207b226173796e635f63616c6c6261636b223a207b226964225f8201527f3a20000000000000000000000000000000000000000000000000000000000000602082015250565b5f613c99602283613923565b9150613ca482613c3f565b602282019050919050565b7f2c22636f6e74726163745f61646472657373223a2200000000000000000000005f82015250565b5f613ce3601583613923565b9150613cee82613caf565b601582019050919050565b7f227d7d7d000000000000000000000000000000000000000000000000000000005f82015250565b5f613d2d600483613923565b9150613d3882613cf9565b600482019050919050565b5f613d4d82613c8d565b9150613d5982856139e7565b9150613d6482613cd7565b9150613d7082846139e7565b9150613d7b82613d21565b91508190509392505050565b5f6040820190508181035f830152613d9f81856134bb565b90508181036020830152613db381846134bb565b90509392505050565b7f7b224074797065223a20222f6962632e6170706c69636174696f6e732e7472615f8201527f6e736665722e76312e4d73675472616e73666572222c00000000000000000000602082015250565b5f613e16603683613923565b9150613e2182613dbc565b603682019050919050565b7f22736f757263655f706f7274223a20227472616e73666572222c0000000000005f82015250565b5f613e60601a83613923565b9150613e6b82613e2c565b601a82019050919050565b7f22736f757263655f6368616e6e656c223a2022000000000000000000000000005f82015250565b5f613eaa601383613923565b9150613eb582613e76565b601382019050919050565b7f222c0000000000000000000000000000000000000000000000000000000000005f82015250565b5f613ef4600283613923565b9150613eff82613ec0565b600282019050919050565b7f22746f6b656e223a207b202264656e6f6d223a202200000000000000000000005f82015250565b5f613f3e601583613923565b9150613f4982613f0a565b601582019050919050565b7f22616d6f756e74223a20220000000000000000000000000000000000000000005f82015250565b5f613f88600b83613923565b9150613f9382613f54565b600b82019050919050565b7f227d2c00000000000000000000000000000000000000000000000000000000005f82015250565b5f613fd2600383613923565b9150613fdd82613f9e565b600382019050919050565b7f2273656e646572223a20220000000000000000000000000000000000000000005f82015250565b5f61401c600b83613923565b915061402782613fe8565b600b82019050919050565b7f227265636569766572223a2022000000000000000000000000000000000000005f82015250565b5f614066600d83613923565b915061407182614032565b600d82019050919050565b7f2274696d656f75745f686569676874223a207b227265766973696f6e5f6e756d5f8201527f626572223a202230222c227265766973696f6e5f686569676874223a2022302260208201527f7d2c000000000000000000000000000000000000000000000000000000000000604082015250565b5f6140fc604283613923565b91506141078261407c565b604282019050919050565b7f2274696d656f75745f74696d657374616d70223a2022000000000000000000005f82015250565b5f614146601683613923565b915061415182614112565b601682019050919050565b7f226d656d6f223a200000000000000000000000000000000000000000000000005f82015250565b5f614190600883613923565b915061419b8261415c565b600882019050919050565b7f7d000000000000000000000000000000000000000000000000000000000000005f82015250565b5f6141da600183613923565b91506141e5826141a6565b600182019050919050565b5f6141fa82613e0a565b915061420582613e54565b915061421082613e9e565b915061421c828a6139e7565b915061422782613ee8565b915061423282613f32565b915061423e82896139e7565b915061424982613ee8565b915061425482613f7c565b915061426082886139e7565b915061426b82613fc6565b915061427682614010565b915061428282876139e7565b915061428d82613ee8565b91506142988261405a565b91506142a482866139e7565b91506142af82613ee8565b91506142ba826140f0565b91506142c58261413a565b91506142d182856139e7565b91506142dc82613ee8565b91506142e782614184565b91506142f382846139e7565b91506142fe826141ce565b915081905098975050505050505050565b5f61431a82856139e7565b915061432682846139e7565b91508190509392505050565b5f8160601b9050919050565b5f61434882614332565b9050919050565b5f6143598261433e565b9050919050565b61437161436c82612ee2565b61434f565b82525050565b5f8160f81b9050919050565b5f61438d82614377565b9050919050565b6143a56143a082612f70565b614383565b82525050565b5f6143b68285614360565b6014820191506143c68284614394565b6001820191508190509392505050565b5f819050919050565b6143e8816143d6565b82525050565b5f6080820190508181035f83015261440681876134bb565b9050818103602083015261441a81866134bb565b905061442960408301856131c6565b61443660608301846143df565b95945050505050565b5f61444982612f70565b915061445483612f70565b9250828203905060ff81111561446d5761446c6135fd565b5b92915050565b5f8160011c9050919050565b5f808291508390505b60018511156144c8578086048111156144a4576144a36135fd565b5b60018516156144b35780820291505b80810290506144c185614473565b9450614488565b94509492505050565b5f826144e0576001905061459b565b816144ed575f905061459b565b8160018114614503576002811461450d5761453c565b600191505061459b565b60ff84111561451f5761451e6135fd565b5b8360020a915084821115614536576145356135fd565b5b5061459b565b5060208310610133831016604e8410600b84101617156145715782820a90508381111561456c5761456b6135fd565b5b61459b565b61457e848484600161447f565b92509050818404811115614595576145946135fd565b5b81810290505b9392505050565b5f6145ac82612c42565b91506145b783612c42565b92506145e47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846144d1565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f61462382612c42565b915061462e83612c42565b92508261463e5761463d6145ec565b5b828206905092915050565b7f6475737420616d6f756e742073686f756c64206265207a65726f0000000000005f82015250565b5f61467d601a8361349d565b915061468882614649565b602082019050919050565b5f6020820190508181035f8301526146aa81614671565b9050919050565b5f6146bb82612c42565b91506146c683612c42565b9250826146d6576146d56145ec565b5b828204905092915050565b5f6146eb82612c42565b91506146f683612c42565b925082820261470481612c42565b9150828204841483151761471b5761471a6135fd565b5b5092915050565b5f61472d8286614360565b60148201915061473d8285614360565b60148201915061474d8284614394565b600182019150819050949350505050565b5f61476882612c42565b915061477383612c42565b925082820190508082111561478b5761478a6135fd565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f6147c882612c42565b91505f82036147da576147d96135fd565b5b600182039050919050565b5f6040820190506147f85f830185613356565b6148056020830184613356565b939250505056fea164736f6c6343000819000a",
}

// Erc20WrapperABI is the input ABI used to generate the binding from.
// Deprecated: Use Erc20WrapperMetaData.ABI instead.
var Erc20WrapperABI = Erc20WrapperMetaData.ABI

// Erc20WrapperBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use Erc20WrapperMetaData.Bin instead.
var Erc20WrapperBin = Erc20WrapperMetaData.Bin

// DeployErc20Wrapper deploys a new Ethereum contract, binding an instance of Erc20Wrapper to it.
func DeployErc20Wrapper(auth *bind.TransactOpts, backend bind.ContractBackend, erc20Factory common.Address) (common.Address, *types.Transaction, *Erc20Wrapper, error) {
	parsed, err := Erc20WrapperMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(Erc20WrapperBin), backend, erc20Factory)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Erc20Wrapper{Erc20WrapperCaller: Erc20WrapperCaller{contract: contract}, Erc20WrapperTransactor: Erc20WrapperTransactor{contract: contract}, Erc20WrapperFilterer: Erc20WrapperFilterer{contract: contract}}, nil
}

// Erc20Wrapper is an auto generated Go binding around an Ethereum contract.
type Erc20Wrapper struct {
	Erc20WrapperCaller     // Read-only binding to the contract
	Erc20WrapperTransactor // Write-only binding to the contract
	Erc20WrapperFilterer   // Log filterer for contract events
}

// Erc20WrapperCaller is an auto generated read-only Go binding around an Ethereum contract.
type Erc20WrapperCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Erc20WrapperTransactor is an auto generated write-only Go binding around an Ethereum contract.
type Erc20WrapperTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Erc20WrapperFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type Erc20WrapperFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Erc20WrapperSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type Erc20WrapperSession struct {
	Contract     *Erc20Wrapper     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// Erc20WrapperCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type Erc20WrapperCallerSession struct {
	Contract *Erc20WrapperCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// Erc20WrapperTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type Erc20WrapperTransactorSession struct {
	Contract     *Erc20WrapperTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// Erc20WrapperRaw is an auto generated low-level Go binding around an Ethereum contract.
type Erc20WrapperRaw struct {
	Contract *Erc20Wrapper // Generic contract binding to access the raw methods on
}

// Erc20WrapperCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type Erc20WrapperCallerRaw struct {
	Contract *Erc20WrapperCaller // Generic read-only contract binding to access the raw methods on
}

// Erc20WrapperTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type Erc20WrapperTransactorRaw struct {
	Contract *Erc20WrapperTransactor // Generic write-only contract binding to access the raw methods on
}

// NewErc20Wrapper creates a new instance of Erc20Wrapper, bound to a specific deployed contract.
func NewErc20Wrapper(address common.Address, backend bind.ContractBackend) (*Erc20Wrapper, error) {
	contract, err := bindErc20Wrapper(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Erc20Wrapper{Erc20WrapperCaller: Erc20WrapperCaller{contract: contract}, Erc20WrapperTransactor: Erc20WrapperTransactor{contract: contract}, Erc20WrapperFilterer: Erc20WrapperFilterer{contract: contract}}, nil
}

// NewErc20WrapperCaller creates a new read-only instance of Erc20Wrapper, bound to a specific deployed contract.
func NewErc20WrapperCaller(address common.Address, caller bind.ContractCaller) (*Erc20WrapperCaller, error) {
	contract, err := bindErc20Wrapper(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperCaller{contract: contract}, nil
}

// NewErc20WrapperTransactor creates a new write-only instance of Erc20Wrapper, bound to a specific deployed contract.
func NewErc20WrapperTransactor(address common.Address, transactor bind.ContractTransactor) (*Erc20WrapperTransactor, error) {
	contract, err := bindErc20Wrapper(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperTransactor{contract: contract}, nil
}

// NewErc20WrapperFilterer creates a new log filterer instance of Erc20Wrapper, bound to a specific deployed contract.
func NewErc20WrapperFilterer(address common.Address, filterer bind.ContractFilterer) (*Erc20WrapperFilterer, error) {
	contract, err := bindErc20Wrapper(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperFilterer{contract: contract}, nil
}

// bindErc20Wrapper binds a generic wrapper to an already deployed contract.
func bindErc20Wrapper(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := Erc20WrapperMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Erc20Wrapper *Erc20WrapperRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Erc20Wrapper.Contract.Erc20WrapperCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Erc20Wrapper *Erc20WrapperRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.Erc20WrapperTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Erc20Wrapper *Erc20WrapperRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.Erc20WrapperTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Erc20Wrapper *Erc20WrapperCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Erc20Wrapper.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Erc20Wrapper *Erc20WrapperTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Erc20Wrapper *Erc20WrapperTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.contract.Transact(opts, method, params...)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) Factory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "factory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) Factory() (common.Address, error) {
	return _Erc20Wrapper.Contract.Factory(&_Erc20Wrapper.CallOpts)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) Factory() (common.Address, error) {
	return _Erc20Wrapper.Contract.Factory(&_Erc20Wrapper.CallOpts)
}

// LocalTokens is a free data retrieval call binding the contract method 0x1efb51e6.
//
// Solidity: function localTokens(address , uint8 ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) LocalTokens(opts *bind.CallOpts, arg0 common.Address, arg1 uint8) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "localTokens", arg0, arg1)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LocalTokens is a free data retrieval call binding the contract method 0x1efb51e6.
//
// Solidity: function localTokens(address , uint8 ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) LocalTokens(arg0 common.Address, arg1 uint8) (common.Address, error) {
	return _Erc20Wrapper.Contract.LocalTokens(&_Erc20Wrapper.CallOpts, arg0, arg1)
}

// LocalTokens is a free data retrieval call binding the contract method 0x1efb51e6.
//
// Solidity: function localTokens(address , uint8 ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) LocalTokens(arg0 common.Address, arg1 uint8) (common.Address, error) {
	return _Erc20Wrapper.Contract.LocalTokens(&_Erc20Wrapper.CallOpts, arg0, arg1)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) Owner() (common.Address, error) {
	return _Erc20Wrapper.Contract.Owner(&_Erc20Wrapper.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) Owner() (common.Address, error) {
	return _Erc20Wrapper.Contract.Owner(&_Erc20Wrapper.CallOpts)
}

// RemoteDecimals is a free data retrieval call binding the contract method 0x9f65ade5.
//
// Solidity: function remoteDecimals(address ) view returns(uint8)
func (_Erc20Wrapper *Erc20WrapperCaller) RemoteDecimals(opts *bind.CallOpts, arg0 common.Address) (uint8, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "remoteDecimals", arg0)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// RemoteDecimals is a free data retrieval call binding the contract method 0x9f65ade5.
//
// Solidity: function remoteDecimals(address ) view returns(uint8)
func (_Erc20Wrapper *Erc20WrapperSession) RemoteDecimals(arg0 common.Address) (uint8, error) {
	return _Erc20Wrapper.Contract.RemoteDecimals(&_Erc20Wrapper.CallOpts, arg0)
}

// RemoteDecimals is a free data retrieval call binding the contract method 0x9f65ade5.
//
// Solidity: function remoteDecimals(address ) view returns(uint8)
func (_Erc20Wrapper *Erc20WrapperCallerSession) RemoteDecimals(arg0 common.Address) (uint8, error) {
	return _Erc20Wrapper.Contract.RemoteDecimals(&_Erc20Wrapper.CallOpts, arg0)
}

// RemoteTokens is a free data retrieval call binding the contract method 0x1de5537c.
//
// Solidity: function remoteTokens(address ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) RemoteTokens(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "remoteTokens", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RemoteTokens is a free data retrieval call binding the contract method 0x1de5537c.
//
// Solidity: function remoteTokens(address ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) RemoteTokens(arg0 common.Address) (common.Address, error) {
	return _Erc20Wrapper.Contract.RemoteTokens(&_Erc20Wrapper.CallOpts, arg0)
}

// RemoteTokens is a free data retrieval call binding the contract method 0x1de5537c.
//
// Solidity: function remoteTokens(address ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) RemoteTokens(arg0 common.Address) (common.Address, error) {
	return _Erc20Wrapper.Contract.RemoteTokens(&_Erc20Wrapper.CallOpts, arg0)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Erc20Wrapper *Erc20WrapperCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Erc20Wrapper *Erc20WrapperSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Erc20Wrapper.Contract.SupportsInterface(&_Erc20Wrapper.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Erc20Wrapper *Erc20WrapperCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Erc20Wrapper.Contract.SupportsInterface(&_Erc20Wrapper.CallOpts, interfaceId)
}

// IbcAck is a paid mutator transaction binding the contract method 0x0d4f1f9d.
//
// Solidity: function ibc_ack(uint64 callback_id, bool success) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) IbcAck(opts *bind.TransactOpts, callback_id uint64, success bool) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "ibc_ack", callback_id, success)
}

// IbcAck is a paid mutator transaction binding the contract method 0x0d4f1f9d.
//
// Solidity: function ibc_ack(uint64 callback_id, bool success) returns()
func (_Erc20Wrapper *Erc20WrapperSession) IbcAck(callback_id uint64, success bool) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.IbcAck(&_Erc20Wrapper.TransactOpts, callback_id, success)
}

// IbcAck is a paid mutator transaction binding the contract method 0x0d4f1f9d.
//
// Solidity: function ibc_ack(uint64 callback_id, bool success) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) IbcAck(callback_id uint64, success bool) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.IbcAck(&_Erc20Wrapper.TransactOpts, callback_id, success)
}

// IbcTimeout is a paid mutator transaction binding the contract method 0x31a503f0.
//
// Solidity: function ibc_timeout(uint64 callback_id) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) IbcTimeout(opts *bind.TransactOpts, callback_id uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "ibc_timeout", callback_id)
}

// IbcTimeout is a paid mutator transaction binding the contract method 0x31a503f0.
//
// Solidity: function ibc_timeout(uint64 callback_id) returns()
func (_Erc20Wrapper *Erc20WrapperSession) IbcTimeout(callback_id uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.IbcTimeout(&_Erc20Wrapper.TransactOpts, callback_id)
}

// IbcTimeout is a paid mutator transaction binding the contract method 0x31a503f0.
//
// Solidity: function ibc_timeout(uint64 callback_id) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) IbcTimeout(callback_id uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.IbcTimeout(&_Erc20Wrapper.TransactOpts, callback_id)
}

// SetFactory is a paid mutator transaction binding the contract method 0x5bb47808.
//
// Solidity: function setFactory(address newFactory) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) SetFactory(opts *bind.TransactOpts, newFactory common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "setFactory", newFactory)
}

// SetFactory is a paid mutator transaction binding the contract method 0x5bb47808.
//
// Solidity: function setFactory(address newFactory) returns()
func (_Erc20Wrapper *Erc20WrapperSession) SetFactory(newFactory common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.SetFactory(&_Erc20Wrapper.TransactOpts, newFactory)
}

// SetFactory is a paid mutator transaction binding the contract method 0x5bb47808.
//
// Solidity: function setFactory(address newFactory) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) SetFactory(newFactory common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.SetFactory(&_Erc20Wrapper.TransactOpts, newFactory)
}

// ToLocal is a paid mutator transaction binding the contract method 0x1efd1a84.
//
// Solidity: function toLocal(address receiver, string remoteDenom, uint256 remoteAmount, uint8 _remoteDecimals) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) ToLocal(opts *bind.TransactOpts, receiver common.Address, remoteDenom string, remoteAmount *big.Int, _remoteDecimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "toLocal", receiver, remoteDenom, remoteAmount, _remoteDecimals)
}

// ToLocal is a paid mutator transaction binding the contract method 0x1efd1a84.
//
// Solidity: function toLocal(address receiver, string remoteDenom, uint256 remoteAmount, uint8 _remoteDecimals) returns()
func (_Erc20Wrapper *Erc20WrapperSession) ToLocal(receiver common.Address, remoteDenom string, remoteAmount *big.Int, _remoteDecimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToLocal(&_Erc20Wrapper.TransactOpts, receiver, remoteDenom, remoteAmount, _remoteDecimals)
}

// ToLocal is a paid mutator transaction binding the contract method 0x1efd1a84.
//
// Solidity: function toLocal(address receiver, string remoteDenom, uint256 remoteAmount, uint8 _remoteDecimals) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) ToLocal(receiver common.Address, remoteDenom string, remoteAmount *big.Int, _remoteDecimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToLocal(&_Erc20Wrapper.TransactOpts, receiver, remoteDenom, remoteAmount, _remoteDecimals)
}

// ToLocal0 is a paid mutator transaction binding the contract method 0x701dcf21.
//
// Solidity: function toLocal(address receiver, string remoteDenom, uint8 _remoteDecimals) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) ToLocal0(opts *bind.TransactOpts, receiver common.Address, remoteDenom string, _remoteDecimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "toLocal0", receiver, remoteDenom, _remoteDecimals)
}

// ToLocal0 is a paid mutator transaction binding the contract method 0x701dcf21.
//
// Solidity: function toLocal(address receiver, string remoteDenom, uint8 _remoteDecimals) returns()
func (_Erc20Wrapper *Erc20WrapperSession) ToLocal0(receiver common.Address, remoteDenom string, _remoteDecimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToLocal0(&_Erc20Wrapper.TransactOpts, receiver, remoteDenom, _remoteDecimals)
}

// ToLocal0 is a paid mutator transaction binding the contract method 0x701dcf21.
//
// Solidity: function toLocal(address receiver, string remoteDenom, uint8 _remoteDecimals) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) ToLocal0(receiver common.Address, remoteDenom string, _remoteDecimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToLocal0(&_Erc20Wrapper.TransactOpts, receiver, remoteDenom, _remoteDecimals)
}

// ToRemote is a paid mutator transaction binding the contract method 0xcf9ee0c3.
//
// Solidity: function toRemote(address receiver, string localDenom, uint256 localAmount) returns(address remoteToken, uint256 remoteAmount, uint8 _remoteDecimals)
func (_Erc20Wrapper *Erc20WrapperTransactor) ToRemote(opts *bind.TransactOpts, receiver common.Address, localDenom string, localAmount *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "toRemote", receiver, localDenom, localAmount)
}

// ToRemote is a paid mutator transaction binding the contract method 0xcf9ee0c3.
//
// Solidity: function toRemote(address receiver, string localDenom, uint256 localAmount) returns(address remoteToken, uint256 remoteAmount, uint8 _remoteDecimals)
func (_Erc20Wrapper *Erc20WrapperSession) ToRemote(receiver common.Address, localDenom string, localAmount *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemote(&_Erc20Wrapper.TransactOpts, receiver, localDenom, localAmount)
}

// ToRemote is a paid mutator transaction binding the contract method 0xcf9ee0c3.
//
// Solidity: function toRemote(address receiver, string localDenom, uint256 localAmount) returns(address remoteToken, uint256 remoteAmount, uint8 _remoteDecimals)
func (_Erc20Wrapper *Erc20WrapperTransactorSession) ToRemote(receiver common.Address, localDenom string, localAmount *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemote(&_Erc20Wrapper.TransactOpts, receiver, localDenom, localAmount)
}

// ToRemoteAndIBCTransfer is a paid mutator transaction binding the contract method 0x1b750022.
//
// Solidity: function toRemoteAndIBCTransfer(string localDenom, uint256 localAmount, string channel, string receiver, uint256 timeout, string memo, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) ToRemoteAndIBCTransfer(opts *bind.TransactOpts, localDenom string, localAmount *big.Int, channel string, receiver string, timeout *big.Int, memo string, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "toRemoteAndIBCTransfer", localDenom, localAmount, channel, receiver, timeout, memo, gasLimit)
}

// ToRemoteAndIBCTransfer is a paid mutator transaction binding the contract method 0x1b750022.
//
// Solidity: function toRemoteAndIBCTransfer(string localDenom, uint256 localAmount, string channel, string receiver, uint256 timeout, string memo, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperSession) ToRemoteAndIBCTransfer(localDenom string, localAmount *big.Int, channel string, receiver string, timeout *big.Int, memo string, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndIBCTransfer(&_Erc20Wrapper.TransactOpts, localDenom, localAmount, channel, receiver, timeout, memo, gasLimit)
}

// ToRemoteAndIBCTransfer is a paid mutator transaction binding the contract method 0x1b750022.
//
// Solidity: function toRemoteAndIBCTransfer(string localDenom, uint256 localAmount, string channel, string receiver, uint256 timeout, string memo, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) ToRemoteAndIBCTransfer(localDenom string, localAmount *big.Int, channel string, receiver string, timeout *big.Int, memo string, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndIBCTransfer(&_Erc20Wrapper.TransactOpts, localDenom, localAmount, channel, receiver, timeout, memo, gasLimit)
}

// ToRemoteAndIBCTransfer0 is a paid mutator transaction binding the contract method 0x24721917.
//
// Solidity: function toRemoteAndIBCTransfer(string localDenom, uint256 localAmount, string channel, string receiver, uint256 timeout) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) ToRemoteAndIBCTransfer0(opts *bind.TransactOpts, localDenom string, localAmount *big.Int, channel string, receiver string, timeout *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "toRemoteAndIBCTransfer0", localDenom, localAmount, channel, receiver, timeout)
}

// ToRemoteAndIBCTransfer0 is a paid mutator transaction binding the contract method 0x24721917.
//
// Solidity: function toRemoteAndIBCTransfer(string localDenom, uint256 localAmount, string channel, string receiver, uint256 timeout) returns()
func (_Erc20Wrapper *Erc20WrapperSession) ToRemoteAndIBCTransfer0(localDenom string, localAmount *big.Int, channel string, receiver string, timeout *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndIBCTransfer0(&_Erc20Wrapper.TransactOpts, localDenom, localAmount, channel, receiver, timeout)
}

// ToRemoteAndIBCTransfer0 is a paid mutator transaction binding the contract method 0x24721917.
//
// Solidity: function toRemoteAndIBCTransfer(string localDenom, uint256 localAmount, string channel, string receiver, uint256 timeout) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) ToRemoteAndIBCTransfer0(localDenom string, localAmount *big.Int, channel string, receiver string, timeout *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndIBCTransfer0(&_Erc20Wrapper.TransactOpts, localDenom, localAmount, channel, receiver, timeout)
}

// ToRemoteAndIBCTransfer1 is a paid mutator transaction binding the contract method 0xf787cbdd.
//
// Solidity: function toRemoteAndIBCTransfer(string localDenom, uint256 localAmount, string channel, string receiver, uint256 timeout, string memo) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) ToRemoteAndIBCTransfer1(opts *bind.TransactOpts, localDenom string, localAmount *big.Int, channel string, receiver string, timeout *big.Int, memo string) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "toRemoteAndIBCTransfer1", localDenom, localAmount, channel, receiver, timeout, memo)
}

// ToRemoteAndIBCTransfer1 is a paid mutator transaction binding the contract method 0xf787cbdd.
//
// Solidity: function toRemoteAndIBCTransfer(string localDenom, uint256 localAmount, string channel, string receiver, uint256 timeout, string memo) returns()
func (_Erc20Wrapper *Erc20WrapperSession) ToRemoteAndIBCTransfer1(localDenom string, localAmount *big.Int, channel string, receiver string, timeout *big.Int, memo string) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndIBCTransfer1(&_Erc20Wrapper.TransactOpts, localDenom, localAmount, channel, receiver, timeout, memo)
}

// ToRemoteAndIBCTransfer1 is a paid mutator transaction binding the contract method 0xf787cbdd.
//
// Solidity: function toRemoteAndIBCTransfer(string localDenom, uint256 localAmount, string channel, string receiver, uint256 timeout, string memo) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) ToRemoteAndIBCTransfer1(localDenom string, localAmount *big.Int, channel string, receiver string, timeout *big.Int, memo string) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndIBCTransfer1(&_Erc20Wrapper.TransactOpts, localDenom, localAmount, channel, receiver, timeout, memo)
}

// ToRemoteAndOPWithdraw is a paid mutator transaction binding the contract method 0x0423d4d8.
//
// Solidity: function toRemoteAndOPWithdraw(string receiver, string localDenom, uint256 localAmount, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) ToRemoteAndOPWithdraw(opts *bind.TransactOpts, receiver string, localDenom string, localAmount *big.Int, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "toRemoteAndOPWithdraw", receiver, localDenom, localAmount, gasLimit)
}

// ToRemoteAndOPWithdraw is a paid mutator transaction binding the contract method 0x0423d4d8.
//
// Solidity: function toRemoteAndOPWithdraw(string receiver, string localDenom, uint256 localAmount, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperSession) ToRemoteAndOPWithdraw(receiver string, localDenom string, localAmount *big.Int, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndOPWithdraw(&_Erc20Wrapper.TransactOpts, receiver, localDenom, localAmount, gasLimit)
}

// ToRemoteAndOPWithdraw is a paid mutator transaction binding the contract method 0x0423d4d8.
//
// Solidity: function toRemoteAndOPWithdraw(string receiver, string localDenom, uint256 localAmount, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) ToRemoteAndOPWithdraw(receiver string, localDenom string, localAmount *big.Int, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndOPWithdraw(&_Erc20Wrapper.TransactOpts, receiver, localDenom, localAmount, gasLimit)
}

// ToRemoteAndOPWithdraw0 is a paid mutator transaction binding the contract method 0xb9cf3742.
//
// Solidity: function toRemoteAndOPWithdraw(string receiver, string localDenom, uint256 localAmount) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) ToRemoteAndOPWithdraw0(opts *bind.TransactOpts, receiver string, localDenom string, localAmount *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "toRemoteAndOPWithdraw0", receiver, localDenom, localAmount)
}

// ToRemoteAndOPWithdraw0 is a paid mutator transaction binding the contract method 0xb9cf3742.
//
// Solidity: function toRemoteAndOPWithdraw(string receiver, string localDenom, uint256 localAmount) returns()
func (_Erc20Wrapper *Erc20WrapperSession) ToRemoteAndOPWithdraw0(receiver string, localDenom string, localAmount *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndOPWithdraw0(&_Erc20Wrapper.TransactOpts, receiver, localDenom, localAmount)
}

// ToRemoteAndOPWithdraw0 is a paid mutator transaction binding the contract method 0xb9cf3742.
//
// Solidity: function toRemoteAndOPWithdraw(string receiver, string localDenom, uint256 localAmount) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) ToRemoteAndOPWithdraw0(receiver string, localDenom string, localAmount *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndOPWithdraw0(&_Erc20Wrapper.TransactOpts, receiver, localDenom, localAmount)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Erc20Wrapper *Erc20WrapperSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.TransferOwnership(&_Erc20Wrapper.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.TransferOwnership(&_Erc20Wrapper.TransactOpts, newOwner)
}

// Erc20WrapperOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Erc20Wrapper contract.
type Erc20WrapperOwnershipTransferredIterator struct {
	Event *Erc20WrapperOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Erc20WrapperOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Erc20WrapperOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Erc20WrapperOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Erc20WrapperOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Erc20WrapperOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Erc20WrapperOwnershipTransferred represents a OwnershipTransferred event raised by the Erc20Wrapper contract.
type Erc20WrapperOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Erc20Wrapper *Erc20WrapperFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*Erc20WrapperOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Erc20Wrapper.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperOwnershipTransferredIterator{contract: _Erc20Wrapper.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Erc20Wrapper *Erc20WrapperFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *Erc20WrapperOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Erc20Wrapper.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Erc20WrapperOwnershipTransferred)
				if err := _Erc20Wrapper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Erc20Wrapper *Erc20WrapperFilterer) ParseOwnershipTransferred(log types.Log) (*Erc20WrapperOwnershipTransferred, error) {
	event := new(Erc20WrapperOwnershipTransferred)
	if err := _Erc20Wrapper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
