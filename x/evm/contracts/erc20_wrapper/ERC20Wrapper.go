// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package erc20_wrapper

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// Erc20WrapperMetaData contains all meta data concerning the Erc20Wrapper contract.
var Erc20WrapperMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contractERC20Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"callback_id\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"ibc_ack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"callback_id\",\"type\":\"uint64\"}],\"name\":\"ibc_timeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"localTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"remoteDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"remoteTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"remoteDenom\",\"type\":\"string\"}],\"name\":\"unwrapLocal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"remoteDenom\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"remoteAmount\",\"type\":\"uint256\"}],\"name\":\"unwrapLocal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"localToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"}],\"name\":\"unwrapRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"localToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"}],\"name\":\"unwrapRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"localToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"}],\"name\":\"unwrapRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"localToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"}],\"name\":\"wrapLocal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"localToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"}],\"name\":\"wrapLocal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"localToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"}],\"name\":\"wrapLocal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"remoteDenom\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_remoteDecimals\",\"type\":\"uint8\"}],\"name\":\"wrapRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"remoteDenom\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"remoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_remoteDecimals\",\"type\":\"uint8\"}],\"name\":\"wrapRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040525f8060146101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550348015610037575f80fd5b50604051614c35380380614c358339818101604052810190610059919061013c565b335f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610167565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61010b826100e2565b9050919050565b61011b81610101565b8114610125575f80fd5b50565b5f8151905061013681610112565b92915050565b5f60208284031215610151576101506100de565b5b5f61015e84828501610128565b91505092915050565b614ac1806101745f395ff3fe608060405234801561000f575f80fd5b506004361061012a575f3560e01c80638da5cb5b116100ab578063c59114c21161006f578063c59114c214610326578063d96e6e9114610342578063dd4f77f01461035e578063e1d015f21461037a578063f2fde38b146103965761012a565b80638da5cb5b146102825780639c9d6057146102a05780639f65ade5146102bc578063a9dff95b146102ec578063c45a0155146103085761012a565b80631efb51e6116100f25780631efb51e6146101e257806331a503f0146102125780634e4681a11461022e5780635bb478081461024a5780635e7faa55146102665761012a565b806301ffc9a71461012e57806305f1f68e1461015e5780630d4f1f9d1461017a5780630f866782146101965780631de5537c146101b2575b5f80fd5b610148600480360381019061014391906130f0565b6103b2565b6040516101559190613135565b60405180910390f35b610178600480360381019061017391906132e4565b61041b565b005b610194600480360381019061018f91906133a5565b61060a565b005b6101b060048036038101906101ab9190613416565b61068b565b005b6101cc60048036038101906101c791906134c5565b6106d5565b6040516101d991906134ff565b60405180910390f35b6101fc60048036038101906101f7919061354e565b610705565b60405161020991906134ff565b60405180910390f35b61022c6004803603810190610227919061358c565b610742565b005b610248600480360381019061024391906135b7565b6107bc565b005b610264600480360381019061025f91906134c5565b6108c6565b005b610280600480360381019061027b9190613623565b6109e6565b005b61028a610e70565b60405161029791906134ff565b60405180910390f35b6102ba60048036038101906102b59190613714565b610e93565b005b6102d660048036038101906102d191906134c5565b610ead565b6040516102e39190613800565b60405180910390f35b61030660048036038101906103019190613416565b610eca565b005b610310610f14565b60405161031d9190613874565b60405180910390f35b610340600480360381019061033b9190613714565b610f39565b005b61035c6004803603810190610357919061388d565b610f53565b005b610378600480360381019061037391906138f9565b6110c7565b005b610394600480360381019061038f9190613623565b6112c0565b005b6103b060048036038101906103ab91906134c5565b6112d8565b005b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b5f60f173ffffffffffffffffffffffffffffffffffffffff16632b3324ce836040518263ffffffff1660e01b815260040161045691906139d9565b602060405180830381865afa158015610471573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104959190613a0d565b90505f60055f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f600660ff1660ff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361057b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057290613a82565b60405180910390fd5b5f8273ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016105b591906134ff565b602060405180830381865afa1580156105d0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105f49190613ab4565b90506106038383338885611420565b5050505050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610678576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066f90613b4f565b60405180910390fd5b80610687576106868261159b565b5b5050565b6106ce85858585856040518060400160405280600281526020017f7b7d000000000000000000000000000000000000000000000000000000000000815250610e93565b5050505050565b6002602052805f5260405f205f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6005602052815f5260405f20602052805f5260405f205f915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a790613b4f565b60405180910390fd5b6107b98161159b565b50565b5f60f173ffffffffffffffffffffffffffffffffffffffff16632b3324ce846040518263ffffffff1660e01b81526004016107f791906139d9565b602060405180830381865afa158015610812573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108369190613a0d565b90505f8173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161087291906134ff565b602060405180830381865afa15801561088d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108b19190613ab4565b90506108bf858583866110c7565b5050505050565b600173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610935576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092c90613bb7565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099a90613c1f565b60405180910390fd5b8060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6109ef86611a34565b8573ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b8152600401610a2c93929190613c4c565b6020604051808303815f875af1158015610a48573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a6c9190613c95565b505f610ae6858873ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610abb573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610adf9190613cd4565b6006611e56565b90505f60025f8973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f8173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b92573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610bb69190613cd4565b90508173ffffffffffffffffffffffffffffffffffffffff166340c10f1930856040518363ffffffff1660e01b8152600401610bf3929190613cff565b5f604051808303815f87803b158015610c0a575f80fd5b505af1158015610c1c573d5f803e3d5ffd5b5050505060015f60148282829054906101000a900467ffffffffffffffff16610c459190613d53565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018260ff1681526020016001151581525060045f8060149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015f6101000a81548160ff021916908360ff16021790555060808201518160030160016101000a81548160ff0219169083151502179055509050505f610de48b84868a8d8b611f72565b905060f173ffffffffffffffffffffffffffffffffffffffff166356c657a582876040518363ffffffff1660e01b8152600401610e22929190613d9d565b6020604051808303815f875af1158015610e3e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e629190613c95565b505050505050505050505050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610ea58686868686866203d0906112c0565b505050505050565b6003602052805f5260405f205f915054906101000a900460ff1681565b610f0d85858585856040518060400160405280600281526020017f7b7d000000000000000000000000000000000000000000000000000000000000815250610f39565b5050505050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610f4b8686868686866203d0906109e6565b505050505050565b5f60f173ffffffffffffffffffffffffffffffffffffffff16632b3324ce846040518263ffffffff1660e01b8152600401610f8e91906139d9565b602060405180830381865afa158015610fa9573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fcd9190613a0d565b90505f60055f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f600660ff1660ff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036110b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110aa90613a82565b60405180910390fd5b6110c08282338887611420565b5050505050565b5f60f173ffffffffffffffffffffffffffffffffffffffff16632b3324ce856040518263ffffffff1660e01b815260040161110291906139d9565b602060405180830381865afa15801561111d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111419190613a0d565b905061114d81836122fa565b5f60055f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8460ff1660ff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b81526004016111ff93929190613c4c565b6020604051808303815f875af115801561121b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061123f9190613c95565b505f61124d85856012611e56565b90508173ffffffffffffffffffffffffffffffffffffffff166340c10f1988836040518363ffffffff1660e01b815260040161128a929190613cff565b5f604051808303815f87803b1580156112a1575f80fd5b505af11580156112b3573d5f803e3d5ffd5b5050505050505050505050565b6112cf87878787878787612730565b50505050505050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461132e575f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611365575f80fd5b8073ffffffffffffffffffffffffffffffffffffffff165f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3805f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b8473ffffffffffffffffffffffffffffffffffffffff166379cc679084836040518363ffffffff1660e01b815260040161145b929190613cff565b6020604051808303815f875af1158015611477573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061149b9190613c95565b505f6115158260068773ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114ec573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115109190613cd4565b611e56565b90508473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff1660e01b8152600401611552929190613cff565b6020604051808303815f875af115801561156e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115929190613c95565b50505050505050565b5f60045f8367ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f206040518060a00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015f9054906101000a900460ff1660ff1660ff1681526020016003820160019054906101000a900460ff16151515158152505090505f60055f836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f836060015160ff1660ff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036117a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179a90613a82565b60405180910390fd5b5f611823836040015184606001518473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117fa573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061181e9190613cd4565b611e56565b905082608001511561192157826020015173ffffffffffffffffffffffffffffffffffffffff166342966c6884604001516040518263ffffffff1660e01b81526004016118709190613dcb565b5f604051808303815f87803b158015611887575f80fd5b505af1158015611899573d5f803e3d5ffd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb845f0151836040518363ffffffff1660e01b81526004016118db929190613cff565b6020604051808303815f875af11580156118f7573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061191b9190613c95565b5061198d565b8173ffffffffffffffffffffffffffffffffffffffff166340c10f19845f0151836040518363ffffffff1660e01b815260040161195f929190613cff565b5f604051808303815f87803b158015611976575f80fd5b505af1158015611988573d5f803e3d5ffd5b505050505b60045f8567ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f205f8082015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282015f9055600382015f6101000a81549060ff02191690556003820160016101000a81549060ff0219169055505050505050565b5f73ffffffffffffffffffffffffffffffffffffffff1660025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611e53575f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306ef1a866040518060400160405280600781526020017f57726170706564000000000000000000000000000000000000000000000000008152508473ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa158015611b7f573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190611ba79190613e52565b604051602001611bb8929190613ed3565b6040516020818303038152906040526040518060400160405280600181526020017f57000000000000000000000000000000000000000000000000000000000000008152508573ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa158015611c45573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190611c6d9190613e52565b604051602001611c7e929190613ed3565b60405160208183030381529060405260066040518463ffffffff1660e01b8152600401611cad93929190613ef6565b6020604051808303815f875af1158015611cc9573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ced9190613a0d565b90508060025f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600660035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908360ff1602179055508160055f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f600660ff1660ff1681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b50565b5f8160ff168360ff161115611ee4575f8284611e729190613f39565b60ff16600a611e81919061409c565b90505f8186611e909190614113565b14611ed0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ec79061418d565b60405180910390fd5b8085611edc91906141ab565b915050611f29565b8160ff168360ff161015611f24575f8383611eff9190613f39565b60ff16600a611f0e919061409c565b90508085611f1c91906141db565b915050611f28565b8390505b5b5f8103611f6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f6290614266565b60405180910390fd5b9392505050565b60605f611f9d5f60149054906101000a900467ffffffffffffffff1667ffffffffffffffff16612c04565b611fa630612cce565b604051602001611fb7929190614388565b60405160208183030381529060405290505f60f373ffffffffffffffffffffffffffffffffffffffff16635cc855e385846040518363ffffffff1660e01b81526004016120059291906143cc565b5f60405180830381865afa15801561201f573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906120479190613e52565b905060f373ffffffffffffffffffffffffffffffffffffffff16638d5c88178a6040518263ffffffff1660e01b815260040161208391906139d9565b5f60405180830381865afa15801561209d573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906120c59190613e52565b60f173ffffffffffffffffffffffffffffffffffffffff166381cf0f6a8a6040518263ffffffff1660e01b81526004016120ff91906134ff565b5f60405180830381865afa158015612119573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906121419190613e52565b61214a89612c04565b60f173ffffffffffffffffffffffffffffffffffffffff16636af32a55306040518263ffffffff1660e01b815260040161218491906134ff565b5f60405180830381865afa15801561219e573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906121c69190613e52565b60f373ffffffffffffffffffffffffffffffffffffffff16638d5c88178a6040518263ffffffff1660e01b815260040161220091906139d9565b5f60405180830381865afa15801561221a573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906122429190613e52565b61224b8b612c04565b60f373ffffffffffffffffffffffffffffffffffffffff16638d5c8817886040518263ffffffff1660e01b815260040161228591906139d9565b5f60405180830381865afa15801561229f573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906122c79190613e52565b6040516020016122dd979695949392919061487f565b604051602081830303815290604052925050509695505050505050565b5f73ffffffffffffffffffffffffffffffffffffffff1660055f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8360ff1660ff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361272c575f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306ef1a866040518060400160405280600781526020017f57726170706564000000000000000000000000000000000000000000000000008152508573ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa15801561245a573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906124829190613e52565b604051602001612493929190613ed3565b6040516020818303038152906040526040518060400160405280600181526020017f57000000000000000000000000000000000000000000000000000000000000008152508673ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa158015612520573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906125489190613e52565b604051602001612559929190613ed3565b60405160208183030381529060405260126040518463ffffffff1660e01b815260040161258893929190613ef6565b6020604051808303815f875af11580156125a4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906125c89190613a0d565b90508060055f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8460ff1660ff1681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908360ff160217905550505b5050565b8573ffffffffffffffffffffffffffffffffffffffff166379cc679033866040518363ffffffff1660e01b815260040161276b929190613cff565b6020604051808303815f875af1158015612787573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906127ab9190613c95565b505f60025f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361287a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612871906149e8565b60405180910390fd5b5f60035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1690505f73ffffffffffffffffffffffffffffffffffffffff1660055f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8360ff1660ff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036129a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161299d90613a82565b60405180910390fd5b5f6129b387601284611e56565b905060015f60148282829054906101000a900467ffffffffffffffff166129da9190613d53565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018281526020018360ff1681526020015f151581525060045f8060149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015f6101000a81548160ff021916908360ff16021790555060808201518160030160016101000a81548160ff0219169083151502179055509050505f612b788b85848a8d8b611f72565b905060f173ffffffffffffffffffffffffffffffffffffffff166356c657a582876040518363ffffffff1660e01b8152600401612bb6929190613d9d565b6020604051808303815f875af1158015612bd2573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612bf69190613c95565b505050505050505050505050565b60605f6001612c1284612cfb565b0190505f8167ffffffffffffffff811115612c3057612c2f6131c0565b5b6040519080825280601f01601f191660200182016040528015612c625781602001600182028036833780820191505090505b5090505f82602001820190505b600115612cc3578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581612cb857612cb76140e6565b5b0494505f8503612c6f575b819350505050919050565b6060612cf48273ffffffffffffffffffffffffffffffffffffffff16601460ff16612e4c565b9050919050565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612d57577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381612d4d57612d4c6140e6565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612d94576d04ee2d6d415b85acef81000000008381612d8a57612d896140e6565b5b0492506020810190505b662386f26fc100008310612dc357662386f26fc100008381612db957612db86140e6565b5b0492506010810190505b6305f5e1008310612dec576305f5e1008381612de257612de16140e6565b5b0492506008810190505b6127108310612e11576127108381612e0757612e066140e6565b5b0492506004810190505b60648310612e345760648381612e2a57612e296140e6565b5b0492506002810190505b600a8310612e43576001810190505b80915050919050565b60605f8390505f6002846002612e6291906141db565b612e6c9190614a06565b67ffffffffffffffff811115612e8557612e846131c0565b5b6040519080825280601f01601f191660200182016040528015612eb75781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000815f81518110612eee57612eed614a39565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612f5157612f50614a39565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053505f6001856002612f8f91906141db565b612f999190614a06565b90505b6001811115613038577f3031323334353637383961626364656600000000000000000000000000000000600f841660108110612fdb57612fda614a39565b5b1a60f81b828281518110612ff257612ff1614a39565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350600483901c92508061303190614a66565b9050612f9c565b505f821461307f5784846040517fe22e27eb000000000000000000000000000000000000000000000000000000008152600401613076929190614a8d565b60405180910390fd5b809250505092915050565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6130cf8161309b565b81146130d9575f80fd5b50565b5f813590506130ea816130c6565b92915050565b5f6020828403121561310557613104613093565b5b5f613112848285016130dc565b91505092915050565b5f8115159050919050565b61312f8161311b565b82525050565b5f6020820190506131485f830184613126565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6131778261314e565b9050919050565b6131878161316d565b8114613191575f80fd5b50565b5f813590506131a28161317e565b92915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6131f6826131b0565b810181811067ffffffffffffffff82111715613215576132146131c0565b5b80604052505050565b5f61322761308a565b905061323382826131ed565b919050565b5f67ffffffffffffffff821115613252576132516131c0565b5b61325b826131b0565b9050602081019050919050565b828183375f83830152505050565b5f61328861328384613238565b61321e565b9050828152602081018484840111156132a4576132a36131ac565b5b6132af848285613268565b509392505050565b5f82601f8301126132cb576132ca6131a8565b5b81356132db848260208601613276565b91505092915050565b5f80604083850312156132fa576132f9613093565b5b5f61330785828601613194565b925050602083013567ffffffffffffffff81111561332857613327613097565b5b613334858286016132b7565b9150509250929050565b5f67ffffffffffffffff82169050919050565b61335a8161333e565b8114613364575f80fd5b50565b5f8135905061337581613351565b92915050565b6133848161311b565b811461338e575f80fd5b50565b5f8135905061339f8161337b565b92915050565b5f80604083850312156133bb576133ba613093565b5b5f6133c885828601613367565b92505060206133d985828601613391565b9150509250929050565b5f819050919050565b6133f5816133e3565b81146133ff575f80fd5b50565b5f81359050613410816133ec565b92915050565b5f805f805f60a0868803121561342f5761342e613093565b5b5f86013567ffffffffffffffff81111561344c5761344b613097565b5b613458888289016132b7565b955050602061346988828901613194565b945050604086013567ffffffffffffffff81111561348a57613489613097565b5b613496888289016132b7565b93505060606134a788828901613402565b92505060806134b888828901613402565b9150509295509295909350565b5f602082840312156134da576134d9613093565b5b5f6134e784828501613194565b91505092915050565b6134f98161316d565b82525050565b5f6020820190506135125f8301846134f0565b92915050565b5f60ff82169050919050565b61352d81613518565b8114613537575f80fd5b50565b5f8135905061354881613524565b92915050565b5f806040838503121561356457613563613093565b5b5f61357185828601613194565b92505060206135828582860161353a565b9150509250929050565b5f602082840312156135a1576135a0613093565b5b5f6135ae84828501613367565b91505092915050565b5f805f606084860312156135ce576135cd613093565b5b5f6135db86828701613194565b935050602084013567ffffffffffffffff8111156135fc576135fb613097565b5b613608868287016132b7565b92505060406136198682870161353a565b9150509250925092565b5f805f805f805f60e0888a03121561363e5761363d613093565b5b5f88013567ffffffffffffffff81111561365b5761365a613097565b5b6136678a828b016132b7565b97505060206136788a828b01613194565b965050604088013567ffffffffffffffff81111561369957613698613097565b5b6136a58a828b016132b7565b95505060606136b68a828b01613402565b94505060806136c78a828b01613402565b93505060a088013567ffffffffffffffff8111156136e8576136e7613097565b5b6136f48a828b016132b7565b92505060c06137058a828b01613367565b91505092959891949750929550565b5f805f805f8060c0878903121561372e5761372d613093565b5b5f87013567ffffffffffffffff81111561374b5761374a613097565b5b61375789828a016132b7565b965050602061376889828a01613194565b955050604087013567ffffffffffffffff81111561378957613788613097565b5b61379589828a016132b7565b94505060606137a689828a01613402565b93505060806137b789828a01613402565b92505060a087013567ffffffffffffffff8111156137d8576137d7613097565b5b6137e489828a016132b7565b9150509295509295509295565b6137fa81613518565b82525050565b5f6020820190506138135f8301846137f1565b92915050565b5f819050919050565b5f61383c6138376138328461314e565b613819565b61314e565b9050919050565b5f61384d82613822565b9050919050565b5f61385e82613843565b9050919050565b61386e81613854565b82525050565b5f6020820190506138875f830184613865565b92915050565b5f805f606084860312156138a4576138a3613093565b5b5f6138b186828701613194565b935050602084013567ffffffffffffffff8111156138d2576138d1613097565b5b6138de868287016132b7565b92505060406138ef86828701613402565b9150509250925092565b5f805f806080858703121561391157613910613093565b5b5f61391e87828801613194565b945050602085013567ffffffffffffffff81111561393f5761393e613097565b5b61394b878288016132b7565b935050604061395c87828801613402565b925050606061396d8782880161353a565b91505092959194509250565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f6139ab82613979565b6139b58185613983565b93506139c5818560208601613993565b6139ce816131b0565b840191505092915050565b5f6020820190508181035f8301526139f181846139a1565b905092915050565b5f81519050613a078161317e565b92915050565b5f60208284031215613a2257613a21613093565b5b5f613a2f848285016139f9565b91505092915050565b7f6c6f63616c20746f6b656e20646f65736e2774206578697374000000000000005f82015250565b5f613a6c601983613983565b9150613a7782613a38565b602082019050919050565b5f6020820190508181035f830152613a9981613a60565b9050919050565b5f81519050613aae816133ec565b92915050565b5f60208284031215613ac957613ac8613093565b5b5f613ad684828501613aa0565b91505092915050565b7f6f6e6c792074686520636f6e747261637420697473656c662063616e2063616c5f8201527f6c20746869732066756e6374696f6e0000000000000000000000000000000000602082015250565b5f613b39602f83613983565b9150613b4482613adf565b604082019050919050565b5f6020820190508181035f830152613b6681613b2d565b9050919050565b7f45524332303a2063616c6c6572206973206e6f742074686520636861696e00005f82015250565b5f613ba1601e83613983565b9150613bac82613b6d565b602082019050919050565b5f6020820190508181035f830152613bce81613b95565b9050919050565b7f696e76616c696420666163746f727920616464726573730000000000000000005f82015250565b5f613c09601783613983565b9150613c1482613bd5565b602082019050919050565b5f6020820190508181035f830152613c3681613bfd565b9050919050565b613c46816133e3565b82525050565b5f606082019050613c5f5f8301866134f0565b613c6c60208301856134f0565b613c796040830184613c3d565b949350505050565b5f81519050613c8f8161337b565b92915050565b5f60208284031215613caa57613ca9613093565b5b5f613cb784828501613c81565b91505092915050565b5f81519050613cce81613524565b92915050565b5f60208284031215613ce957613ce8613093565b5b5f613cf684828501613cc0565b91505092915050565b5f604082019050613d125f8301856134f0565b613d1f6020830184613c3d565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f613d5d8261333e565b9150613d688361333e565b9250828201905067ffffffffffffffff811115613d8857613d87613d26565b5b92915050565b613d978161333e565b82525050565b5f6040820190508181035f830152613db581856139a1565b9050613dc46020830184613d8e565b9392505050565b5f602082019050613dde5f830184613c3d565b92915050565b5f613df6613df184613238565b61321e565b905082815260208101848484011115613e1257613e116131ac565b5b613e1d848285613993565b509392505050565b5f82601f830112613e3957613e386131a8565b5b8151613e49848260208601613de4565b91505092915050565b5f60208284031215613e6757613e66613093565b5b5f82015167ffffffffffffffff811115613e8457613e83613097565b5b613e9084828501613e25565b91505092915050565b5f81905092915050565b5f613ead82613979565b613eb78185613e99565b9350613ec7818560208601613993565b80840191505092915050565b5f613ede8285613ea3565b9150613eea8284613ea3565b91508190509392505050565b5f6060820190508181035f830152613f0e81866139a1565b90508181036020830152613f2281856139a1565b9050613f3160408301846137f1565b949350505050565b5f613f4382613518565b9150613f4e83613518565b9250828203905060ff811115613f6757613f66613d26565b5b92915050565b5f8160011c9050919050565b5f808291508390505b6001851115613fc257808604811115613f9e57613f9d613d26565b5b6001851615613fad5780820291505b8081029050613fbb85613f6d565b9450613f82565b94509492505050565b5f82613fda5760019050614095565b81613fe7575f9050614095565b8160018114613ffd576002811461400757614036565b6001915050614095565b60ff84111561401957614018613d26565b5b8360020a9150848211156140305761402f613d26565b5b50614095565b5060208310610133831016604e8410600b841016171561406b5782820a90508381111561406657614065613d26565b5b614095565b6140788484846001613f79565b9250905081840481111561408f5761408e613d26565b5b81810290505b9392505050565b5f6140a6826133e3565b91506140b1836133e3565b92506140de7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613fcb565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f61411d826133e3565b9150614128836133e3565b925082614138576141376140e6565b5b828206905092915050565b7f6475737420616d6f756e742073686f756c64206265207a65726f0000000000005f82015250565b5f614177601a83613983565b915061418282614143565b602082019050919050565b5f6020820190508181035f8301526141a48161416b565b9050919050565b5f6141b5826133e3565b91506141c0836133e3565b9250826141d0576141cf6140e6565b5b828204905092915050565b5f6141e5826133e3565b91506141f0836133e3565b92508282026141fe816133e3565b9150828204841483151761421557614214613d26565b5b5092915050565b7f636f6e76657274656420616d6f756e74206973207a65726f00000000000000005f82015250565b5f614250601883613983565b915061425b8261421c565b602082019050919050565b5f6020820190508181035f83015261427d81614244565b9050919050565b7f7b2265766d223a207b226173796e635f63616c6c6261636b223a207b226964225f8201527f3a20000000000000000000000000000000000000000000000000000000000000602082015250565b5f6142de602283613e99565b91506142e982614284565b602282019050919050565b7f2c22636f6e74726163745f61646472657373223a2200000000000000000000005f82015250565b5f614328601583613e99565b9150614333826142f4565b601582019050919050565b7f227d7d7d000000000000000000000000000000000000000000000000000000005f82015250565b5f614372600483613e99565b915061437d8261433e565b600482019050919050565b5f614392826142d2565b915061439e8285613ea3565b91506143a98261431c565b91506143b58284613ea3565b91506143c082614366565b91508190509392505050565b5f6040820190508181035f8301526143e481856139a1565b905081810360208301526143f881846139a1565b90509392505050565b7f7b224074797065223a20222f6962632e6170706c69636174696f6e732e7472615f8201527f6e736665722e76312e4d73675472616e73666572222c00000000000000000000602082015250565b5f61445b603683613e99565b915061446682614401565b603682019050919050565b7f22736f757263655f706f7274223a20227472616e73666572222c0000000000005f82015250565b5f6144a5601a83613e99565b91506144b082614471565b601a82019050919050565b7f22736f757263655f6368616e6e656c223a2000000000000000000000000000005f82015250565b5f6144ef601283613e99565b91506144fa826144bb565b601282019050919050565b7f2c000000000000000000000000000000000000000000000000000000000000005f82015250565b5f614539600183613e99565b915061454482614505565b600182019050919050565b7f22746f6b656e223a207b202264656e6f6d223a202200000000000000000000005f82015250565b5f614583601583613e99565b915061458e8261454f565b601582019050919050565b7f222c0000000000000000000000000000000000000000000000000000000000005f82015250565b5f6145cd600283613e99565b91506145d882614599565b600282019050919050565b7f22616d6f756e74223a20220000000000000000000000000000000000000000005f82015250565b5f614617600b83613e99565b9150614622826145e3565b600b82019050919050565b7f227d2c00000000000000000000000000000000000000000000000000000000005f82015250565b5f614661600383613e99565b915061466c8261462d565b600382019050919050565b7f2273656e646572223a20220000000000000000000000000000000000000000005f82015250565b5f6146ab600b83613e99565b91506146b682614677565b600b82019050919050565b7f227265636569766572223a2000000000000000000000000000000000000000005f82015250565b5f6146f5600c83613e99565b9150614700826146c1565b600c82019050919050565b7f2274696d656f75745f686569676874223a207b227265766973696f6e5f6e756d5f8201527f626572223a202230222c227265766973696f6e5f686569676874223a2022302260208201527f7d2c000000000000000000000000000000000000000000000000000000000000604082015250565b5f61478b604283613e99565b91506147968261470b565b604282019050919050565b7f2274696d656f75745f74696d657374616d70223a2022000000000000000000005f82015250565b5f6147d5601683613e99565b91506147e0826147a1565b601682019050919050565b7f226d656d6f223a200000000000000000000000000000000000000000000000005f82015250565b5f61481f600883613e99565b915061482a826147eb565b600882019050919050565b7f7d000000000000000000000000000000000000000000000000000000000000005f82015250565b5f614869600183613e99565b915061487482614835565b600182019050919050565b5f6148898261444f565b915061489482614499565b915061489f826144e3565b91506148ab828a613ea3565b91506148b68261452d565b91506148c182614577565b91506148cd8289613ea3565b91506148d8826145c1565b91506148e38261460b565b91506148ef8288613ea3565b91506148fa82614655565b91506149058261469f565b91506149118287613ea3565b915061491c826145c1565b9150614927826146e9565b91506149338286613ea3565b915061493e8261452d565b91506149498261477f565b9150614954826147c9565b91506149608285613ea3565b915061496b826145c1565b915061497682614813565b91506149828284613ea3565b915061498d8261485d565b915081905098975050505050505050565b7f72656d6f746520746f6b656e20646f65736e27742065786973740000000000005f82015250565b5f6149d2601a83613983565b91506149dd8261499e565b602082019050919050565b5f6020820190508181035f8301526149ff816149c6565b9050919050565b5f614a10826133e3565b9150614a1b836133e3565b9250828201905080821115614a3357614a32613d26565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f614a70826133e3565b91505f8203614a8257614a81613d26565b5b600182039050919050565b5f604082019050614aa05f830185613c3d565b614aad6020830184613c3d565b939250505056fea164736f6c6343000819000a",
}

// Erc20WrapperABI is the input ABI used to generate the binding from.
// Deprecated: Use Erc20WrapperMetaData.ABI instead.
var Erc20WrapperABI = Erc20WrapperMetaData.ABI

// Erc20WrapperBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use Erc20WrapperMetaData.Bin instead.
var Erc20WrapperBin = Erc20WrapperMetaData.Bin

// DeployErc20Wrapper deploys a new Ethereum contract, binding an instance of Erc20Wrapper to it.
func DeployErc20Wrapper(auth *bind.TransactOpts, backend bind.ContractBackend, erc20Factory common.Address) (common.Address, *types.Transaction, *Erc20Wrapper, error) {
	parsed, err := Erc20WrapperMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(Erc20WrapperBin), backend, erc20Factory)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Erc20Wrapper{Erc20WrapperCaller: Erc20WrapperCaller{contract: contract}, Erc20WrapperTransactor: Erc20WrapperTransactor{contract: contract}, Erc20WrapperFilterer: Erc20WrapperFilterer{contract: contract}}, nil
}

// Erc20Wrapper is an auto generated Go binding around an Ethereum contract.
type Erc20Wrapper struct {
	Erc20WrapperCaller     // Read-only binding to the contract
	Erc20WrapperTransactor // Write-only binding to the contract
	Erc20WrapperFilterer   // Log filterer for contract events
}

// Erc20WrapperCaller is an auto generated read-only Go binding around an Ethereum contract.
type Erc20WrapperCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Erc20WrapperTransactor is an auto generated write-only Go binding around an Ethereum contract.
type Erc20WrapperTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Erc20WrapperFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type Erc20WrapperFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Erc20WrapperSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type Erc20WrapperSession struct {
	Contract     *Erc20Wrapper     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// Erc20WrapperCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type Erc20WrapperCallerSession struct {
	Contract *Erc20WrapperCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// Erc20WrapperTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type Erc20WrapperTransactorSession struct {
	Contract     *Erc20WrapperTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// Erc20WrapperRaw is an auto generated low-level Go binding around an Ethereum contract.
type Erc20WrapperRaw struct {
	Contract *Erc20Wrapper // Generic contract binding to access the raw methods on
}

// Erc20WrapperCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type Erc20WrapperCallerRaw struct {
	Contract *Erc20WrapperCaller // Generic read-only contract binding to access the raw methods on
}

// Erc20WrapperTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type Erc20WrapperTransactorRaw struct {
	Contract *Erc20WrapperTransactor // Generic write-only contract binding to access the raw methods on
}

// NewErc20Wrapper creates a new instance of Erc20Wrapper, bound to a specific deployed contract.
func NewErc20Wrapper(address common.Address, backend bind.ContractBackend) (*Erc20Wrapper, error) {
	contract, err := bindErc20Wrapper(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Erc20Wrapper{Erc20WrapperCaller: Erc20WrapperCaller{contract: contract}, Erc20WrapperTransactor: Erc20WrapperTransactor{contract: contract}, Erc20WrapperFilterer: Erc20WrapperFilterer{contract: contract}}, nil
}

// NewErc20WrapperCaller creates a new read-only instance of Erc20Wrapper, bound to a specific deployed contract.
func NewErc20WrapperCaller(address common.Address, caller bind.ContractCaller) (*Erc20WrapperCaller, error) {
	contract, err := bindErc20Wrapper(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperCaller{contract: contract}, nil
}

// NewErc20WrapperTransactor creates a new write-only instance of Erc20Wrapper, bound to a specific deployed contract.
func NewErc20WrapperTransactor(address common.Address, transactor bind.ContractTransactor) (*Erc20WrapperTransactor, error) {
	contract, err := bindErc20Wrapper(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperTransactor{contract: contract}, nil
}

// NewErc20WrapperFilterer creates a new log filterer instance of Erc20Wrapper, bound to a specific deployed contract.
func NewErc20WrapperFilterer(address common.Address, filterer bind.ContractFilterer) (*Erc20WrapperFilterer, error) {
	contract, err := bindErc20Wrapper(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperFilterer{contract: contract}, nil
}

// bindErc20Wrapper binds a generic wrapper to an already deployed contract.
func bindErc20Wrapper(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := Erc20WrapperMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Erc20Wrapper *Erc20WrapperRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Erc20Wrapper.Contract.Erc20WrapperCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Erc20Wrapper *Erc20WrapperRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.Erc20WrapperTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Erc20Wrapper *Erc20WrapperRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.Erc20WrapperTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Erc20Wrapper *Erc20WrapperCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Erc20Wrapper.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Erc20Wrapper *Erc20WrapperTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Erc20Wrapper *Erc20WrapperTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.contract.Transact(opts, method, params...)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) Factory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "factory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) Factory() (common.Address, error) {
	return _Erc20Wrapper.Contract.Factory(&_Erc20Wrapper.CallOpts)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) Factory() (common.Address, error) {
	return _Erc20Wrapper.Contract.Factory(&_Erc20Wrapper.CallOpts)
}

// LocalTokens is a free data retrieval call binding the contract method 0x1efb51e6.
//
// Solidity: function localTokens(address , uint8 ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) LocalTokens(opts *bind.CallOpts, arg0 common.Address, arg1 uint8) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "localTokens", arg0, arg1)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LocalTokens is a free data retrieval call binding the contract method 0x1efb51e6.
//
// Solidity: function localTokens(address , uint8 ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) LocalTokens(arg0 common.Address, arg1 uint8) (common.Address, error) {
	return _Erc20Wrapper.Contract.LocalTokens(&_Erc20Wrapper.CallOpts, arg0, arg1)
}

// LocalTokens is a free data retrieval call binding the contract method 0x1efb51e6.
//
// Solidity: function localTokens(address , uint8 ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) LocalTokens(arg0 common.Address, arg1 uint8) (common.Address, error) {
	return _Erc20Wrapper.Contract.LocalTokens(&_Erc20Wrapper.CallOpts, arg0, arg1)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) Owner() (common.Address, error) {
	return _Erc20Wrapper.Contract.Owner(&_Erc20Wrapper.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) Owner() (common.Address, error) {
	return _Erc20Wrapper.Contract.Owner(&_Erc20Wrapper.CallOpts)
}

// RemoteDecimals is a free data retrieval call binding the contract method 0x9f65ade5.
//
// Solidity: function remoteDecimals(address ) view returns(uint8)
func (_Erc20Wrapper *Erc20WrapperCaller) RemoteDecimals(opts *bind.CallOpts, arg0 common.Address) (uint8, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "remoteDecimals", arg0)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// RemoteDecimals is a free data retrieval call binding the contract method 0x9f65ade5.
//
// Solidity: function remoteDecimals(address ) view returns(uint8)
func (_Erc20Wrapper *Erc20WrapperSession) RemoteDecimals(arg0 common.Address) (uint8, error) {
	return _Erc20Wrapper.Contract.RemoteDecimals(&_Erc20Wrapper.CallOpts, arg0)
}

// RemoteDecimals is a free data retrieval call binding the contract method 0x9f65ade5.
//
// Solidity: function remoteDecimals(address ) view returns(uint8)
func (_Erc20Wrapper *Erc20WrapperCallerSession) RemoteDecimals(arg0 common.Address) (uint8, error) {
	return _Erc20Wrapper.Contract.RemoteDecimals(&_Erc20Wrapper.CallOpts, arg0)
}

// RemoteTokens is a free data retrieval call binding the contract method 0x1de5537c.
//
// Solidity: function remoteTokens(address ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) RemoteTokens(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "remoteTokens", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RemoteTokens is a free data retrieval call binding the contract method 0x1de5537c.
//
// Solidity: function remoteTokens(address ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) RemoteTokens(arg0 common.Address) (common.Address, error) {
	return _Erc20Wrapper.Contract.RemoteTokens(&_Erc20Wrapper.CallOpts, arg0)
}

// RemoteTokens is a free data retrieval call binding the contract method 0x1de5537c.
//
// Solidity: function remoteTokens(address ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) RemoteTokens(arg0 common.Address) (common.Address, error) {
	return _Erc20Wrapper.Contract.RemoteTokens(&_Erc20Wrapper.CallOpts, arg0)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Erc20Wrapper *Erc20WrapperCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Erc20Wrapper *Erc20WrapperSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Erc20Wrapper.Contract.SupportsInterface(&_Erc20Wrapper.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Erc20Wrapper *Erc20WrapperCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Erc20Wrapper.Contract.SupportsInterface(&_Erc20Wrapper.CallOpts, interfaceId)
}

// IbcAck is a paid mutator transaction binding the contract method 0x0d4f1f9d.
//
// Solidity: function ibc_ack(uint64 callback_id, bool success) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) IbcAck(opts *bind.TransactOpts, callback_id uint64, success bool) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "ibc_ack", callback_id, success)
}

// IbcAck is a paid mutator transaction binding the contract method 0x0d4f1f9d.
//
// Solidity: function ibc_ack(uint64 callback_id, bool success) returns()
func (_Erc20Wrapper *Erc20WrapperSession) IbcAck(callback_id uint64, success bool) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.IbcAck(&_Erc20Wrapper.TransactOpts, callback_id, success)
}

// IbcAck is a paid mutator transaction binding the contract method 0x0d4f1f9d.
//
// Solidity: function ibc_ack(uint64 callback_id, bool success) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) IbcAck(callback_id uint64, success bool) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.IbcAck(&_Erc20Wrapper.TransactOpts, callback_id, success)
}

// IbcTimeout is a paid mutator transaction binding the contract method 0x31a503f0.
//
// Solidity: function ibc_timeout(uint64 callback_id) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) IbcTimeout(opts *bind.TransactOpts, callback_id uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "ibc_timeout", callback_id)
}

// IbcTimeout is a paid mutator transaction binding the contract method 0x31a503f0.
//
// Solidity: function ibc_timeout(uint64 callback_id) returns()
func (_Erc20Wrapper *Erc20WrapperSession) IbcTimeout(callback_id uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.IbcTimeout(&_Erc20Wrapper.TransactOpts, callback_id)
}

// IbcTimeout is a paid mutator transaction binding the contract method 0x31a503f0.
//
// Solidity: function ibc_timeout(uint64 callback_id) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) IbcTimeout(callback_id uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.IbcTimeout(&_Erc20Wrapper.TransactOpts, callback_id)
}

// SetFactory is a paid mutator transaction binding the contract method 0x5bb47808.
//
// Solidity: function setFactory(address newFactory) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) SetFactory(opts *bind.TransactOpts, newFactory common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "setFactory", newFactory)
}

// SetFactory is a paid mutator transaction binding the contract method 0x5bb47808.
//
// Solidity: function setFactory(address newFactory) returns()
func (_Erc20Wrapper *Erc20WrapperSession) SetFactory(newFactory common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.SetFactory(&_Erc20Wrapper.TransactOpts, newFactory)
}

// SetFactory is a paid mutator transaction binding the contract method 0x5bb47808.
//
// Solidity: function setFactory(address newFactory) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) SetFactory(newFactory common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.SetFactory(&_Erc20Wrapper.TransactOpts, newFactory)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Erc20Wrapper *Erc20WrapperSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.TransferOwnership(&_Erc20Wrapper.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.TransferOwnership(&_Erc20Wrapper.TransactOpts, newOwner)
}

// UnwrapLocal is a paid mutator transaction binding the contract method 0x05f1f68e.
//
// Solidity: function unwrapLocal(address receiver, string remoteDenom) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) UnwrapLocal(opts *bind.TransactOpts, receiver common.Address, remoteDenom string) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "unwrapLocal", receiver, remoteDenom)
}

// UnwrapLocal is a paid mutator transaction binding the contract method 0x05f1f68e.
//
// Solidity: function unwrapLocal(address receiver, string remoteDenom) returns()
func (_Erc20Wrapper *Erc20WrapperSession) UnwrapLocal(receiver common.Address, remoteDenom string) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.UnwrapLocal(&_Erc20Wrapper.TransactOpts, receiver, remoteDenom)
}

// UnwrapLocal is a paid mutator transaction binding the contract method 0x05f1f68e.
//
// Solidity: function unwrapLocal(address receiver, string remoteDenom) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) UnwrapLocal(receiver common.Address, remoteDenom string) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.UnwrapLocal(&_Erc20Wrapper.TransactOpts, receiver, remoteDenom)
}

// UnwrapLocal0 is a paid mutator transaction binding the contract method 0xd96e6e91.
//
// Solidity: function unwrapLocal(address receiver, string remoteDenom, uint256 remoteAmount) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) UnwrapLocal0(opts *bind.TransactOpts, receiver common.Address, remoteDenom string, remoteAmount *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "unwrapLocal0", receiver, remoteDenom, remoteAmount)
}

// UnwrapLocal0 is a paid mutator transaction binding the contract method 0xd96e6e91.
//
// Solidity: function unwrapLocal(address receiver, string remoteDenom, uint256 remoteAmount) returns()
func (_Erc20Wrapper *Erc20WrapperSession) UnwrapLocal0(receiver common.Address, remoteDenom string, remoteAmount *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.UnwrapLocal0(&_Erc20Wrapper.TransactOpts, receiver, remoteDenom, remoteAmount)
}

// UnwrapLocal0 is a paid mutator transaction binding the contract method 0xd96e6e91.
//
// Solidity: function unwrapLocal(address receiver, string remoteDenom, uint256 remoteAmount) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) UnwrapLocal0(receiver common.Address, remoteDenom string, remoteAmount *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.UnwrapLocal0(&_Erc20Wrapper.TransactOpts, receiver, remoteDenom, remoteAmount)
}

// UnwrapRemote is a paid mutator transaction binding the contract method 0x0f866782.
//
// Solidity: function unwrapRemote(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) UnwrapRemote(opts *bind.TransactOpts, channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "unwrapRemote", channel, localToken, receiver, localAmount, timeout)
}

// UnwrapRemote is a paid mutator transaction binding the contract method 0x0f866782.
//
// Solidity: function unwrapRemote(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout) returns()
func (_Erc20Wrapper *Erc20WrapperSession) UnwrapRemote(channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.UnwrapRemote(&_Erc20Wrapper.TransactOpts, channel, localToken, receiver, localAmount, timeout)
}

// UnwrapRemote is a paid mutator transaction binding the contract method 0x0f866782.
//
// Solidity: function unwrapRemote(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) UnwrapRemote(channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.UnwrapRemote(&_Erc20Wrapper.TransactOpts, channel, localToken, receiver, localAmount, timeout)
}

// UnwrapRemote0 is a paid mutator transaction binding the contract method 0x9c9d6057.
//
// Solidity: function unwrapRemote(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout, string memo) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) UnwrapRemote0(opts *bind.TransactOpts, channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int, memo string) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "unwrapRemote0", channel, localToken, receiver, localAmount, timeout, memo)
}

// UnwrapRemote0 is a paid mutator transaction binding the contract method 0x9c9d6057.
//
// Solidity: function unwrapRemote(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout, string memo) returns()
func (_Erc20Wrapper *Erc20WrapperSession) UnwrapRemote0(channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int, memo string) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.UnwrapRemote0(&_Erc20Wrapper.TransactOpts, channel, localToken, receiver, localAmount, timeout, memo)
}

// UnwrapRemote0 is a paid mutator transaction binding the contract method 0x9c9d6057.
//
// Solidity: function unwrapRemote(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout, string memo) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) UnwrapRemote0(channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int, memo string) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.UnwrapRemote0(&_Erc20Wrapper.TransactOpts, channel, localToken, receiver, localAmount, timeout, memo)
}

// UnwrapRemote1 is a paid mutator transaction binding the contract method 0xe1d015f2.
//
// Solidity: function unwrapRemote(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout, string memo, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) UnwrapRemote1(opts *bind.TransactOpts, channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int, memo string, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "unwrapRemote1", channel, localToken, receiver, localAmount, timeout, memo, gasLimit)
}

// UnwrapRemote1 is a paid mutator transaction binding the contract method 0xe1d015f2.
//
// Solidity: function unwrapRemote(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout, string memo, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperSession) UnwrapRemote1(channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int, memo string, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.UnwrapRemote1(&_Erc20Wrapper.TransactOpts, channel, localToken, receiver, localAmount, timeout, memo, gasLimit)
}

// UnwrapRemote1 is a paid mutator transaction binding the contract method 0xe1d015f2.
//
// Solidity: function unwrapRemote(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout, string memo, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) UnwrapRemote1(channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int, memo string, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.UnwrapRemote1(&_Erc20Wrapper.TransactOpts, channel, localToken, receiver, localAmount, timeout, memo, gasLimit)
}

// WrapLocal is a paid mutator transaction binding the contract method 0x5e7faa55.
//
// Solidity: function wrapLocal(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout, string memo, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) WrapLocal(opts *bind.TransactOpts, channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int, memo string, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "wrapLocal", channel, localToken, receiver, localAmount, timeout, memo, gasLimit)
}

// WrapLocal is a paid mutator transaction binding the contract method 0x5e7faa55.
//
// Solidity: function wrapLocal(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout, string memo, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperSession) WrapLocal(channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int, memo string, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.WrapLocal(&_Erc20Wrapper.TransactOpts, channel, localToken, receiver, localAmount, timeout, memo, gasLimit)
}

// WrapLocal is a paid mutator transaction binding the contract method 0x5e7faa55.
//
// Solidity: function wrapLocal(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout, string memo, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) WrapLocal(channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int, memo string, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.WrapLocal(&_Erc20Wrapper.TransactOpts, channel, localToken, receiver, localAmount, timeout, memo, gasLimit)
}

// WrapLocal0 is a paid mutator transaction binding the contract method 0xa9dff95b.
//
// Solidity: function wrapLocal(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) WrapLocal0(opts *bind.TransactOpts, channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "wrapLocal0", channel, localToken, receiver, localAmount, timeout)
}

// WrapLocal0 is a paid mutator transaction binding the contract method 0xa9dff95b.
//
// Solidity: function wrapLocal(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout) returns()
func (_Erc20Wrapper *Erc20WrapperSession) WrapLocal0(channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.WrapLocal0(&_Erc20Wrapper.TransactOpts, channel, localToken, receiver, localAmount, timeout)
}

// WrapLocal0 is a paid mutator transaction binding the contract method 0xa9dff95b.
//
// Solidity: function wrapLocal(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) WrapLocal0(channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.WrapLocal0(&_Erc20Wrapper.TransactOpts, channel, localToken, receiver, localAmount, timeout)
}

// WrapLocal1 is a paid mutator transaction binding the contract method 0xc59114c2.
//
// Solidity: function wrapLocal(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout, string memo) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) WrapLocal1(opts *bind.TransactOpts, channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int, memo string) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "wrapLocal1", channel, localToken, receiver, localAmount, timeout, memo)
}

// WrapLocal1 is a paid mutator transaction binding the contract method 0xc59114c2.
//
// Solidity: function wrapLocal(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout, string memo) returns()
func (_Erc20Wrapper *Erc20WrapperSession) WrapLocal1(channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int, memo string) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.WrapLocal1(&_Erc20Wrapper.TransactOpts, channel, localToken, receiver, localAmount, timeout, memo)
}

// WrapLocal1 is a paid mutator transaction binding the contract method 0xc59114c2.
//
// Solidity: function wrapLocal(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout, string memo) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) WrapLocal1(channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int, memo string) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.WrapLocal1(&_Erc20Wrapper.TransactOpts, channel, localToken, receiver, localAmount, timeout, memo)
}

// WrapRemote is a paid mutator transaction binding the contract method 0x4e4681a1.
//
// Solidity: function wrapRemote(address receiver, string remoteDenom, uint8 _remoteDecimals) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) WrapRemote(opts *bind.TransactOpts, receiver common.Address, remoteDenom string, _remoteDecimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "wrapRemote", receiver, remoteDenom, _remoteDecimals)
}

// WrapRemote is a paid mutator transaction binding the contract method 0x4e4681a1.
//
// Solidity: function wrapRemote(address receiver, string remoteDenom, uint8 _remoteDecimals) returns()
func (_Erc20Wrapper *Erc20WrapperSession) WrapRemote(receiver common.Address, remoteDenom string, _remoteDecimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.WrapRemote(&_Erc20Wrapper.TransactOpts, receiver, remoteDenom, _remoteDecimals)
}

// WrapRemote is a paid mutator transaction binding the contract method 0x4e4681a1.
//
// Solidity: function wrapRemote(address receiver, string remoteDenom, uint8 _remoteDecimals) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) WrapRemote(receiver common.Address, remoteDenom string, _remoteDecimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.WrapRemote(&_Erc20Wrapper.TransactOpts, receiver, remoteDenom, _remoteDecimals)
}

// WrapRemote0 is a paid mutator transaction binding the contract method 0xdd4f77f0.
//
// Solidity: function wrapRemote(address receiver, string remoteDenom, uint256 remoteAmount, uint8 _remoteDecimals) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) WrapRemote0(opts *bind.TransactOpts, receiver common.Address, remoteDenom string, remoteAmount *big.Int, _remoteDecimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "wrapRemote0", receiver, remoteDenom, remoteAmount, _remoteDecimals)
}

// WrapRemote0 is a paid mutator transaction binding the contract method 0xdd4f77f0.
//
// Solidity: function wrapRemote(address receiver, string remoteDenom, uint256 remoteAmount, uint8 _remoteDecimals) returns()
func (_Erc20Wrapper *Erc20WrapperSession) WrapRemote0(receiver common.Address, remoteDenom string, remoteAmount *big.Int, _remoteDecimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.WrapRemote0(&_Erc20Wrapper.TransactOpts, receiver, remoteDenom, remoteAmount, _remoteDecimals)
}

// WrapRemote0 is a paid mutator transaction binding the contract method 0xdd4f77f0.
//
// Solidity: function wrapRemote(address receiver, string remoteDenom, uint256 remoteAmount, uint8 _remoteDecimals) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) WrapRemote0(receiver common.Address, remoteDenom string, remoteAmount *big.Int, _remoteDecimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.WrapRemote0(&_Erc20Wrapper.TransactOpts, receiver, remoteDenom, remoteAmount, _remoteDecimals)
}

// Erc20WrapperOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Erc20Wrapper contract.
type Erc20WrapperOwnershipTransferredIterator struct {
	Event *Erc20WrapperOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Erc20WrapperOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Erc20WrapperOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Erc20WrapperOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Erc20WrapperOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Erc20WrapperOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Erc20WrapperOwnershipTransferred represents a OwnershipTransferred event raised by the Erc20Wrapper contract.
type Erc20WrapperOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Erc20Wrapper *Erc20WrapperFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*Erc20WrapperOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Erc20Wrapper.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperOwnershipTransferredIterator{contract: _Erc20Wrapper.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Erc20Wrapper *Erc20WrapperFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *Erc20WrapperOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Erc20Wrapper.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Erc20WrapperOwnershipTransferred)
				if err := _Erc20Wrapper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Erc20Wrapper *Erc20WrapperFilterer) ParseOwnershipTransferred(log types.Log) (*Erc20WrapperOwnershipTransferred, error) {
	event := new(Erc20WrapperOwnershipTransferred)
	if err := _Erc20Wrapper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
