// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package erc20_wrapper

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// Erc20WrapperMetaData contains all meta data concerning the Erc20Wrapper contract.
var Erc20WrapperMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contractERC20Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"callback_id\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"ibc_ack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"callback_id\",\"type\":\"uint64\"}],\"name\":\"ibc_timeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"localTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"remoteDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"remoteTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"remoteDenom\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"remoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_remoteDecimals\",\"type\":\"uint8\"}],\"name\":\"toLocal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"remoteDenom\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_remoteDecimals\",\"type\":\"uint8\"}],\"name\":\"toLocal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"localDenom\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"}],\"name\":\"toRemote\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"remoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_remoteDecimals\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"localDenom\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"}],\"name\":\"toRemoteAndIBCTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"localDenom\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"}],\"name\":\"toRemoteAndIBCTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"localDenom\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"}],\"name\":\"toRemoteAndIBCTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"localDenom\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"}],\"name\":\"toRemoteAndOPWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"localDenom\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"}],\"name\":\"toRemoteAndOPWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040525f60055f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550348015610037575f80fd5b50604051614b0f380380614b0f8339818101604052810190610059919061013c565b335f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610167565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61010b826100e2565b9050919050565b61011b81610101565b8114610125575f80fd5b50565b5f8151905061013681610112565b92915050565b5f60208284031215610151576101506100de565b5b5f61015e84828501610128565b91505092915050565b61499b806101745f395ff3fe608060405234801561000f575f80fd5b5060043610610114575f3560e01c80635bb47808116100a0578063b9cf37421161006f578063b9cf3742146102d6578063c45a0155146102f2578063cf9ee0c314610310578063f2fde38b14610342578063f787cbdd1461035e57610114565b80635bb4780814610250578063701dcf211461026c5780638da5cb5b146102885780639f65ade5146102a657610114565b80631de5537c116100e75780631de5537c1461019c5780631efb51e6146101cc5780631efd1a84146101fc578063247219171461021857806331a503f01461023457610114565b806301ffc9a7146101185780630423d4d8146101485780630d4f1f9d146101645780631b75002214610180575b5f80fd5b610132600480360381019061012d9190612d30565b61037a565b60405161013f9190612d75565b60405180910390f35b610162600480360381019061015d9190612f3a565b6103e3565b005b61017e60048036038101906101799190613000565b610498565b005b61019a6004803603810190610195919061303e565b610519565b005b6101b660048036038101906101b191906131a5565b610764565b6040516101c391906131df565b60405180910390f35b6101e660048036038101906101e1919061322e565b610794565b6040516101f391906131df565b60405180910390f35b6102166004803603810190610211919061326c565b6107d1565b005b610232600480360381019061022d91906132ec565b610c8a565b005b61024e600480360381019061024991906133b7565b610cd8565b005b61026a600480360381019061026591906131a5565b610d52565b005b610286600480360381019061028191906133e2565b610e72565b005b610290610f7c565b60405161029d91906131df565b60405180910390f35b6102c060048036038101906102bb91906131a5565b610f9f565b6040516102cd919061345d565b60405180910390f35b6102f060048036038101906102eb9190613476565b610fbc565b005b6102fa610fd0565b6040516103079190613559565b60405180910390f35b61032a60048036038101906103259190613572565b610ff5565b604051610339939291906135ed565b60405180910390f35b61035c600480360381019061035791906131a5565b6114ec565b005b61037860048036038101906103739190613622565b611634565b005b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b5f806103f0308686610ff5565b50915091505f8103610403575050610492565b5f61040f87848461164e565b905060f173ffffffffffffffffffffffffffffffffffffffff166356c657a582866040518363ffffffff1660e01b815260040161044d92919061378a565b6020604051808303815f875af1158015610469573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061048d91906137cc565b505050505b50505050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610506576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fd90613867565b60405180910390fd5b80610515576105148261177d565b5b5050565b5f805f610527308b8b610ff5565b9250925092505f820361053c5750505061075b565b600160055f8282829054906101000a900467ffffffffffffffff1661056191906138b2565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060405180608001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018260ff1681525060065f60055f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015f6101000a81548160ff021916908360ff1602179055509050505f6106d78985858a8c8b611c80565b905060f173ffffffffffffffffffffffffffffffffffffffff166356c657a582876040518363ffffffff1660e01b815260040161071592919061378a565b6020604051808303815f875af1158015610731573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061075591906137cc565b50505050505b50505050505050565b6002602052805f5260405f205f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6004602052815f5260405f20602052805f5260405f205f915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f60f173ffffffffffffffffffffffffffffffffffffffff16632b3324ce856040518263ffffffff1660e01b815260040161080c91906138ed565b602060405180830381865afa158015610827573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061084b9190613921565b90506108578183611f12565b5f83036108645750610c84565b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108c4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108e89190613921565b73ffffffffffffffffffffffffffffffffffffffff1603610984578073ffffffffffffffffffffffffffffffffffffffff166379cc679033856040518363ffffffff1660e01b815260040161093e92919061394c565b6020604051808303815f875af115801561095a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061097e91906137cc565b50610a03565b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b81526004016109c193929190613973565b6020604051808303815f875af11580156109dd573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a0191906137cc565b505b5f60045f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8460ff1660ff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f8173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ac2573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ae691906139bc565b90505f610af4868684612348565b90503073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b56573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b7a9190613921565b73ffffffffffffffffffffffffffffffffffffffff1603610c02578273ffffffffffffffffffffffffffffffffffffffff166340c10f1989836040518363ffffffff1660e01b8152600401610bd092919061394c565b5f604051808303815f87803b158015610be7575f80fd5b505af1158015610bf9573d5f803e3d5ffd5b50505050610c7f565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb89836040518363ffffffff1660e01b8152600401610c3d92919061394c565b6020604051808303815f875af1158015610c59573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c7d91906137cc565b505b505050505b50505050565b610cd185858585856040518060400160405280600281526020017f7b7d0000000000000000000000000000000000000000000000000000000000008152506203d090610519565b5050505050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3d90613867565b60405180910390fd5b610d4f8161177d565b50565b600173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610dc1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db890613a31565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2690613a99565b60405180910390fd5b8060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b5f60f173ffffffffffffffffffffffffffffffffffffffff16632b3324ce846040518263ffffffff1660e01b8152600401610ead91906138ed565b602060405180830381865afa158015610ec8573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610eec9190613921565b90505f8173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610f2891906131df565b602060405180830381865afa158015610f43573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f679190613acb565b9050610f75858583866107d1565b5050505050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6003602052805f5260405f205f915054906101000a900460ff1681565b610fcb8383836203d0906103e3565b505050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f805f8060f173ffffffffffffffffffffffffffffffffffffffff16632b3324ce876040518263ffffffff1660e01b815260040161103391906138ed565b602060405180830381865afa15801561104e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110729190613921565b905061107d81612422565b60025f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16935060035f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1691505f850361113b57835f93509350506114e3565b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561119b573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111bf9190613921565b73ffffffffffffffffffffffffffffffffffffffff160361125b578073ffffffffffffffffffffffffffffffffffffffff166379cc679033876040518363ffffffff1660e01b815260040161121592919061394c565b6020604051808303815f875af1158015611231573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061125591906137cc565b506112da565b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b815260040161129893929190613973565b6020604051808303815f875af11580156112b4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112d891906137cc565b505b5f8173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611324573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061134891906139bc565b9050611355868285612348565b93503073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113b7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113db9190613921565b73ffffffffffffffffffffffffffffffffffffffff1603611463578473ffffffffffffffffffffffffffffffffffffffff166340c10f1989866040518363ffffffff1660e01b815260040161143192919061394c565b5f604051808303815f87803b158015611448575f80fd5b505af115801561145a573d5f803e3d5ffd5b505050506114e0565b8473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb89866040518363ffffffff1660e01b815260040161149e92919061394c565b6020604051808303815f875af11580156114ba573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114de91906137cc565b505b50505b93509350939050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611542575f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611579575f80fd5b8073ffffffffffffffffffffffffffffffffffffffff165f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3805f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6116468686868686866203d090610519565b505050505050565b606060f173ffffffffffffffffffffffffffffffffffffffff166381cf0f6a846040518263ffffffff1660e01b815260040161168a91906131df565b5f60405180830381865afa1580156116a4573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906116cc9190613b64565b6116d583612844565b60f173ffffffffffffffffffffffffffffffffffffffff16636af32a55306040518263ffffffff1660e01b815260040161170f91906131df565b5f60405180830381865afa158015611729573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906117519190613b64565b866040516020016117659493929190613dc7565b60405160208183030381529060405290509392505050565b5f60065f8367ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f206040518060800160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015f9054906101000a900460ff1660ff1660ff168152505090505f60045f836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f836060015160ff1660ff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361196a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196190613e90565b60405180910390fd5b5f6119ea836040015184606001518473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119c1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119e591906139bc565b612348565b90503073ffffffffffffffffffffffffffffffffffffffff16836020015173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a50573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a749190613921565b73ffffffffffffffffffffffffffffffffffffffff1603611b8157826020015173ffffffffffffffffffffffffffffffffffffffff166342966c6884604001516040518263ffffffff1660e01b8152600401611ad09190613eae565b5f604051808303815f87803b158015611ae7575f80fd5b505af1158015611af9573d5f803e3d5ffd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb845f0151836040518363ffffffff1660e01b8152600401611b3b92919061394c565b6020604051808303815f875af1158015611b57573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b7b91906137cc565b50611bed565b8173ffffffffffffffffffffffffffffffffffffffff166340c10f19845f0151836040518363ffffffff1660e01b8152600401611bbf92919061394c565b5f604051808303815f87803b158015611bd6575f80fd5b505af1158015611be8573d5f803e3d5ffd5b505050505b60065f8567ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f205f8082015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282015f9055600382015f6101000a81549060ff0219169055505050505050565b60605f611cab60055f9054906101000a900467ffffffffffffffff1667ffffffffffffffff16612844565b611cb43061290e565b604051602001611cc5929190613fcb565b60405160208183030381529060405290505f60f373ffffffffffffffffffffffffffffffffffffffff16635cc855e385846040518363ffffffff1660e01b8152600401611d1392919061400f565b5f60405180830381865afa158015611d2d573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190611d559190613b64565b90508860f173ffffffffffffffffffffffffffffffffffffffff166381cf0f6a8a6040518263ffffffff1660e01b8152600401611d9291906131df565b5f60405180830381865afa158015611dac573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190611dd49190613b64565b611ddd89612844565b60f173ffffffffffffffffffffffffffffffffffffffff16636af32a55306040518263ffffffff1660e01b8152600401611e1791906131df565b5f60405180830381865afa158015611e31573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190611e599190613b64565b88611e638b612844565b60f373ffffffffffffffffffffffffffffffffffffffff16638d5c8817886040518263ffffffff1660e01b8152600401611e9d91906138ed565b5f60405180830381865afa158015611eb7573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190611edf9190613b64565b604051602001611ef59796959493929190614478565b604051602081830303815290604052925050509695505050505050565b5f73ffffffffffffffffffffffffffffffffffffffff1660045f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8360ff1660ff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603612344575f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306ef1a866040518060400160405280600781526020017f57726170706564000000000000000000000000000000000000000000000000008152508573ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa158015612072573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f8201168201806040525081019061209a9190613b64565b6040516020016120ab929190614597565b6040516020818303038152906040526040518060400160405280600181526020017f57000000000000000000000000000000000000000000000000000000000000008152508673ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa158015612138573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906121609190613b64565b604051602001612171929190614597565b60405160208183030381529060405260126040518463ffffffff1660e01b81526004016121a0939291906145ba565b6020604051808303815f875af11580156121bc573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121e09190613921565b90508060045f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8460ff1660ff1681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908360ff160217905550505b5050565b5f8160ff168360ff1611156123d6575f828461236491906145fd565b60ff16600a6123739190614760565b90505f818661238291906147d7565b146123c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123b990614851565b60405180910390fd5b80856123ce919061486f565b91505061241b565b8160ff168360ff161015612416575f83836123f191906145fd565b60ff16600a6124009190614760565b9050808561240e919061489f565b91505061241a565b8390505b5b9392505050565b5f73ffffffffffffffffffffffffffffffffffffffff1660025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603612841575f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306ef1a866040518060400160405280600781526020017f57726170706564000000000000000000000000000000000000000000000000008152508473ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa15801561256d573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906125959190613b64565b6040516020016125a6929190614597565b6040516020818303038152906040526040518060400160405280600181526020017f57000000000000000000000000000000000000000000000000000000000000008152508573ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa158015612633573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f8201168201806040525081019061265b9190613b64565b60405160200161266c929190614597565b60405160208183030381529060405260066040518463ffffffff1660e01b815260040161269b939291906145ba565b6020604051808303815f875af11580156126b7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906126db9190613921565b90508060025f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600660035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908360ff1602179055508160045f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f600660ff1660ff1681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b50565b60605f60016128528461293b565b0190505f8167ffffffffffffffff8111156128705761286f612da6565b5b6040519080825280601f01601f1916602001820160405280156128a25781602001600182028036833780820191505090505b5090505f82602001820190505b600115612903578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816128f8576128f76147aa565b5b0494505f85036128af575b819350505050919050565b60606129348273ffffffffffffffffffffffffffffffffffffffff16601460ff16612a8c565b9050919050565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612997577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161298d5761298c6147aa565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106129d4576d04ee2d6d415b85acef810000000083816129ca576129c96147aa565b5b0492506020810190505b662386f26fc100008310612a0357662386f26fc1000083816129f9576129f86147aa565b5b0492506010810190505b6305f5e1008310612a2c576305f5e1008381612a2257612a216147aa565b5b0492506008810190505b6127108310612a51576127108381612a4757612a466147aa565b5b0492506004810190505b60648310612a745760648381612a6a57612a696147aa565b5b0492506002810190505b600a8310612a83576001810190505b80915050919050565b60605f8390505f6002846002612aa2919061489f565b612aac91906148e0565b67ffffffffffffffff811115612ac557612ac4612da6565b5b6040519080825280601f01601f191660200182016040528015612af75781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000815f81518110612b2e57612b2d614913565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612b9157612b90614913565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053505f6001856002612bcf919061489f565b612bd991906148e0565b90505b6001811115612c78577f3031323334353637383961626364656600000000000000000000000000000000600f841660108110612c1b57612c1a614913565b5b1a60f81b828281518110612c3257612c31614913565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350600483901c925080612c7190614940565b9050612bdc565b505f8214612cbf5784846040517fe22e27eb000000000000000000000000000000000000000000000000000000008152600401612cb6929190614967565b60405180910390fd5b809250505092915050565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612d0f81612cdb565b8114612d19575f80fd5b50565b5f81359050612d2a81612d06565b92915050565b5f60208284031215612d4557612d44612cd3565b5b5f612d5284828501612d1c565b91505092915050565b5f8115159050919050565b612d6f81612d5b565b82525050565b5f602082019050612d885f830184612d66565b92915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b612ddc82612d96565b810181811067ffffffffffffffff82111715612dfb57612dfa612da6565b5b80604052505050565b5f612e0d612cca565b9050612e198282612dd3565b919050565b5f67ffffffffffffffff821115612e3857612e37612da6565b5b612e4182612d96565b9050602081019050919050565b828183375f83830152505050565b5f612e6e612e6984612e1e565b612e04565b905082815260208101848484011115612e8a57612e89612d92565b5b612e95848285612e4e565b509392505050565b5f82601f830112612eb157612eb0612d8e565b5b8135612ec1848260208601612e5c565b91505092915050565b5f819050919050565b612edc81612eca565b8114612ee6575f80fd5b50565b5f81359050612ef781612ed3565b92915050565b5f67ffffffffffffffff82169050919050565b612f1981612efd565b8114612f23575f80fd5b50565b5f81359050612f3481612f10565b92915050565b5f805f8060808587031215612f5257612f51612cd3565b5b5f85013567ffffffffffffffff811115612f6f57612f6e612cd7565b5b612f7b87828801612e9d565b945050602085013567ffffffffffffffff811115612f9c57612f9b612cd7565b5b612fa887828801612e9d565b9350506040612fb987828801612ee9565b9250506060612fca87828801612f26565b91505092959194509250565b612fdf81612d5b565b8114612fe9575f80fd5b50565b5f81359050612ffa81612fd6565b92915050565b5f806040838503121561301657613015612cd3565b5b5f61302385828601612f26565b925050602061303485828601612fec565b9150509250929050565b5f805f805f805f60e0888a03121561305957613058612cd3565b5b5f88013567ffffffffffffffff81111561307657613075612cd7565b5b6130828a828b01612e9d565b97505060206130938a828b01612ee9565b965050604088013567ffffffffffffffff8111156130b4576130b3612cd7565b5b6130c08a828b01612e9d565b955050606088013567ffffffffffffffff8111156130e1576130e0612cd7565b5b6130ed8a828b01612e9d565b94505060806130fe8a828b01612ee9565b93505060a088013567ffffffffffffffff81111561311f5761311e612cd7565b5b61312b8a828b01612e9d565b92505060c061313c8a828b01612f26565b91505092959891949750929550565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6131748261314b565b9050919050565b6131848161316a565b811461318e575f80fd5b50565b5f8135905061319f8161317b565b92915050565b5f602082840312156131ba576131b9612cd3565b5b5f6131c784828501613191565b91505092915050565b6131d98161316a565b82525050565b5f6020820190506131f25f8301846131d0565b92915050565b5f60ff82169050919050565b61320d816131f8565b8114613217575f80fd5b50565b5f8135905061322881613204565b92915050565b5f806040838503121561324457613243612cd3565b5b5f61325185828601613191565b92505060206132628582860161321a565b9150509250929050565b5f805f806080858703121561328457613283612cd3565b5b5f61329187828801613191565b945050602085013567ffffffffffffffff8111156132b2576132b1612cd7565b5b6132be87828801612e9d565b93505060406132cf87828801612ee9565b92505060606132e08782880161321a565b91505092959194509250565b5f805f805f60a0868803121561330557613304612cd3565b5b5f86013567ffffffffffffffff81111561332257613321612cd7565b5b61332e88828901612e9d565b955050602061333f88828901612ee9565b945050604086013567ffffffffffffffff8111156133605761335f612cd7565b5b61336c88828901612e9d565b935050606086013567ffffffffffffffff81111561338d5761338c612cd7565b5b61339988828901612e9d565b92505060806133aa88828901612ee9565b9150509295509295909350565b5f602082840312156133cc576133cb612cd3565b5b5f6133d984828501612f26565b91505092915050565b5f805f606084860312156133f9576133f8612cd3565b5b5f61340686828701613191565b935050602084013567ffffffffffffffff81111561342757613426612cd7565b5b61343386828701612e9d565b92505060406134448682870161321a565b9150509250925092565b613457816131f8565b82525050565b5f6020820190506134705f83018461344e565b92915050565b5f805f6060848603121561348d5761348c612cd3565b5b5f84013567ffffffffffffffff8111156134aa576134a9612cd7565b5b6134b686828701612e9d565b935050602084013567ffffffffffffffff8111156134d7576134d6612cd7565b5b6134e386828701612e9d565b92505060406134f486828701612ee9565b9150509250925092565b5f819050919050565b5f61352161351c6135178461314b565b6134fe565b61314b565b9050919050565b5f61353282613507565b9050919050565b5f61354382613528565b9050919050565b61355381613539565b82525050565b5f60208201905061356c5f83018461354a565b92915050565b5f805f6060848603121561358957613588612cd3565b5b5f61359686828701613191565b935050602084013567ffffffffffffffff8111156135b7576135b6612cd7565b5b6135c386828701612e9d565b92505060406135d486828701612ee9565b9150509250925092565b6135e781612eca565b82525050565b5f6060820190506136005f8301866131d0565b61360d60208301856135de565b61361a604083018461344e565b949350505050565b5f805f805f8060c0878903121561363c5761363b612cd3565b5b5f87013567ffffffffffffffff81111561365957613658612cd7565b5b61366589828a01612e9d565b965050602061367689828a01612ee9565b955050604087013567ffffffffffffffff81111561369757613696612cd7565b5b6136a389828a01612e9d565b945050606087013567ffffffffffffffff8111156136c4576136c3612cd7565b5b6136d089828a01612e9d565b93505060806136e189828a01612ee9565b92505060a087013567ffffffffffffffff81111561370257613701612cd7565b5b61370e89828a01612e9d565b9150509295509295509295565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f61374d8261371b565b6137578185613725565b9350613767818560208601613735565b61377081612d96565b840191505092915050565b61378481612efd565b82525050565b5f6040820190508181035f8301526137a28185613743565b90506137b1602083018461377b565b9392505050565b5f815190506137c681612fd6565b92915050565b5f602082840312156137e1576137e0612cd3565b5b5f6137ee848285016137b8565b91505092915050565b7f6f6e6c792074686520636f6e747261637420697473656c662063616e2063616c5f8201527f6c20746869732066756e6374696f6e0000000000000000000000000000000000602082015250565b5f613851602f83613725565b915061385c826137f7565b604082019050919050565b5f6020820190508181035f83015261387e81613845565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6138bc82612efd565b91506138c783612efd565b9250828201905067ffffffffffffffff8111156138e7576138e6613885565b5b92915050565b5f6020820190508181035f8301526139058184613743565b905092915050565b5f8151905061391b8161317b565b92915050565b5f6020828403121561393657613935612cd3565b5b5f6139438482850161390d565b91505092915050565b5f60408201905061395f5f8301856131d0565b61396c60208301846135de565b9392505050565b5f6060820190506139865f8301866131d0565b61399360208301856131d0565b6139a060408301846135de565b949350505050565b5f815190506139b681613204565b92915050565b5f602082840312156139d1576139d0612cd3565b5b5f6139de848285016139a8565b91505092915050565b7f45524332303a2063616c6c6572206973206e6f742074686520636861696e00005f82015250565b5f613a1b601e83613725565b9150613a26826139e7565b602082019050919050565b5f6020820190508181035f830152613a4881613a0f565b9050919050565b7f696e76616c696420666163746f727920616464726573730000000000000000005f82015250565b5f613a83601783613725565b9150613a8e82613a4f565b602082019050919050565b5f6020820190508181035f830152613ab081613a77565b9050919050565b5f81519050613ac581612ed3565b92915050565b5f60208284031215613ae057613adf612cd3565b5b5f613aed84828501613ab7565b91505092915050565b5f613b08613b0384612e1e565b612e04565b905082815260208101848484011115613b2457613b23612d92565b5b613b2f848285613735565b509392505050565b5f82601f830112613b4b57613b4a612d8e565b5b8151613b5b848260208601613af6565b91505092915050565b5f60208284031215613b7957613b78612cd3565b5b5f82015167ffffffffffffffff811115613b9657613b95612cd7565b5b613ba284828501613b37565b91505092915050565b5f81905092915050565b7f7b224074797065223a20222f6f70696e69742e6f706368696c642e76312e4d735f8201527f67496e697469617465546f6b656e5769746864726177616c2200000000000000602082015250565b5f613c0f603983613bab565b9150613c1a82613bb5565b603982019050919050565b7f2c22616d6f756e74223a207b202264656e6f6d223a20220000000000000000005f82015250565b5f613c59601783613bab565b9150613c6482613c25565b601782019050919050565b5f613c798261371b565b613c838185613bab565b9350613c93818560208601613735565b80840191505092915050565b7f222c22616d6f756e74223a2022000000000000000000000000000000000000005f82015250565b5f613cd3600d83613bab565b9150613cde82613c9f565b600d82019050919050565b7f227d2c2273656e646572223a20220000000000000000000000000000000000005f82015250565b5f613d1d600e83613bab565b9150613d2882613ce9565b600e82019050919050565b7f222c22746f223a202200000000000000000000000000000000000000000000005f82015250565b5f613d67600983613bab565b9150613d7282613d33565b600982019050919050565b7f227d0000000000000000000000000000000000000000000000000000000000005f82015250565b5f613db1600283613bab565b9150613dbc82613d7d565b600282019050919050565b5f613dd182613c03565b9150613ddc82613c4d565b9150613de88287613c6f565b9150613df382613cc7565b9150613dff8286613c6f565b9150613e0a82613d11565b9150613e168285613c6f565b9150613e2182613d5b565b9150613e2d8284613c6f565b9150613e3882613da5565b915081905095945050505050565b7f6c6f63616c20746f6b656e20646f65736e2774206578697374000000000000005f82015250565b5f613e7a601983613725565b9150613e8582613e46565b602082019050919050565b5f6020820190508181035f830152613ea781613e6e565b9050919050565b5f602082019050613ec15f8301846135de565b92915050565b7f7b2265766d223a207b226173796e635f63616c6c6261636b223a207b226964225f8201527f3a20000000000000000000000000000000000000000000000000000000000000602082015250565b5f613f21602283613bab565b9150613f2c82613ec7565b602282019050919050565b7f2c22636f6e74726163745f61646472657373223a2200000000000000000000005f82015250565b5f613f6b601583613bab565b9150613f7682613f37565b601582019050919050565b7f227d7d7d000000000000000000000000000000000000000000000000000000005f82015250565b5f613fb5600483613bab565b9150613fc082613f81565b600482019050919050565b5f613fd582613f15565b9150613fe18285613c6f565b9150613fec82613f5f565b9150613ff88284613c6f565b915061400382613fa9565b91508190509392505050565b5f6040820190508181035f8301526140278185613743565b9050818103602083015261403b8184613743565b90509392505050565b7f7b224074797065223a20222f6962632e6170706c69636174696f6e732e7472615f8201527f6e736665722e76312e4d73675472616e73666572222c00000000000000000000602082015250565b5f61409e603683613bab565b91506140a982614044565b603682019050919050565b7f22736f757263655f706f7274223a20227472616e73666572222c0000000000005f82015250565b5f6140e8601a83613bab565b91506140f3826140b4565b601a82019050919050565b7f22736f757263655f6368616e6e656c223a2022000000000000000000000000005f82015250565b5f614132601383613bab565b915061413d826140fe565b601382019050919050565b7f222c0000000000000000000000000000000000000000000000000000000000005f82015250565b5f61417c600283613bab565b915061418782614148565b600282019050919050565b7f22746f6b656e223a207b202264656e6f6d223a202200000000000000000000005f82015250565b5f6141c6601583613bab565b91506141d182614192565b601582019050919050565b7f22616d6f756e74223a20220000000000000000000000000000000000000000005f82015250565b5f614210600b83613bab565b915061421b826141dc565b600b82019050919050565b7f227d2c00000000000000000000000000000000000000000000000000000000005f82015250565b5f61425a600383613bab565b915061426582614226565b600382019050919050565b7f2273656e646572223a20220000000000000000000000000000000000000000005f82015250565b5f6142a4600b83613bab565b91506142af82614270565b600b82019050919050565b7f227265636569766572223a2022000000000000000000000000000000000000005f82015250565b5f6142ee600d83613bab565b91506142f9826142ba565b600d82019050919050565b7f2274696d656f75745f686569676874223a207b227265766973696f6e5f6e756d5f8201527f626572223a202230222c227265766973696f6e5f686569676874223a2022302260208201527f7d2c000000000000000000000000000000000000000000000000000000000000604082015250565b5f614384604283613bab565b915061438f82614304565b604282019050919050565b7f2274696d656f75745f74696d657374616d70223a2022000000000000000000005f82015250565b5f6143ce601683613bab565b91506143d98261439a565b601682019050919050565b7f226d656d6f223a200000000000000000000000000000000000000000000000005f82015250565b5f614418600883613bab565b9150614423826143e4565b600882019050919050565b7f7d000000000000000000000000000000000000000000000000000000000000005f82015250565b5f614462600183613bab565b915061446d8261442e565b600182019050919050565b5f61448282614092565b915061448d826140dc565b915061449882614126565b91506144a4828a613c6f565b91506144af82614170565b91506144ba826141ba565b91506144c68289613c6f565b91506144d182614170565b91506144dc82614204565b91506144e88288613c6f565b91506144f38261424e565b91506144fe82614298565b915061450a8287613c6f565b915061451582614170565b9150614520826142e2565b915061452c8286613c6f565b915061453782614170565b915061454282614378565b915061454d826143c2565b91506145598285613c6f565b915061456482614170565b915061456f8261440c565b915061457b8284613c6f565b915061458682614456565b915081905098975050505050505050565b5f6145a28285613c6f565b91506145ae8284613c6f565b91508190509392505050565b5f6060820190508181035f8301526145d28186613743565b905081810360208301526145e68185613743565b90506145f5604083018461344e565b949350505050565b5f614607826131f8565b9150614612836131f8565b9250828203905060ff81111561462b5761462a613885565b5b92915050565b5f8160011c9050919050565b5f808291508390505b60018511156146865780860481111561466257614661613885565b5b60018516156146715780820291505b808102905061467f85614631565b9450614646565b94509492505050565b5f8261469e5760019050614759565b816146ab575f9050614759565b81600181146146c157600281146146cb576146fa565b6001915050614759565b60ff8411156146dd576146dc613885565b5b8360020a9150848211156146f4576146f3613885565b5b50614759565b5060208310610133831016604e8410600b841016171561472f5782820a90508381111561472a57614729613885565b5b614759565b61473c848484600161463d565b9250905081840481111561475357614752613885565b5b81810290505b9392505050565b5f61476a82612eca565b915061477583612eca565b92506147a27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461468f565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6147e182612eca565b91506147ec83612eca565b9250826147fc576147fb6147aa565b5b828206905092915050565b7f6475737420616d6f756e742073686f756c64206265207a65726f0000000000005f82015250565b5f61483b601a83613725565b915061484682614807565b602082019050919050565b5f6020820190508181035f8301526148688161482f565b9050919050565b5f61487982612eca565b915061488483612eca565b925082614894576148936147aa565b5b828204905092915050565b5f6148a982612eca565b91506148b483612eca565b92508282026148c281612eca565b915082820484148315176148d9576148d8613885565b5b5092915050565b5f6148ea82612eca565b91506148f583612eca565b925082820190508082111561490d5761490c613885565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f61494a82612eca565b91505f820361495c5761495b613885565b5b600182039050919050565b5f60408201905061497a5f8301856135de565b61498760208301846135de565b939250505056fea164736f6c6343000819000a",
}

// Erc20WrapperABI is the input ABI used to generate the binding from.
// Deprecated: Use Erc20WrapperMetaData.ABI instead.
var Erc20WrapperABI = Erc20WrapperMetaData.ABI

// Erc20WrapperBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use Erc20WrapperMetaData.Bin instead.
var Erc20WrapperBin = Erc20WrapperMetaData.Bin

// DeployErc20Wrapper deploys a new Ethereum contract, binding an instance of Erc20Wrapper to it.
func DeployErc20Wrapper(auth *bind.TransactOpts, backend bind.ContractBackend, erc20Factory common.Address) (common.Address, *types.Transaction, *Erc20Wrapper, error) {
	parsed, err := Erc20WrapperMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(Erc20WrapperBin), backend, erc20Factory)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Erc20Wrapper{Erc20WrapperCaller: Erc20WrapperCaller{contract: contract}, Erc20WrapperTransactor: Erc20WrapperTransactor{contract: contract}, Erc20WrapperFilterer: Erc20WrapperFilterer{contract: contract}}, nil
}

// Erc20Wrapper is an auto generated Go binding around an Ethereum contract.
type Erc20Wrapper struct {
	Erc20WrapperCaller     // Read-only binding to the contract
	Erc20WrapperTransactor // Write-only binding to the contract
	Erc20WrapperFilterer   // Log filterer for contract events
}

// Erc20WrapperCaller is an auto generated read-only Go binding around an Ethereum contract.
type Erc20WrapperCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Erc20WrapperTransactor is an auto generated write-only Go binding around an Ethereum contract.
type Erc20WrapperTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Erc20WrapperFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type Erc20WrapperFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Erc20WrapperSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type Erc20WrapperSession struct {
	Contract     *Erc20Wrapper     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// Erc20WrapperCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type Erc20WrapperCallerSession struct {
	Contract *Erc20WrapperCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// Erc20WrapperTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type Erc20WrapperTransactorSession struct {
	Contract     *Erc20WrapperTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// Erc20WrapperRaw is an auto generated low-level Go binding around an Ethereum contract.
type Erc20WrapperRaw struct {
	Contract *Erc20Wrapper // Generic contract binding to access the raw methods on
}

// Erc20WrapperCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type Erc20WrapperCallerRaw struct {
	Contract *Erc20WrapperCaller // Generic read-only contract binding to access the raw methods on
}

// Erc20WrapperTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type Erc20WrapperTransactorRaw struct {
	Contract *Erc20WrapperTransactor // Generic write-only contract binding to access the raw methods on
}

// NewErc20Wrapper creates a new instance of Erc20Wrapper, bound to a specific deployed contract.
func NewErc20Wrapper(address common.Address, backend bind.ContractBackend) (*Erc20Wrapper, error) {
	contract, err := bindErc20Wrapper(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Erc20Wrapper{Erc20WrapperCaller: Erc20WrapperCaller{contract: contract}, Erc20WrapperTransactor: Erc20WrapperTransactor{contract: contract}, Erc20WrapperFilterer: Erc20WrapperFilterer{contract: contract}}, nil
}

// NewErc20WrapperCaller creates a new read-only instance of Erc20Wrapper, bound to a specific deployed contract.
func NewErc20WrapperCaller(address common.Address, caller bind.ContractCaller) (*Erc20WrapperCaller, error) {
	contract, err := bindErc20Wrapper(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperCaller{contract: contract}, nil
}

// NewErc20WrapperTransactor creates a new write-only instance of Erc20Wrapper, bound to a specific deployed contract.
func NewErc20WrapperTransactor(address common.Address, transactor bind.ContractTransactor) (*Erc20WrapperTransactor, error) {
	contract, err := bindErc20Wrapper(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperTransactor{contract: contract}, nil
}

// NewErc20WrapperFilterer creates a new log filterer instance of Erc20Wrapper, bound to a specific deployed contract.
func NewErc20WrapperFilterer(address common.Address, filterer bind.ContractFilterer) (*Erc20WrapperFilterer, error) {
	contract, err := bindErc20Wrapper(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperFilterer{contract: contract}, nil
}

// bindErc20Wrapper binds a generic wrapper to an already deployed contract.
func bindErc20Wrapper(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := Erc20WrapperMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Erc20Wrapper *Erc20WrapperRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Erc20Wrapper.Contract.Erc20WrapperCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Erc20Wrapper *Erc20WrapperRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.Erc20WrapperTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Erc20Wrapper *Erc20WrapperRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.Erc20WrapperTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Erc20Wrapper *Erc20WrapperCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Erc20Wrapper.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Erc20Wrapper *Erc20WrapperTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Erc20Wrapper *Erc20WrapperTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.contract.Transact(opts, method, params...)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) Factory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "factory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) Factory() (common.Address, error) {
	return _Erc20Wrapper.Contract.Factory(&_Erc20Wrapper.CallOpts)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) Factory() (common.Address, error) {
	return _Erc20Wrapper.Contract.Factory(&_Erc20Wrapper.CallOpts)
}

// LocalTokens is a free data retrieval call binding the contract method 0x1efb51e6.
//
// Solidity: function localTokens(address , uint8 ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) LocalTokens(opts *bind.CallOpts, arg0 common.Address, arg1 uint8) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "localTokens", arg0, arg1)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LocalTokens is a free data retrieval call binding the contract method 0x1efb51e6.
//
// Solidity: function localTokens(address , uint8 ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) LocalTokens(arg0 common.Address, arg1 uint8) (common.Address, error) {
	return _Erc20Wrapper.Contract.LocalTokens(&_Erc20Wrapper.CallOpts, arg0, arg1)
}

// LocalTokens is a free data retrieval call binding the contract method 0x1efb51e6.
//
// Solidity: function localTokens(address , uint8 ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) LocalTokens(arg0 common.Address, arg1 uint8) (common.Address, error) {
	return _Erc20Wrapper.Contract.LocalTokens(&_Erc20Wrapper.CallOpts, arg0, arg1)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) Owner() (common.Address, error) {
	return _Erc20Wrapper.Contract.Owner(&_Erc20Wrapper.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) Owner() (common.Address, error) {
	return _Erc20Wrapper.Contract.Owner(&_Erc20Wrapper.CallOpts)
}

// RemoteDecimals is a free data retrieval call binding the contract method 0x9f65ade5.
//
// Solidity: function remoteDecimals(address ) view returns(uint8)
func (_Erc20Wrapper *Erc20WrapperCaller) RemoteDecimals(opts *bind.CallOpts, arg0 common.Address) (uint8, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "remoteDecimals", arg0)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// RemoteDecimals is a free data retrieval call binding the contract method 0x9f65ade5.
//
// Solidity: function remoteDecimals(address ) view returns(uint8)
func (_Erc20Wrapper *Erc20WrapperSession) RemoteDecimals(arg0 common.Address) (uint8, error) {
	return _Erc20Wrapper.Contract.RemoteDecimals(&_Erc20Wrapper.CallOpts, arg0)
}

// RemoteDecimals is a free data retrieval call binding the contract method 0x9f65ade5.
//
// Solidity: function remoteDecimals(address ) view returns(uint8)
func (_Erc20Wrapper *Erc20WrapperCallerSession) RemoteDecimals(arg0 common.Address) (uint8, error) {
	return _Erc20Wrapper.Contract.RemoteDecimals(&_Erc20Wrapper.CallOpts, arg0)
}

// RemoteTokens is a free data retrieval call binding the contract method 0x1de5537c.
//
// Solidity: function remoteTokens(address ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) RemoteTokens(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "remoteTokens", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RemoteTokens is a free data retrieval call binding the contract method 0x1de5537c.
//
// Solidity: function remoteTokens(address ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) RemoteTokens(arg0 common.Address) (common.Address, error) {
	return _Erc20Wrapper.Contract.RemoteTokens(&_Erc20Wrapper.CallOpts, arg0)
}

// RemoteTokens is a free data retrieval call binding the contract method 0x1de5537c.
//
// Solidity: function remoteTokens(address ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) RemoteTokens(arg0 common.Address) (common.Address, error) {
	return _Erc20Wrapper.Contract.RemoteTokens(&_Erc20Wrapper.CallOpts, arg0)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Erc20Wrapper *Erc20WrapperCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Erc20Wrapper *Erc20WrapperSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Erc20Wrapper.Contract.SupportsInterface(&_Erc20Wrapper.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Erc20Wrapper *Erc20WrapperCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Erc20Wrapper.Contract.SupportsInterface(&_Erc20Wrapper.CallOpts, interfaceId)
}

// IbcAck is a paid mutator transaction binding the contract method 0x0d4f1f9d.
//
// Solidity: function ibc_ack(uint64 callback_id, bool success) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) IbcAck(opts *bind.TransactOpts, callback_id uint64, success bool) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "ibc_ack", callback_id, success)
}

// IbcAck is a paid mutator transaction binding the contract method 0x0d4f1f9d.
//
// Solidity: function ibc_ack(uint64 callback_id, bool success) returns()
func (_Erc20Wrapper *Erc20WrapperSession) IbcAck(callback_id uint64, success bool) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.IbcAck(&_Erc20Wrapper.TransactOpts, callback_id, success)
}

// IbcAck is a paid mutator transaction binding the contract method 0x0d4f1f9d.
//
// Solidity: function ibc_ack(uint64 callback_id, bool success) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) IbcAck(callback_id uint64, success bool) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.IbcAck(&_Erc20Wrapper.TransactOpts, callback_id, success)
}

// IbcTimeout is a paid mutator transaction binding the contract method 0x31a503f0.
//
// Solidity: function ibc_timeout(uint64 callback_id) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) IbcTimeout(opts *bind.TransactOpts, callback_id uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "ibc_timeout", callback_id)
}

// IbcTimeout is a paid mutator transaction binding the contract method 0x31a503f0.
//
// Solidity: function ibc_timeout(uint64 callback_id) returns()
func (_Erc20Wrapper *Erc20WrapperSession) IbcTimeout(callback_id uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.IbcTimeout(&_Erc20Wrapper.TransactOpts, callback_id)
}

// IbcTimeout is a paid mutator transaction binding the contract method 0x31a503f0.
//
// Solidity: function ibc_timeout(uint64 callback_id) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) IbcTimeout(callback_id uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.IbcTimeout(&_Erc20Wrapper.TransactOpts, callback_id)
}

// SetFactory is a paid mutator transaction binding the contract method 0x5bb47808.
//
// Solidity: function setFactory(address newFactory) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) SetFactory(opts *bind.TransactOpts, newFactory common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "setFactory", newFactory)
}

// SetFactory is a paid mutator transaction binding the contract method 0x5bb47808.
//
// Solidity: function setFactory(address newFactory) returns()
func (_Erc20Wrapper *Erc20WrapperSession) SetFactory(newFactory common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.SetFactory(&_Erc20Wrapper.TransactOpts, newFactory)
}

// SetFactory is a paid mutator transaction binding the contract method 0x5bb47808.
//
// Solidity: function setFactory(address newFactory) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) SetFactory(newFactory common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.SetFactory(&_Erc20Wrapper.TransactOpts, newFactory)
}

// ToLocal is a paid mutator transaction binding the contract method 0x1efd1a84.
//
// Solidity: function toLocal(address receiver, string remoteDenom, uint256 remoteAmount, uint8 _remoteDecimals) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) ToLocal(opts *bind.TransactOpts, receiver common.Address, remoteDenom string, remoteAmount *big.Int, _remoteDecimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "toLocal", receiver, remoteDenom, remoteAmount, _remoteDecimals)
}

// ToLocal is a paid mutator transaction binding the contract method 0x1efd1a84.
//
// Solidity: function toLocal(address receiver, string remoteDenom, uint256 remoteAmount, uint8 _remoteDecimals) returns()
func (_Erc20Wrapper *Erc20WrapperSession) ToLocal(receiver common.Address, remoteDenom string, remoteAmount *big.Int, _remoteDecimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToLocal(&_Erc20Wrapper.TransactOpts, receiver, remoteDenom, remoteAmount, _remoteDecimals)
}

// ToLocal is a paid mutator transaction binding the contract method 0x1efd1a84.
//
// Solidity: function toLocal(address receiver, string remoteDenom, uint256 remoteAmount, uint8 _remoteDecimals) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) ToLocal(receiver common.Address, remoteDenom string, remoteAmount *big.Int, _remoteDecimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToLocal(&_Erc20Wrapper.TransactOpts, receiver, remoteDenom, remoteAmount, _remoteDecimals)
}

// ToLocal0 is a paid mutator transaction binding the contract method 0x701dcf21.
//
// Solidity: function toLocal(address receiver, string remoteDenom, uint8 _remoteDecimals) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) ToLocal0(opts *bind.TransactOpts, receiver common.Address, remoteDenom string, _remoteDecimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "toLocal0", receiver, remoteDenom, _remoteDecimals)
}

// ToLocal0 is a paid mutator transaction binding the contract method 0x701dcf21.
//
// Solidity: function toLocal(address receiver, string remoteDenom, uint8 _remoteDecimals) returns()
func (_Erc20Wrapper *Erc20WrapperSession) ToLocal0(receiver common.Address, remoteDenom string, _remoteDecimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToLocal0(&_Erc20Wrapper.TransactOpts, receiver, remoteDenom, _remoteDecimals)
}

// ToLocal0 is a paid mutator transaction binding the contract method 0x701dcf21.
//
// Solidity: function toLocal(address receiver, string remoteDenom, uint8 _remoteDecimals) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) ToLocal0(receiver common.Address, remoteDenom string, _remoteDecimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToLocal0(&_Erc20Wrapper.TransactOpts, receiver, remoteDenom, _remoteDecimals)
}

// ToRemote is a paid mutator transaction binding the contract method 0xcf9ee0c3.
//
// Solidity: function toRemote(address receiver, string localDenom, uint256 localAmount) returns(address remoteToken, uint256 remoteAmount, uint8 _remoteDecimals)
func (_Erc20Wrapper *Erc20WrapperTransactor) ToRemote(opts *bind.TransactOpts, receiver common.Address, localDenom string, localAmount *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "toRemote", receiver, localDenom, localAmount)
}

// ToRemote is a paid mutator transaction binding the contract method 0xcf9ee0c3.
//
// Solidity: function toRemote(address receiver, string localDenom, uint256 localAmount) returns(address remoteToken, uint256 remoteAmount, uint8 _remoteDecimals)
func (_Erc20Wrapper *Erc20WrapperSession) ToRemote(receiver common.Address, localDenom string, localAmount *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemote(&_Erc20Wrapper.TransactOpts, receiver, localDenom, localAmount)
}

// ToRemote is a paid mutator transaction binding the contract method 0xcf9ee0c3.
//
// Solidity: function toRemote(address receiver, string localDenom, uint256 localAmount) returns(address remoteToken, uint256 remoteAmount, uint8 _remoteDecimals)
func (_Erc20Wrapper *Erc20WrapperTransactorSession) ToRemote(receiver common.Address, localDenom string, localAmount *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemote(&_Erc20Wrapper.TransactOpts, receiver, localDenom, localAmount)
}

// ToRemoteAndIBCTransfer is a paid mutator transaction binding the contract method 0x1b750022.
//
// Solidity: function toRemoteAndIBCTransfer(string localDenom, uint256 localAmount, string channel, string receiver, uint256 timeout, string memo, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) ToRemoteAndIBCTransfer(opts *bind.TransactOpts, localDenom string, localAmount *big.Int, channel string, receiver string, timeout *big.Int, memo string, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "toRemoteAndIBCTransfer", localDenom, localAmount, channel, receiver, timeout, memo, gasLimit)
}

// ToRemoteAndIBCTransfer is a paid mutator transaction binding the contract method 0x1b750022.
//
// Solidity: function toRemoteAndIBCTransfer(string localDenom, uint256 localAmount, string channel, string receiver, uint256 timeout, string memo, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperSession) ToRemoteAndIBCTransfer(localDenom string, localAmount *big.Int, channel string, receiver string, timeout *big.Int, memo string, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndIBCTransfer(&_Erc20Wrapper.TransactOpts, localDenom, localAmount, channel, receiver, timeout, memo, gasLimit)
}

// ToRemoteAndIBCTransfer is a paid mutator transaction binding the contract method 0x1b750022.
//
// Solidity: function toRemoteAndIBCTransfer(string localDenom, uint256 localAmount, string channel, string receiver, uint256 timeout, string memo, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) ToRemoteAndIBCTransfer(localDenom string, localAmount *big.Int, channel string, receiver string, timeout *big.Int, memo string, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndIBCTransfer(&_Erc20Wrapper.TransactOpts, localDenom, localAmount, channel, receiver, timeout, memo, gasLimit)
}

// ToRemoteAndIBCTransfer0 is a paid mutator transaction binding the contract method 0x24721917.
//
// Solidity: function toRemoteAndIBCTransfer(string localDenom, uint256 localAmount, string channel, string receiver, uint256 timeout) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) ToRemoteAndIBCTransfer0(opts *bind.TransactOpts, localDenom string, localAmount *big.Int, channel string, receiver string, timeout *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "toRemoteAndIBCTransfer0", localDenom, localAmount, channel, receiver, timeout)
}

// ToRemoteAndIBCTransfer0 is a paid mutator transaction binding the contract method 0x24721917.
//
// Solidity: function toRemoteAndIBCTransfer(string localDenom, uint256 localAmount, string channel, string receiver, uint256 timeout) returns()
func (_Erc20Wrapper *Erc20WrapperSession) ToRemoteAndIBCTransfer0(localDenom string, localAmount *big.Int, channel string, receiver string, timeout *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndIBCTransfer0(&_Erc20Wrapper.TransactOpts, localDenom, localAmount, channel, receiver, timeout)
}

// ToRemoteAndIBCTransfer0 is a paid mutator transaction binding the contract method 0x24721917.
//
// Solidity: function toRemoteAndIBCTransfer(string localDenom, uint256 localAmount, string channel, string receiver, uint256 timeout) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) ToRemoteAndIBCTransfer0(localDenom string, localAmount *big.Int, channel string, receiver string, timeout *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndIBCTransfer0(&_Erc20Wrapper.TransactOpts, localDenom, localAmount, channel, receiver, timeout)
}

// ToRemoteAndIBCTransfer1 is a paid mutator transaction binding the contract method 0xf787cbdd.
//
// Solidity: function toRemoteAndIBCTransfer(string localDenom, uint256 localAmount, string channel, string receiver, uint256 timeout, string memo) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) ToRemoteAndIBCTransfer1(opts *bind.TransactOpts, localDenom string, localAmount *big.Int, channel string, receiver string, timeout *big.Int, memo string) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "toRemoteAndIBCTransfer1", localDenom, localAmount, channel, receiver, timeout, memo)
}

// ToRemoteAndIBCTransfer1 is a paid mutator transaction binding the contract method 0xf787cbdd.
//
// Solidity: function toRemoteAndIBCTransfer(string localDenom, uint256 localAmount, string channel, string receiver, uint256 timeout, string memo) returns()
func (_Erc20Wrapper *Erc20WrapperSession) ToRemoteAndIBCTransfer1(localDenom string, localAmount *big.Int, channel string, receiver string, timeout *big.Int, memo string) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndIBCTransfer1(&_Erc20Wrapper.TransactOpts, localDenom, localAmount, channel, receiver, timeout, memo)
}

// ToRemoteAndIBCTransfer1 is a paid mutator transaction binding the contract method 0xf787cbdd.
//
// Solidity: function toRemoteAndIBCTransfer(string localDenom, uint256 localAmount, string channel, string receiver, uint256 timeout, string memo) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) ToRemoteAndIBCTransfer1(localDenom string, localAmount *big.Int, channel string, receiver string, timeout *big.Int, memo string) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndIBCTransfer1(&_Erc20Wrapper.TransactOpts, localDenom, localAmount, channel, receiver, timeout, memo)
}

// ToRemoteAndOPWithdraw is a paid mutator transaction binding the contract method 0x0423d4d8.
//
// Solidity: function toRemoteAndOPWithdraw(string receiver, string localDenom, uint256 localAmount, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) ToRemoteAndOPWithdraw(opts *bind.TransactOpts, receiver string, localDenom string, localAmount *big.Int, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "toRemoteAndOPWithdraw", receiver, localDenom, localAmount, gasLimit)
}

// ToRemoteAndOPWithdraw is a paid mutator transaction binding the contract method 0x0423d4d8.
//
// Solidity: function toRemoteAndOPWithdraw(string receiver, string localDenom, uint256 localAmount, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperSession) ToRemoteAndOPWithdraw(receiver string, localDenom string, localAmount *big.Int, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndOPWithdraw(&_Erc20Wrapper.TransactOpts, receiver, localDenom, localAmount, gasLimit)
}

// ToRemoteAndOPWithdraw is a paid mutator transaction binding the contract method 0x0423d4d8.
//
// Solidity: function toRemoteAndOPWithdraw(string receiver, string localDenom, uint256 localAmount, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) ToRemoteAndOPWithdraw(receiver string, localDenom string, localAmount *big.Int, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndOPWithdraw(&_Erc20Wrapper.TransactOpts, receiver, localDenom, localAmount, gasLimit)
}

// ToRemoteAndOPWithdraw0 is a paid mutator transaction binding the contract method 0xb9cf3742.
//
// Solidity: function toRemoteAndOPWithdraw(string receiver, string localDenom, uint256 localAmount) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) ToRemoteAndOPWithdraw0(opts *bind.TransactOpts, receiver string, localDenom string, localAmount *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "toRemoteAndOPWithdraw0", receiver, localDenom, localAmount)
}

// ToRemoteAndOPWithdraw0 is a paid mutator transaction binding the contract method 0xb9cf3742.
//
// Solidity: function toRemoteAndOPWithdraw(string receiver, string localDenom, uint256 localAmount) returns()
func (_Erc20Wrapper *Erc20WrapperSession) ToRemoteAndOPWithdraw0(receiver string, localDenom string, localAmount *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndOPWithdraw0(&_Erc20Wrapper.TransactOpts, receiver, localDenom, localAmount)
}

// ToRemoteAndOPWithdraw0 is a paid mutator transaction binding the contract method 0xb9cf3742.
//
// Solidity: function toRemoteAndOPWithdraw(string receiver, string localDenom, uint256 localAmount) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) ToRemoteAndOPWithdraw0(receiver string, localDenom string, localAmount *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndOPWithdraw0(&_Erc20Wrapper.TransactOpts, receiver, localDenom, localAmount)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Erc20Wrapper *Erc20WrapperSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.TransferOwnership(&_Erc20Wrapper.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.TransferOwnership(&_Erc20Wrapper.TransactOpts, newOwner)
}

// Erc20WrapperOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Erc20Wrapper contract.
type Erc20WrapperOwnershipTransferredIterator struct {
	Event *Erc20WrapperOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Erc20WrapperOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Erc20WrapperOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Erc20WrapperOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Erc20WrapperOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Erc20WrapperOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Erc20WrapperOwnershipTransferred represents a OwnershipTransferred event raised by the Erc20Wrapper contract.
type Erc20WrapperOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Erc20Wrapper *Erc20WrapperFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*Erc20WrapperOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Erc20Wrapper.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperOwnershipTransferredIterator{contract: _Erc20Wrapper.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Erc20Wrapper *Erc20WrapperFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *Erc20WrapperOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Erc20Wrapper.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Erc20WrapperOwnershipTransferred)
				if err := _Erc20Wrapper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Erc20Wrapper *Erc20WrapperFilterer) ParseOwnershipTransferred(log types.Log) (*Erc20WrapperOwnershipTransferred, error) {
	event := new(Erc20WrapperOwnershipTransferred)
	if err := _Erc20Wrapper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
