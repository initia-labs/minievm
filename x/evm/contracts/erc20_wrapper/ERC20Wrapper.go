// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package erc20_wrapper

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// Erc20WrapperMetaData contains all meta data concerning the Erc20Wrapper contract.
var Erc20WrapperMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contractERC20Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"callback_id\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"ibc_ack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"callback_id\",\"type\":\"uint64\"}],\"name\":\"ibc_timeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"localTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"remoteDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"remoteTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"remoteDenom\",\"type\":\"string\"}],\"name\":\"unwrapLocal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"remoteDenom\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"remoteAmount\",\"type\":\"uint256\"}],\"name\":\"unwrapLocal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"localToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"}],\"name\":\"unwrapRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"localToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"}],\"name\":\"unwrapRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"localToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"}],\"name\":\"unwrapRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"localToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"}],\"name\":\"wrapLocal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"localToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"}],\"name\":\"wrapLocal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"localToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"}],\"name\":\"wrapLocal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"remoteDenom\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"remoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_remoteDecimals\",\"type\":\"uint8\"}],\"name\":\"wrapRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040525f8060146101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550348015610037575f80fd5b50604051614a98380380614a988339818101604052810190610059919061013c565b335f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610167565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61010b826100e2565b9050919050565b61011b81610101565b8114610125575f80fd5b50565b5f8151905061013681610112565b92915050565b5f60208284031215610151576101506100de565b5b5f61015e84828501610128565b91505092915050565b614924806101745f395ff3fe608060405234801561000f575f80fd5b506004361061011f575f3560e01c80638da5cb5b116100ab578063c59114c21161006f578063c59114c2146102ff578063d96e6e911461031b578063dd4f77f014610337578063e1d015f214610353578063f2fde38b1461036f5761011f565b80638da5cb5b1461025b5780639c9d6057146102795780639f65ade514610295578063a9dff95b146102c5578063c45a0155146102e15761011f565b80631de5537c116100f25780631de5537c146101a75780631efb51e6146101d757806331a503f0146102075780635bb47808146102235780635e7faa551461023f5761011f565b806301ffc9a71461012357806305f1f68e146101535780630d4f1f9d1461016f5780630f8667821461018b575b5f80fd5b61013d60048036038101906101389190612fbf565b61038b565b60405161014a9190613004565b60405180910390f35b61016d600480360381019061016891906131b3565b6103f4565b005b61018960048036038101906101849190613274565b6105e3565b005b6101a560048036038101906101a091906132e5565b610664565b005b6101c160048036038101906101bc9190613394565b6106ae565b6040516101ce91906133ce565b60405180910390f35b6101f160048036038101906101ec919061341d565b6106de565b6040516101fe91906133ce565b60405180910390f35b610221600480360381019061021c919061345b565b61071b565b005b61023d60048036038101906102389190613394565b610795565b005b61025960048036038101906102549190613486565b6108b5565b005b610263610d3f565b60405161027091906133ce565b60405180910390f35b610293600480360381019061028e9190613577565b610d62565b005b6102af60048036038101906102aa9190613394565b610d7c565b6040516102bc9190613663565b60405180910390f35b6102df60048036038101906102da91906132e5565b610d99565b005b6102e9610de3565b6040516102f691906136d7565b60405180910390f35b61031960048036038101906103149190613577565b610e08565b005b610335600480360381019061033091906136f0565b610e22565b005b610351600480360381019061034c919061375c565b610f96565b005b61036d60048036038101906103689190613486565b61118f565b005b61038960048036038101906103849190613394565b6111a7565b005b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b5f60f173ffffffffffffffffffffffffffffffffffffffff16632b3324ce836040518263ffffffff1660e01b815260040161042f919061383c565b602060405180830381865afa15801561044a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061046e9190613870565b90505f60055f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f600660ff1660ff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610554576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054b906138e5565b60405180910390fd5b5f8273ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161058e91906133ce565b602060405180830381865afa1580156105a9573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105cd9190613917565b90506105dc83833388856112ef565b5050505050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610651576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610648906139b2565b60405180910390fd5b806106605761065f8261146a565b5b5050565b6106a785858585856040518060400160405280600281526020017f7b7d000000000000000000000000000000000000000000000000000000000000815250610d62565b5050505050565b6002602052805f5260405f205f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6005602052815f5260405f20602052805f5260405f205f915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610789576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610780906139b2565b60405180910390fd5b6107928161146a565b50565b600173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610804576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fb90613a1a565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610872576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086990613a82565b60405180910390fd5b8060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6108be86611903565b8573ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b81526004016108fb93929190613aaf565b6020604051808303815f875af1158015610917573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061093b9190613af8565b505f6109b5858873ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561098a573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109ae9190613b37565b6006611d25565b90505f60025f8973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f8173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a61573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a859190613b37565b90508173ffffffffffffffffffffffffffffffffffffffff166340c10f1930856040518363ffffffff1660e01b8152600401610ac2929190613b62565b5f604051808303815f87803b158015610ad9575f80fd5b505af1158015610aeb573d5f803e3d5ffd5b5050505060015f60148282829054906101000a900467ffffffffffffffff16610b149190613bb6565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018260ff1681526020016001151581525060045f8060149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015f6101000a81548160ff021916908360ff16021790555060808201518160030160016101000a81548160ff0219169083151502179055509050505f610cb38b84868a8d8b611e41565b905060f173ffffffffffffffffffffffffffffffffffffffff166356c657a582876040518363ffffffff1660e01b8152600401610cf1929190613c00565b6020604051808303815f875af1158015610d0d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d319190613af8565b505050505050505050505050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610d748686868686866203d09061118f565b505050505050565b6003602052805f5260405f205f915054906101000a900460ff1681565b610ddc85858585856040518060400160405280600281526020017f7b7d000000000000000000000000000000000000000000000000000000000000815250610e08565b5050505050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610e1a8686868686866203d0906108b5565b505050505050565b5f60f173ffffffffffffffffffffffffffffffffffffffff16632b3324ce846040518263ffffffff1660e01b8152600401610e5d919061383c565b602060405180830381865afa158015610e78573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e9c9190613870565b90505f60055f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f600660ff1660ff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610f82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f79906138e5565b60405180910390fd5b610f8f82823388876112ef565b5050505050565b5f60f173ffffffffffffffffffffffffffffffffffffffff16632b3324ce856040518263ffffffff1660e01b8152600401610fd1919061383c565b602060405180830381865afa158015610fec573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110109190613870565b905061101c81836121c9565b5f60055f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8460ff1660ff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b81526004016110ce93929190613aaf565b6020604051808303815f875af11580156110ea573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061110e9190613af8565b505f61111c85856012611d25565b90508173ffffffffffffffffffffffffffffffffffffffff166340c10f1988836040518363ffffffff1660e01b8152600401611159929190613b62565b5f604051808303815f87803b158015611170575f80fd5b505af1158015611182573d5f803e3d5ffd5b5050505050505050505050565b61119e878787878787876125ff565b50505050505050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111fd575f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611234575f80fd5b8073ffffffffffffffffffffffffffffffffffffffff165f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3805f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b8473ffffffffffffffffffffffffffffffffffffffff166379cc679084836040518363ffffffff1660e01b815260040161132a929190613b62565b6020604051808303815f875af1158015611346573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061136a9190613af8565b505f6113e48260068773ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113bb573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113df9190613b37565b611d25565b90508473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff1660e01b8152600401611421929190613b62565b6020604051808303815f875af115801561143d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114619190613af8565b50505050505050565b5f60045f8367ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f206040518060a00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015f9054906101000a900460ff1660ff1660ff1681526020016003820160019054906101000a900460ff16151515158152505090505f60055f836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f836060015160ff1660ff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611672576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611669906138e5565b60405180910390fd5b5f6116f2836040015184606001518473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116c9573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116ed9190613b37565b611d25565b90508260800151156117f057826020015173ffffffffffffffffffffffffffffffffffffffff166342966c6884604001516040518263ffffffff1660e01b815260040161173f9190613c2e565b5f604051808303815f87803b158015611756575f80fd5b505af1158015611768573d5f803e3d5ffd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb845f0151836040518363ffffffff1660e01b81526004016117aa929190613b62565b6020604051808303815f875af11580156117c6573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906117ea9190613af8565b5061185c565b8173ffffffffffffffffffffffffffffffffffffffff166340c10f19845f0151836040518363ffffffff1660e01b815260040161182e929190613b62565b5f604051808303815f87803b158015611845575f80fd5b505af1158015611857573d5f803e3d5ffd5b505050505b60045f8567ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f205f8082015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282015f9055600382015f6101000a81549060ff02191690556003820160016101000a81549060ff0219169055505050505050565b5f73ffffffffffffffffffffffffffffffffffffffff1660025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611d22575f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306ef1a866040518060400160405280600781526020017f57726170706564000000000000000000000000000000000000000000000000008152508473ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa158015611a4e573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190611a769190613cb5565b604051602001611a87929190613d36565b6040516020818303038152906040526040518060400160405280600181526020017f57000000000000000000000000000000000000000000000000000000000000008152508573ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa158015611b14573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190611b3c9190613cb5565b604051602001611b4d929190613d36565b60405160208183030381529060405260066040518463ffffffff1660e01b8152600401611b7c93929190613d59565b6020604051808303815f875af1158015611b98573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611bbc9190613870565b90508060025f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600660035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908360ff1602179055508160055f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f600660ff1660ff1681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b50565b5f8160ff168360ff161115611db3575f8284611d419190613d9c565b60ff16600a611d509190613eff565b90505f8186611d5f9190613f76565b14611d9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d9690613ff0565b60405180910390fd5b8085611dab919061400e565b915050611df8565b8160ff168360ff161015611df3575f8383611dce9190613d9c565b60ff16600a611ddd9190613eff565b90508085611deb919061403e565b915050611df7565b8390505b5b5f8103611e3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e31906140c9565b60405180910390fd5b9392505050565b60605f611e6c5f60149054906101000a900467ffffffffffffffff1667ffffffffffffffff16612ad3565b611e7530612b9d565b604051602001611e869291906141eb565b60405160208183030381529060405290505f60f373ffffffffffffffffffffffffffffffffffffffff16635cc855e385846040518363ffffffff1660e01b8152600401611ed492919061422f565b5f60405180830381865afa158015611eee573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190611f169190613cb5565b905060f373ffffffffffffffffffffffffffffffffffffffff16638d5c88178a6040518263ffffffff1660e01b8152600401611f52919061383c565b5f60405180830381865afa158015611f6c573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190611f949190613cb5565b60f173ffffffffffffffffffffffffffffffffffffffff166381cf0f6a8a6040518263ffffffff1660e01b8152600401611fce91906133ce565b5f60405180830381865afa158015611fe8573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906120109190613cb5565b61201989612ad3565b60f173ffffffffffffffffffffffffffffffffffffffff16636af32a55306040518263ffffffff1660e01b815260040161205391906133ce565b5f60405180830381865afa15801561206d573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906120959190613cb5565b60f373ffffffffffffffffffffffffffffffffffffffff16638d5c88178a6040518263ffffffff1660e01b81526004016120cf919061383c565b5f60405180830381865afa1580156120e9573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906121119190613cb5565b61211a8b612ad3565b60f373ffffffffffffffffffffffffffffffffffffffff16638d5c8817886040518263ffffffff1660e01b8152600401612154919061383c565b5f60405180830381865afa15801561216e573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906121969190613cb5565b6040516020016121ac97969594939291906146e2565b604051602081830303815290604052925050509695505050505050565b5f73ffffffffffffffffffffffffffffffffffffffff1660055f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8360ff1660ff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036125fb575f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306ef1a866040518060400160405280600781526020017f57726170706564000000000000000000000000000000000000000000000000008152508573ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa158015612329573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906123519190613cb5565b604051602001612362929190613d36565b6040516020818303038152906040526040518060400160405280600181526020017f57000000000000000000000000000000000000000000000000000000000000008152508673ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa1580156123ef573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906124179190613cb5565b604051602001612428929190613d36565b60405160208183030381529060405260126040518463ffffffff1660e01b815260040161245793929190613d59565b6020604051808303815f875af1158015612473573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906124979190613870565b90508060055f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8460ff1660ff1681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908360ff160217905550505b5050565b8573ffffffffffffffffffffffffffffffffffffffff166379cc679033866040518363ffffffff1660e01b815260040161263a929190613b62565b6020604051808303815f875af1158015612656573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061267a9190613af8565b505f60025f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612749576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127409061484b565b60405180910390fd5b5f60035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1690505f73ffffffffffffffffffffffffffffffffffffffff1660055f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8360ff1660ff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603612875576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161286c906138e5565b60405180910390fd5b5f61288287601284611d25565b905060015f60148282829054906101000a900467ffffffffffffffff166128a99190613bb6565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018281526020018360ff1681526020015f151581525060045f8060149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015f6101000a81548160ff021916908360ff16021790555060808201518160030160016101000a81548160ff0219169083151502179055509050505f612a478b85848a8d8b611e41565b905060f173ffffffffffffffffffffffffffffffffffffffff166356c657a582876040518363ffffffff1660e01b8152600401612a85929190613c00565b6020604051808303815f875af1158015612aa1573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612ac59190613af8565b505050505050505050505050565b60605f6001612ae184612bca565b0190505f8167ffffffffffffffff811115612aff57612afe61308f565b5b6040519080825280601f01601f191660200182016040528015612b315781602001600182028036833780820191505090505b5090505f82602001820190505b600115612b92578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581612b8757612b86613f49565b5b0494505f8503612b3e575b819350505050919050565b6060612bc38273ffffffffffffffffffffffffffffffffffffffff16601460ff16612d1b565b9050919050565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612c26577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381612c1c57612c1b613f49565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612c63576d04ee2d6d415b85acef81000000008381612c5957612c58613f49565b5b0492506020810190505b662386f26fc100008310612c9257662386f26fc100008381612c8857612c87613f49565b5b0492506010810190505b6305f5e1008310612cbb576305f5e1008381612cb157612cb0613f49565b5b0492506008810190505b6127108310612ce0576127108381612cd657612cd5613f49565b5b0492506004810190505b60648310612d035760648381612cf957612cf8613f49565b5b0492506002810190505b600a8310612d12576001810190505b80915050919050565b60605f8390505f6002846002612d31919061403e565b612d3b9190614869565b67ffffffffffffffff811115612d5457612d5361308f565b5b6040519080825280601f01601f191660200182016040528015612d865781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000815f81518110612dbd57612dbc61489c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612e2057612e1f61489c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053505f6001856002612e5e919061403e565b612e689190614869565b90505b6001811115612f07577f3031323334353637383961626364656600000000000000000000000000000000600f841660108110612eaa57612ea961489c565b5b1a60f81b828281518110612ec157612ec061489c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350600483901c925080612f00906148c9565b9050612e6b565b505f8214612f4e5784846040517fe22e27eb000000000000000000000000000000000000000000000000000000008152600401612f459291906148f0565b60405180910390fd5b809250505092915050565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612f9e81612f6a565b8114612fa8575f80fd5b50565b5f81359050612fb981612f95565b92915050565b5f60208284031215612fd457612fd3612f62565b5b5f612fe184828501612fab565b91505092915050565b5f8115159050919050565b612ffe81612fea565b82525050565b5f6020820190506130175f830184612ff5565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6130468261301d565b9050919050565b6130568161303c565b8114613060575f80fd5b50565b5f813590506130718161304d565b92915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6130c58261307f565b810181811067ffffffffffffffff821117156130e4576130e361308f565b5b80604052505050565b5f6130f6612f59565b905061310282826130bc565b919050565b5f67ffffffffffffffff8211156131215761312061308f565b5b61312a8261307f565b9050602081019050919050565b828183375f83830152505050565b5f61315761315284613107565b6130ed565b9050828152602081018484840111156131735761317261307b565b5b61317e848285613137565b509392505050565b5f82601f83011261319a57613199613077565b5b81356131aa848260208601613145565b91505092915050565b5f80604083850312156131c9576131c8612f62565b5b5f6131d685828601613063565b925050602083013567ffffffffffffffff8111156131f7576131f6612f66565b5b61320385828601613186565b9150509250929050565b5f67ffffffffffffffff82169050919050565b6132298161320d565b8114613233575f80fd5b50565b5f8135905061324481613220565b92915050565b61325381612fea565b811461325d575f80fd5b50565b5f8135905061326e8161324a565b92915050565b5f806040838503121561328a57613289612f62565b5b5f61329785828601613236565b92505060206132a885828601613260565b9150509250929050565b5f819050919050565b6132c4816132b2565b81146132ce575f80fd5b50565b5f813590506132df816132bb565b92915050565b5f805f805f60a086880312156132fe576132fd612f62565b5b5f86013567ffffffffffffffff81111561331b5761331a612f66565b5b61332788828901613186565b955050602061333888828901613063565b945050604086013567ffffffffffffffff81111561335957613358612f66565b5b61336588828901613186565b9350506060613376888289016132d1565b9250506080613387888289016132d1565b9150509295509295909350565b5f602082840312156133a9576133a8612f62565b5b5f6133b684828501613063565b91505092915050565b6133c88161303c565b82525050565b5f6020820190506133e15f8301846133bf565b92915050565b5f60ff82169050919050565b6133fc816133e7565b8114613406575f80fd5b50565b5f81359050613417816133f3565b92915050565b5f806040838503121561343357613432612f62565b5b5f61344085828601613063565b925050602061345185828601613409565b9150509250929050565b5f602082840312156134705761346f612f62565b5b5f61347d84828501613236565b91505092915050565b5f805f805f805f60e0888a0312156134a1576134a0612f62565b5b5f88013567ffffffffffffffff8111156134be576134bd612f66565b5b6134ca8a828b01613186565b97505060206134db8a828b01613063565b965050604088013567ffffffffffffffff8111156134fc576134fb612f66565b5b6135088a828b01613186565b95505060606135198a828b016132d1565b945050608061352a8a828b016132d1565b93505060a088013567ffffffffffffffff81111561354b5761354a612f66565b5b6135578a828b01613186565b92505060c06135688a828b01613236565b91505092959891949750929550565b5f805f805f8060c0878903121561359157613590612f62565b5b5f87013567ffffffffffffffff8111156135ae576135ad612f66565b5b6135ba89828a01613186565b96505060206135cb89828a01613063565b955050604087013567ffffffffffffffff8111156135ec576135eb612f66565b5b6135f889828a01613186565b945050606061360989828a016132d1565b935050608061361a89828a016132d1565b92505060a087013567ffffffffffffffff81111561363b5761363a612f66565b5b61364789828a01613186565b9150509295509295509295565b61365d816133e7565b82525050565b5f6020820190506136765f830184613654565b92915050565b5f819050919050565b5f61369f61369a6136958461301d565b61367c565b61301d565b9050919050565b5f6136b082613685565b9050919050565b5f6136c1826136a6565b9050919050565b6136d1816136b7565b82525050565b5f6020820190506136ea5f8301846136c8565b92915050565b5f805f6060848603121561370757613706612f62565b5b5f61371486828701613063565b935050602084013567ffffffffffffffff81111561373557613734612f66565b5b61374186828701613186565b9250506040613752868287016132d1565b9150509250925092565b5f805f806080858703121561377457613773612f62565b5b5f61378187828801613063565b945050602085013567ffffffffffffffff8111156137a2576137a1612f66565b5b6137ae87828801613186565b93505060406137bf878288016132d1565b92505060606137d087828801613409565b91505092959194509250565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f61380e826137dc565b61381881856137e6565b93506138288185602086016137f6565b6138318161307f565b840191505092915050565b5f6020820190508181035f8301526138548184613804565b905092915050565b5f8151905061386a8161304d565b92915050565b5f6020828403121561388557613884612f62565b5b5f6138928482850161385c565b91505092915050565b7f6c6f63616c20746f6b656e20646f65736e2774206578697374000000000000005f82015250565b5f6138cf6019836137e6565b91506138da8261389b565b602082019050919050565b5f6020820190508181035f8301526138fc816138c3565b9050919050565b5f81519050613911816132bb565b92915050565b5f6020828403121561392c5761392b612f62565b5b5f61393984828501613903565b91505092915050565b7f6f6e6c792074686520636f6e747261637420697473656c662063616e2063616c5f8201527f6c20746869732066756e6374696f6e0000000000000000000000000000000000602082015250565b5f61399c602f836137e6565b91506139a782613942565b604082019050919050565b5f6020820190508181035f8301526139c981613990565b9050919050565b7f45524332303a2063616c6c6572206973206e6f742074686520636861696e00005f82015250565b5f613a04601e836137e6565b9150613a0f826139d0565b602082019050919050565b5f6020820190508181035f830152613a31816139f8565b9050919050565b7f696e76616c696420666163746f727920616464726573730000000000000000005f82015250565b5f613a6c6017836137e6565b9150613a7782613a38565b602082019050919050565b5f6020820190508181035f830152613a9981613a60565b9050919050565b613aa9816132b2565b82525050565b5f606082019050613ac25f8301866133bf565b613acf60208301856133bf565b613adc6040830184613aa0565b949350505050565b5f81519050613af28161324a565b92915050565b5f60208284031215613b0d57613b0c612f62565b5b5f613b1a84828501613ae4565b91505092915050565b5f81519050613b31816133f3565b92915050565b5f60208284031215613b4c57613b4b612f62565b5b5f613b5984828501613b23565b91505092915050565b5f604082019050613b755f8301856133bf565b613b826020830184613aa0565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f613bc08261320d565b9150613bcb8361320d565b9250828201905067ffffffffffffffff811115613beb57613bea613b89565b5b92915050565b613bfa8161320d565b82525050565b5f6040820190508181035f830152613c188185613804565b9050613c276020830184613bf1565b9392505050565b5f602082019050613c415f830184613aa0565b92915050565b5f613c59613c5484613107565b6130ed565b905082815260208101848484011115613c7557613c7461307b565b5b613c808482856137f6565b509392505050565b5f82601f830112613c9c57613c9b613077565b5b8151613cac848260208601613c47565b91505092915050565b5f60208284031215613cca57613cc9612f62565b5b5f82015167ffffffffffffffff811115613ce757613ce6612f66565b5b613cf384828501613c88565b91505092915050565b5f81905092915050565b5f613d10826137dc565b613d1a8185613cfc565b9350613d2a8185602086016137f6565b80840191505092915050565b5f613d418285613d06565b9150613d4d8284613d06565b91508190509392505050565b5f6060820190508181035f830152613d718186613804565b90508181036020830152613d858185613804565b9050613d946040830184613654565b949350505050565b5f613da6826133e7565b9150613db1836133e7565b9250828203905060ff811115613dca57613dc9613b89565b5b92915050565b5f8160011c9050919050565b5f808291508390505b6001851115613e2557808604811115613e0157613e00613b89565b5b6001851615613e105780820291505b8081029050613e1e85613dd0565b9450613de5565b94509492505050565b5f82613e3d5760019050613ef8565b81613e4a575f9050613ef8565b8160018114613e605760028114613e6a57613e99565b6001915050613ef8565b60ff841115613e7c57613e7b613b89565b5b8360020a915084821115613e9357613e92613b89565b5b50613ef8565b5060208310610133831016604e8410600b8410161715613ece5782820a905083811115613ec957613ec8613b89565b5b613ef8565b613edb8484846001613ddc565b92509050818404811115613ef257613ef1613b89565b5b81810290505b9392505050565b5f613f09826132b2565b9150613f14836132b2565b9250613f417fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613e2e565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f613f80826132b2565b9150613f8b836132b2565b925082613f9b57613f9a613f49565b5b828206905092915050565b7f6475737420616d6f756e742073686f756c64206265207a65726f0000000000005f82015250565b5f613fda601a836137e6565b9150613fe582613fa6565b602082019050919050565b5f6020820190508181035f83015261400781613fce565b9050919050565b5f614018826132b2565b9150614023836132b2565b92508261403357614032613f49565b5b828204905092915050565b5f614048826132b2565b9150614053836132b2565b9250828202614061816132b2565b9150828204841483151761407857614077613b89565b5b5092915050565b7f636f6e76657274656420616d6f756e74206973207a65726f00000000000000005f82015250565b5f6140b36018836137e6565b91506140be8261407f565b602082019050919050565b5f6020820190508181035f8301526140e0816140a7565b9050919050565b7f7b2265766d223a207b226173796e635f63616c6c6261636b223a207b226964225f8201527f3a20000000000000000000000000000000000000000000000000000000000000602082015250565b5f614141602283613cfc565b915061414c826140e7565b602282019050919050565b7f2c22636f6e74726163745f61646472657373223a2200000000000000000000005f82015250565b5f61418b601583613cfc565b915061419682614157565b601582019050919050565b7f227d7d7d000000000000000000000000000000000000000000000000000000005f82015250565b5f6141d5600483613cfc565b91506141e0826141a1565b600482019050919050565b5f6141f582614135565b91506142018285613d06565b915061420c8261417f565b91506142188284613d06565b9150614223826141c9565b91508190509392505050565b5f6040820190508181035f8301526142478185613804565b9050818103602083015261425b8184613804565b90509392505050565b7f7b224074797065223a20222f6962632e6170706c69636174696f6e732e7472615f8201527f6e736665722e76312e4d73675472616e73666572222c00000000000000000000602082015250565b5f6142be603683613cfc565b91506142c982614264565b603682019050919050565b7f22736f757263655f706f7274223a20227472616e73666572222c0000000000005f82015250565b5f614308601a83613cfc565b9150614313826142d4565b601a82019050919050565b7f22736f757263655f6368616e6e656c223a2000000000000000000000000000005f82015250565b5f614352601283613cfc565b915061435d8261431e565b601282019050919050565b7f2c000000000000000000000000000000000000000000000000000000000000005f82015250565b5f61439c600183613cfc565b91506143a782614368565b600182019050919050565b7f22746f6b656e223a207b202264656e6f6d223a202200000000000000000000005f82015250565b5f6143e6601583613cfc565b91506143f1826143b2565b601582019050919050565b7f222c0000000000000000000000000000000000000000000000000000000000005f82015250565b5f614430600283613cfc565b915061443b826143fc565b600282019050919050565b7f22616d6f756e74223a20220000000000000000000000000000000000000000005f82015250565b5f61447a600b83613cfc565b915061448582614446565b600b82019050919050565b7f227d2c00000000000000000000000000000000000000000000000000000000005f82015250565b5f6144c4600383613cfc565b91506144cf82614490565b600382019050919050565b7f2273656e646572223a20220000000000000000000000000000000000000000005f82015250565b5f61450e600b83613cfc565b9150614519826144da565b600b82019050919050565b7f227265636569766572223a2000000000000000000000000000000000000000005f82015250565b5f614558600c83613cfc565b915061456382614524565b600c82019050919050565b7f2274696d656f75745f686569676874223a207b227265766973696f6e5f6e756d5f8201527f626572223a202230222c227265766973696f6e5f686569676874223a2022302260208201527f7d2c000000000000000000000000000000000000000000000000000000000000604082015250565b5f6145ee604283613cfc565b91506145f98261456e565b604282019050919050565b7f2274696d656f75745f74696d657374616d70223a2022000000000000000000005f82015250565b5f614638601683613cfc565b915061464382614604565b601682019050919050565b7f226d656d6f223a200000000000000000000000000000000000000000000000005f82015250565b5f614682600883613cfc565b915061468d8261464e565b600882019050919050565b7f7d000000000000000000000000000000000000000000000000000000000000005f82015250565b5f6146cc600183613cfc565b91506146d782614698565b600182019050919050565b5f6146ec826142b2565b91506146f7826142fc565b915061470282614346565b915061470e828a613d06565b915061471982614390565b9150614724826143da565b91506147308289613d06565b915061473b82614424565b91506147468261446e565b91506147528288613d06565b915061475d826144b8565b915061476882614502565b91506147748287613d06565b915061477f82614424565b915061478a8261454c565b91506147968286613d06565b91506147a182614390565b91506147ac826145e2565b91506147b78261462c565b91506147c38285613d06565b91506147ce82614424565b91506147d982614676565b91506147e58284613d06565b91506147f0826146c0565b915081905098975050505050505050565b7f72656d6f746520746f6b656e20646f65736e27742065786973740000000000005f82015250565b5f614835601a836137e6565b915061484082614801565b602082019050919050565b5f6020820190508181035f83015261486281614829565b9050919050565b5f614873826132b2565b915061487e836132b2565b925082820190508082111561489657614895613b89565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f6148d3826132b2565b91505f82036148e5576148e4613b89565b5b600182039050919050565b5f6040820190506149035f830185613aa0565b6149106020830184613aa0565b939250505056fea164736f6c6343000819000a",
}

// Erc20WrapperABI is the input ABI used to generate the binding from.
// Deprecated: Use Erc20WrapperMetaData.ABI instead.
var Erc20WrapperABI = Erc20WrapperMetaData.ABI

// Erc20WrapperBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use Erc20WrapperMetaData.Bin instead.
var Erc20WrapperBin = Erc20WrapperMetaData.Bin

// DeployErc20Wrapper deploys a new Ethereum contract, binding an instance of Erc20Wrapper to it.
func DeployErc20Wrapper(auth *bind.TransactOpts, backend bind.ContractBackend, erc20Factory common.Address) (common.Address, *types.Transaction, *Erc20Wrapper, error) {
	parsed, err := Erc20WrapperMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(Erc20WrapperBin), backend, erc20Factory)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Erc20Wrapper{Erc20WrapperCaller: Erc20WrapperCaller{contract: contract}, Erc20WrapperTransactor: Erc20WrapperTransactor{contract: contract}, Erc20WrapperFilterer: Erc20WrapperFilterer{contract: contract}}, nil
}

// Erc20Wrapper is an auto generated Go binding around an Ethereum contract.
type Erc20Wrapper struct {
	Erc20WrapperCaller     // Read-only binding to the contract
	Erc20WrapperTransactor // Write-only binding to the contract
	Erc20WrapperFilterer   // Log filterer for contract events
}

// Erc20WrapperCaller is an auto generated read-only Go binding around an Ethereum contract.
type Erc20WrapperCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Erc20WrapperTransactor is an auto generated write-only Go binding around an Ethereum contract.
type Erc20WrapperTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Erc20WrapperFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type Erc20WrapperFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Erc20WrapperSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type Erc20WrapperSession struct {
	Contract     *Erc20Wrapper     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// Erc20WrapperCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type Erc20WrapperCallerSession struct {
	Contract *Erc20WrapperCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// Erc20WrapperTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type Erc20WrapperTransactorSession struct {
	Contract     *Erc20WrapperTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// Erc20WrapperRaw is an auto generated low-level Go binding around an Ethereum contract.
type Erc20WrapperRaw struct {
	Contract *Erc20Wrapper // Generic contract binding to access the raw methods on
}

// Erc20WrapperCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type Erc20WrapperCallerRaw struct {
	Contract *Erc20WrapperCaller // Generic read-only contract binding to access the raw methods on
}

// Erc20WrapperTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type Erc20WrapperTransactorRaw struct {
	Contract *Erc20WrapperTransactor // Generic write-only contract binding to access the raw methods on
}

// NewErc20Wrapper creates a new instance of Erc20Wrapper, bound to a specific deployed contract.
func NewErc20Wrapper(address common.Address, backend bind.ContractBackend) (*Erc20Wrapper, error) {
	contract, err := bindErc20Wrapper(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Erc20Wrapper{Erc20WrapperCaller: Erc20WrapperCaller{contract: contract}, Erc20WrapperTransactor: Erc20WrapperTransactor{contract: contract}, Erc20WrapperFilterer: Erc20WrapperFilterer{contract: contract}}, nil
}

// NewErc20WrapperCaller creates a new read-only instance of Erc20Wrapper, bound to a specific deployed contract.
func NewErc20WrapperCaller(address common.Address, caller bind.ContractCaller) (*Erc20WrapperCaller, error) {
	contract, err := bindErc20Wrapper(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperCaller{contract: contract}, nil
}

// NewErc20WrapperTransactor creates a new write-only instance of Erc20Wrapper, bound to a specific deployed contract.
func NewErc20WrapperTransactor(address common.Address, transactor bind.ContractTransactor) (*Erc20WrapperTransactor, error) {
	contract, err := bindErc20Wrapper(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperTransactor{contract: contract}, nil
}

// NewErc20WrapperFilterer creates a new log filterer instance of Erc20Wrapper, bound to a specific deployed contract.
func NewErc20WrapperFilterer(address common.Address, filterer bind.ContractFilterer) (*Erc20WrapperFilterer, error) {
	contract, err := bindErc20Wrapper(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperFilterer{contract: contract}, nil
}

// bindErc20Wrapper binds a generic wrapper to an already deployed contract.
func bindErc20Wrapper(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := Erc20WrapperMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Erc20Wrapper *Erc20WrapperRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Erc20Wrapper.Contract.Erc20WrapperCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Erc20Wrapper *Erc20WrapperRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.Erc20WrapperTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Erc20Wrapper *Erc20WrapperRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.Erc20WrapperTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Erc20Wrapper *Erc20WrapperCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Erc20Wrapper.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Erc20Wrapper *Erc20WrapperTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Erc20Wrapper *Erc20WrapperTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.contract.Transact(opts, method, params...)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) Factory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "factory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) Factory() (common.Address, error) {
	return _Erc20Wrapper.Contract.Factory(&_Erc20Wrapper.CallOpts)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) Factory() (common.Address, error) {
	return _Erc20Wrapper.Contract.Factory(&_Erc20Wrapper.CallOpts)
}

// LocalTokens is a free data retrieval call binding the contract method 0x1efb51e6.
//
// Solidity: function localTokens(address , uint8 ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) LocalTokens(opts *bind.CallOpts, arg0 common.Address, arg1 uint8) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "localTokens", arg0, arg1)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LocalTokens is a free data retrieval call binding the contract method 0x1efb51e6.
//
// Solidity: function localTokens(address , uint8 ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) LocalTokens(arg0 common.Address, arg1 uint8) (common.Address, error) {
	return _Erc20Wrapper.Contract.LocalTokens(&_Erc20Wrapper.CallOpts, arg0, arg1)
}

// LocalTokens is a free data retrieval call binding the contract method 0x1efb51e6.
//
// Solidity: function localTokens(address , uint8 ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) LocalTokens(arg0 common.Address, arg1 uint8) (common.Address, error) {
	return _Erc20Wrapper.Contract.LocalTokens(&_Erc20Wrapper.CallOpts, arg0, arg1)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) Owner() (common.Address, error) {
	return _Erc20Wrapper.Contract.Owner(&_Erc20Wrapper.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) Owner() (common.Address, error) {
	return _Erc20Wrapper.Contract.Owner(&_Erc20Wrapper.CallOpts)
}

// RemoteDecimals is a free data retrieval call binding the contract method 0x9f65ade5.
//
// Solidity: function remoteDecimals(address ) view returns(uint8)
func (_Erc20Wrapper *Erc20WrapperCaller) RemoteDecimals(opts *bind.CallOpts, arg0 common.Address) (uint8, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "remoteDecimals", arg0)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// RemoteDecimals is a free data retrieval call binding the contract method 0x9f65ade5.
//
// Solidity: function remoteDecimals(address ) view returns(uint8)
func (_Erc20Wrapper *Erc20WrapperSession) RemoteDecimals(arg0 common.Address) (uint8, error) {
	return _Erc20Wrapper.Contract.RemoteDecimals(&_Erc20Wrapper.CallOpts, arg0)
}

// RemoteDecimals is a free data retrieval call binding the contract method 0x9f65ade5.
//
// Solidity: function remoteDecimals(address ) view returns(uint8)
func (_Erc20Wrapper *Erc20WrapperCallerSession) RemoteDecimals(arg0 common.Address) (uint8, error) {
	return _Erc20Wrapper.Contract.RemoteDecimals(&_Erc20Wrapper.CallOpts, arg0)
}

// RemoteTokens is a free data retrieval call binding the contract method 0x1de5537c.
//
// Solidity: function remoteTokens(address ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) RemoteTokens(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "remoteTokens", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RemoteTokens is a free data retrieval call binding the contract method 0x1de5537c.
//
// Solidity: function remoteTokens(address ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) RemoteTokens(arg0 common.Address) (common.Address, error) {
	return _Erc20Wrapper.Contract.RemoteTokens(&_Erc20Wrapper.CallOpts, arg0)
}

// RemoteTokens is a free data retrieval call binding the contract method 0x1de5537c.
//
// Solidity: function remoteTokens(address ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) RemoteTokens(arg0 common.Address) (common.Address, error) {
	return _Erc20Wrapper.Contract.RemoteTokens(&_Erc20Wrapper.CallOpts, arg0)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Erc20Wrapper *Erc20WrapperCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Erc20Wrapper *Erc20WrapperSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Erc20Wrapper.Contract.SupportsInterface(&_Erc20Wrapper.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Erc20Wrapper *Erc20WrapperCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Erc20Wrapper.Contract.SupportsInterface(&_Erc20Wrapper.CallOpts, interfaceId)
}

// IbcAck is a paid mutator transaction binding the contract method 0x0d4f1f9d.
//
// Solidity: function ibc_ack(uint64 callback_id, bool success) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) IbcAck(opts *bind.TransactOpts, callback_id uint64, success bool) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "ibc_ack", callback_id, success)
}

// IbcAck is a paid mutator transaction binding the contract method 0x0d4f1f9d.
//
// Solidity: function ibc_ack(uint64 callback_id, bool success) returns()
func (_Erc20Wrapper *Erc20WrapperSession) IbcAck(callback_id uint64, success bool) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.IbcAck(&_Erc20Wrapper.TransactOpts, callback_id, success)
}

// IbcAck is a paid mutator transaction binding the contract method 0x0d4f1f9d.
//
// Solidity: function ibc_ack(uint64 callback_id, bool success) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) IbcAck(callback_id uint64, success bool) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.IbcAck(&_Erc20Wrapper.TransactOpts, callback_id, success)
}

// IbcTimeout is a paid mutator transaction binding the contract method 0x31a503f0.
//
// Solidity: function ibc_timeout(uint64 callback_id) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) IbcTimeout(opts *bind.TransactOpts, callback_id uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "ibc_timeout", callback_id)
}

// IbcTimeout is a paid mutator transaction binding the contract method 0x31a503f0.
//
// Solidity: function ibc_timeout(uint64 callback_id) returns()
func (_Erc20Wrapper *Erc20WrapperSession) IbcTimeout(callback_id uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.IbcTimeout(&_Erc20Wrapper.TransactOpts, callback_id)
}

// IbcTimeout is a paid mutator transaction binding the contract method 0x31a503f0.
//
// Solidity: function ibc_timeout(uint64 callback_id) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) IbcTimeout(callback_id uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.IbcTimeout(&_Erc20Wrapper.TransactOpts, callback_id)
}

// SetFactory is a paid mutator transaction binding the contract method 0x5bb47808.
//
// Solidity: function setFactory(address newFactory) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) SetFactory(opts *bind.TransactOpts, newFactory common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "setFactory", newFactory)
}

// SetFactory is a paid mutator transaction binding the contract method 0x5bb47808.
//
// Solidity: function setFactory(address newFactory) returns()
func (_Erc20Wrapper *Erc20WrapperSession) SetFactory(newFactory common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.SetFactory(&_Erc20Wrapper.TransactOpts, newFactory)
}

// SetFactory is a paid mutator transaction binding the contract method 0x5bb47808.
//
// Solidity: function setFactory(address newFactory) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) SetFactory(newFactory common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.SetFactory(&_Erc20Wrapper.TransactOpts, newFactory)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Erc20Wrapper *Erc20WrapperSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.TransferOwnership(&_Erc20Wrapper.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.TransferOwnership(&_Erc20Wrapper.TransactOpts, newOwner)
}

// UnwrapLocal is a paid mutator transaction binding the contract method 0x05f1f68e.
//
// Solidity: function unwrapLocal(address receiver, string remoteDenom) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) UnwrapLocal(opts *bind.TransactOpts, receiver common.Address, remoteDenom string) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "unwrapLocal", receiver, remoteDenom)
}

// UnwrapLocal is a paid mutator transaction binding the contract method 0x05f1f68e.
//
// Solidity: function unwrapLocal(address receiver, string remoteDenom) returns()
func (_Erc20Wrapper *Erc20WrapperSession) UnwrapLocal(receiver common.Address, remoteDenom string) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.UnwrapLocal(&_Erc20Wrapper.TransactOpts, receiver, remoteDenom)
}

// UnwrapLocal is a paid mutator transaction binding the contract method 0x05f1f68e.
//
// Solidity: function unwrapLocal(address receiver, string remoteDenom) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) UnwrapLocal(receiver common.Address, remoteDenom string) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.UnwrapLocal(&_Erc20Wrapper.TransactOpts, receiver, remoteDenom)
}

// UnwrapLocal0 is a paid mutator transaction binding the contract method 0xd96e6e91.
//
// Solidity: function unwrapLocal(address receiver, string remoteDenom, uint256 remoteAmount) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) UnwrapLocal0(opts *bind.TransactOpts, receiver common.Address, remoteDenom string, remoteAmount *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "unwrapLocal0", receiver, remoteDenom, remoteAmount)
}

// UnwrapLocal0 is a paid mutator transaction binding the contract method 0xd96e6e91.
//
// Solidity: function unwrapLocal(address receiver, string remoteDenom, uint256 remoteAmount) returns()
func (_Erc20Wrapper *Erc20WrapperSession) UnwrapLocal0(receiver common.Address, remoteDenom string, remoteAmount *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.UnwrapLocal0(&_Erc20Wrapper.TransactOpts, receiver, remoteDenom, remoteAmount)
}

// UnwrapLocal0 is a paid mutator transaction binding the contract method 0xd96e6e91.
//
// Solidity: function unwrapLocal(address receiver, string remoteDenom, uint256 remoteAmount) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) UnwrapLocal0(receiver common.Address, remoteDenom string, remoteAmount *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.UnwrapLocal0(&_Erc20Wrapper.TransactOpts, receiver, remoteDenom, remoteAmount)
}

// UnwrapRemote is a paid mutator transaction binding the contract method 0x0f866782.
//
// Solidity: function unwrapRemote(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) UnwrapRemote(opts *bind.TransactOpts, channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "unwrapRemote", channel, localToken, receiver, localAmount, timeout)
}

// UnwrapRemote is a paid mutator transaction binding the contract method 0x0f866782.
//
// Solidity: function unwrapRemote(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout) returns()
func (_Erc20Wrapper *Erc20WrapperSession) UnwrapRemote(channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.UnwrapRemote(&_Erc20Wrapper.TransactOpts, channel, localToken, receiver, localAmount, timeout)
}

// UnwrapRemote is a paid mutator transaction binding the contract method 0x0f866782.
//
// Solidity: function unwrapRemote(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) UnwrapRemote(channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.UnwrapRemote(&_Erc20Wrapper.TransactOpts, channel, localToken, receiver, localAmount, timeout)
}

// UnwrapRemote0 is a paid mutator transaction binding the contract method 0x9c9d6057.
//
// Solidity: function unwrapRemote(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout, string memo) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) UnwrapRemote0(opts *bind.TransactOpts, channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int, memo string) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "unwrapRemote0", channel, localToken, receiver, localAmount, timeout, memo)
}

// UnwrapRemote0 is a paid mutator transaction binding the contract method 0x9c9d6057.
//
// Solidity: function unwrapRemote(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout, string memo) returns()
func (_Erc20Wrapper *Erc20WrapperSession) UnwrapRemote0(channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int, memo string) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.UnwrapRemote0(&_Erc20Wrapper.TransactOpts, channel, localToken, receiver, localAmount, timeout, memo)
}

// UnwrapRemote0 is a paid mutator transaction binding the contract method 0x9c9d6057.
//
// Solidity: function unwrapRemote(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout, string memo) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) UnwrapRemote0(channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int, memo string) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.UnwrapRemote0(&_Erc20Wrapper.TransactOpts, channel, localToken, receiver, localAmount, timeout, memo)
}

// UnwrapRemote1 is a paid mutator transaction binding the contract method 0xe1d015f2.
//
// Solidity: function unwrapRemote(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout, string memo, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) UnwrapRemote1(opts *bind.TransactOpts, channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int, memo string, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "unwrapRemote1", channel, localToken, receiver, localAmount, timeout, memo, gasLimit)
}

// UnwrapRemote1 is a paid mutator transaction binding the contract method 0xe1d015f2.
//
// Solidity: function unwrapRemote(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout, string memo, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperSession) UnwrapRemote1(channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int, memo string, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.UnwrapRemote1(&_Erc20Wrapper.TransactOpts, channel, localToken, receiver, localAmount, timeout, memo, gasLimit)
}

// UnwrapRemote1 is a paid mutator transaction binding the contract method 0xe1d015f2.
//
// Solidity: function unwrapRemote(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout, string memo, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) UnwrapRemote1(channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int, memo string, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.UnwrapRemote1(&_Erc20Wrapper.TransactOpts, channel, localToken, receiver, localAmount, timeout, memo, gasLimit)
}

// WrapLocal is a paid mutator transaction binding the contract method 0x5e7faa55.
//
// Solidity: function wrapLocal(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout, string memo, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) WrapLocal(opts *bind.TransactOpts, channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int, memo string, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "wrapLocal", channel, localToken, receiver, localAmount, timeout, memo, gasLimit)
}

// WrapLocal is a paid mutator transaction binding the contract method 0x5e7faa55.
//
// Solidity: function wrapLocal(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout, string memo, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperSession) WrapLocal(channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int, memo string, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.WrapLocal(&_Erc20Wrapper.TransactOpts, channel, localToken, receiver, localAmount, timeout, memo, gasLimit)
}

// WrapLocal is a paid mutator transaction binding the contract method 0x5e7faa55.
//
// Solidity: function wrapLocal(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout, string memo, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) WrapLocal(channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int, memo string, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.WrapLocal(&_Erc20Wrapper.TransactOpts, channel, localToken, receiver, localAmount, timeout, memo, gasLimit)
}

// WrapLocal0 is a paid mutator transaction binding the contract method 0xa9dff95b.
//
// Solidity: function wrapLocal(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) WrapLocal0(opts *bind.TransactOpts, channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "wrapLocal0", channel, localToken, receiver, localAmount, timeout)
}

// WrapLocal0 is a paid mutator transaction binding the contract method 0xa9dff95b.
//
// Solidity: function wrapLocal(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout) returns()
func (_Erc20Wrapper *Erc20WrapperSession) WrapLocal0(channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.WrapLocal0(&_Erc20Wrapper.TransactOpts, channel, localToken, receiver, localAmount, timeout)
}

// WrapLocal0 is a paid mutator transaction binding the contract method 0xa9dff95b.
//
// Solidity: function wrapLocal(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) WrapLocal0(channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.WrapLocal0(&_Erc20Wrapper.TransactOpts, channel, localToken, receiver, localAmount, timeout)
}

// WrapLocal1 is a paid mutator transaction binding the contract method 0xc59114c2.
//
// Solidity: function wrapLocal(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout, string memo) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) WrapLocal1(opts *bind.TransactOpts, channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int, memo string) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "wrapLocal1", channel, localToken, receiver, localAmount, timeout, memo)
}

// WrapLocal1 is a paid mutator transaction binding the contract method 0xc59114c2.
//
// Solidity: function wrapLocal(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout, string memo) returns()
func (_Erc20Wrapper *Erc20WrapperSession) WrapLocal1(channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int, memo string) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.WrapLocal1(&_Erc20Wrapper.TransactOpts, channel, localToken, receiver, localAmount, timeout, memo)
}

// WrapLocal1 is a paid mutator transaction binding the contract method 0xc59114c2.
//
// Solidity: function wrapLocal(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout, string memo) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) WrapLocal1(channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int, memo string) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.WrapLocal1(&_Erc20Wrapper.TransactOpts, channel, localToken, receiver, localAmount, timeout, memo)
}

// WrapRemote is a paid mutator transaction binding the contract method 0xdd4f77f0.
//
// Solidity: function wrapRemote(address receiver, string remoteDenom, uint256 remoteAmount, uint8 _remoteDecimals) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) WrapRemote(opts *bind.TransactOpts, receiver common.Address, remoteDenom string, remoteAmount *big.Int, _remoteDecimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "wrapRemote", receiver, remoteDenom, remoteAmount, _remoteDecimals)
}

// WrapRemote is a paid mutator transaction binding the contract method 0xdd4f77f0.
//
// Solidity: function wrapRemote(address receiver, string remoteDenom, uint256 remoteAmount, uint8 _remoteDecimals) returns()
func (_Erc20Wrapper *Erc20WrapperSession) WrapRemote(receiver common.Address, remoteDenom string, remoteAmount *big.Int, _remoteDecimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.WrapRemote(&_Erc20Wrapper.TransactOpts, receiver, remoteDenom, remoteAmount, _remoteDecimals)
}

// WrapRemote is a paid mutator transaction binding the contract method 0xdd4f77f0.
//
// Solidity: function wrapRemote(address receiver, string remoteDenom, uint256 remoteAmount, uint8 _remoteDecimals) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) WrapRemote(receiver common.Address, remoteDenom string, remoteAmount *big.Int, _remoteDecimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.WrapRemote(&_Erc20Wrapper.TransactOpts, receiver, remoteDenom, remoteAmount, _remoteDecimals)
}

// Erc20WrapperOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Erc20Wrapper contract.
type Erc20WrapperOwnershipTransferredIterator struct {
	Event *Erc20WrapperOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Erc20WrapperOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Erc20WrapperOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Erc20WrapperOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Erc20WrapperOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Erc20WrapperOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Erc20WrapperOwnershipTransferred represents a OwnershipTransferred event raised by the Erc20Wrapper contract.
type Erc20WrapperOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Erc20Wrapper *Erc20WrapperFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*Erc20WrapperOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Erc20Wrapper.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperOwnershipTransferredIterator{contract: _Erc20Wrapper.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Erc20Wrapper *Erc20WrapperFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *Erc20WrapperOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Erc20Wrapper.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Erc20WrapperOwnershipTransferred)
				if err := _Erc20Wrapper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Erc20Wrapper *Erc20WrapperFilterer) ParseOwnershipTransferred(log types.Log) (*Erc20WrapperOwnershipTransferred, error) {
	event := new(Erc20WrapperOwnershipTransferred)
	if err := _Erc20Wrapper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
