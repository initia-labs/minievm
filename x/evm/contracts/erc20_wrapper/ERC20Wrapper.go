// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package erc20_wrapper

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// Erc20WrapperMetaData contains all meta data concerning the Erc20Wrapper contract.
var Erc20WrapperMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contractERC20Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"remoteDenom\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimal\",\"type\":\"uint8\"}],\"name\":\"getToLocalERC20Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"localDenom\",\"type\":\"string\"}],\"name\":\"getToRemoteERC20Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"callback_id\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"ibc_ack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"callback_id\",\"type\":\"uint64\"}],\"name\":\"ibc_timeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"localTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"remoteDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"remoteTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"remoteDenom\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"remoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_remoteDecimals\",\"type\":\"uint8\"}],\"name\":\"toLocal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"remoteDenom\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_remoteDecimals\",\"type\":\"uint8\"}],\"name\":\"toLocal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"localDenom\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"}],\"name\":\"toRemote\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"remoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_remoteDecimals\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"localDenom\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"}],\"name\":\"toRemoteAndIBCTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"localDenom\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"}],\"name\":\"toRemoteAndIBCTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"localDenom\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"}],\"name\":\"toRemoteAndIBCTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"localDenom\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"}],\"name\":\"toRemoteAndOPWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"localDenom\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"}],\"name\":\"toRemoteAndOPWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// Erc20WrapperABI is the input ABI used to generate the binding from.
// Deprecated: Use Erc20WrapperMetaData.ABI instead.
var Erc20WrapperABI = Erc20WrapperMetaData.ABI

// Erc20WrapperBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use Erc20WrapperMetaData.Bin instead.
var Erc20WrapperBin = Erc20WrapperMetaData.Bin

// DeployErc20Wrapper deploys a new Ethereum contract, binding an instance of Erc20Wrapper to it.
func DeployErc20Wrapper(auth *bind.TransactOpts, backend bind.ContractBackend, erc20Factory common.Address) (common.Address, *types.Transaction, *Erc20Wrapper, error) {
	parsed, err := Erc20WrapperMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(Erc20WrapperBin), backend, erc20Factory)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Erc20Wrapper{Erc20WrapperCaller: Erc20WrapperCaller{contract: contract}, Erc20WrapperTransactor: Erc20WrapperTransactor{contract: contract}, Erc20WrapperFilterer: Erc20WrapperFilterer{contract: contract}}, nil
}

// Erc20Wrapper is an auto generated Go binding around an Ethereum contract.
type Erc20Wrapper struct {
	Erc20WrapperCaller     // Read-only binding to the contract
	Erc20WrapperTransactor // Write-only binding to the contract
	Erc20WrapperFilterer   // Log filterer for contract events
}

// Erc20WrapperCaller is an auto generated read-only Go binding around an Ethereum contract.
type Erc20WrapperCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Erc20WrapperTransactor is an auto generated write-only Go binding around an Ethereum contract.
type Erc20WrapperTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Erc20WrapperFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type Erc20WrapperFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Erc20WrapperSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type Erc20WrapperSession struct {
	Contract     *Erc20Wrapper     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// Erc20WrapperCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type Erc20WrapperCallerSession struct {
	Contract *Erc20WrapperCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// Erc20WrapperTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type Erc20WrapperTransactorSession struct {
	Contract     *Erc20WrapperTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// Erc20WrapperRaw is an auto generated low-level Go binding around an Ethereum contract.
type Erc20WrapperRaw struct {
	Contract *Erc20Wrapper // Generic contract binding to access the raw methods on
}

// Erc20WrapperCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type Erc20WrapperCallerRaw struct {
	Contract *Erc20WrapperCaller // Generic read-only contract binding to access the raw methods on
}

// Erc20WrapperTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type Erc20WrapperTransactorRaw struct {
	Contract *Erc20WrapperTransactor // Generic write-only contract binding to access the raw methods on
}

// NewErc20Wrapper creates a new instance of Erc20Wrapper, bound to a specific deployed contract.
func NewErc20Wrapper(address common.Address, backend bind.ContractBackend) (*Erc20Wrapper, error) {
	contract, err := bindErc20Wrapper(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Erc20Wrapper{Erc20WrapperCaller: Erc20WrapperCaller{contract: contract}, Erc20WrapperTransactor: Erc20WrapperTransactor{contract: contract}, Erc20WrapperFilterer: Erc20WrapperFilterer{contract: contract}}, nil
}

// NewErc20WrapperCaller creates a new read-only instance of Erc20Wrapper, bound to a specific deployed contract.
func NewErc20WrapperCaller(address common.Address, caller bind.ContractCaller) (*Erc20WrapperCaller, error) {
	contract, err := bindErc20Wrapper(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperCaller{contract: contract}, nil
}

// NewErc20WrapperTransactor creates a new write-only instance of Erc20Wrapper, bound to a specific deployed contract.
func NewErc20WrapperTransactor(address common.Address, transactor bind.ContractTransactor) (*Erc20WrapperTransactor, error) {
	contract, err := bindErc20Wrapper(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperTransactor{contract: contract}, nil
}

// NewErc20WrapperFilterer creates a new log filterer instance of Erc20Wrapper, bound to a specific deployed contract.
func NewErc20WrapperFilterer(address common.Address, filterer bind.ContractFilterer) (*Erc20WrapperFilterer, error) {
	contract, err := bindErc20Wrapper(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperFilterer{contract: contract}, nil
}

// bindErc20Wrapper binds a generic wrapper to an already deployed contract.
func bindErc20Wrapper(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := Erc20WrapperMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Erc20Wrapper *Erc20WrapperRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Erc20Wrapper.Contract.Erc20WrapperCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Erc20Wrapper *Erc20WrapperRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.Erc20WrapperTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Erc20Wrapper *Erc20WrapperRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.Erc20WrapperTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Erc20Wrapper *Erc20WrapperCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Erc20Wrapper.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Erc20Wrapper *Erc20WrapperTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Erc20Wrapper *Erc20WrapperTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.contract.Transact(opts, method, params...)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) Factory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "factory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) Factory() (common.Address, error) {
	return _Erc20Wrapper.Contract.Factory(&_Erc20Wrapper.CallOpts)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) Factory() (common.Address, error) {
	return _Erc20Wrapper.Contract.Factory(&_Erc20Wrapper.CallOpts)
}

// GetToLocalERC20Address is a free data retrieval call binding the contract method 0xcd78fdec.
//
// Solidity: function getToLocalERC20Address(string remoteDenom, string name, string symbol, uint8 decimal) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) GetToLocalERC20Address(opts *bind.CallOpts, remoteDenom string, name string, symbol string, decimal uint8) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "getToLocalERC20Address", remoteDenom, name, symbol, decimal)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetToLocalERC20Address is a free data retrieval call binding the contract method 0xcd78fdec.
//
// Solidity: function getToLocalERC20Address(string remoteDenom, string name, string symbol, uint8 decimal) view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) GetToLocalERC20Address(remoteDenom string, name string, symbol string, decimal uint8) (common.Address, error) {
	return _Erc20Wrapper.Contract.GetToLocalERC20Address(&_Erc20Wrapper.CallOpts, remoteDenom, name, symbol, decimal)
}

// GetToLocalERC20Address is a free data retrieval call binding the contract method 0xcd78fdec.
//
// Solidity: function getToLocalERC20Address(string remoteDenom, string name, string symbol, uint8 decimal) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) GetToLocalERC20Address(remoteDenom string, name string, symbol string, decimal uint8) (common.Address, error) {
	return _Erc20Wrapper.Contract.GetToLocalERC20Address(&_Erc20Wrapper.CallOpts, remoteDenom, name, symbol, decimal)
}

// GetToRemoteERC20Address is a free data retrieval call binding the contract method 0x9548153f.
//
// Solidity: function getToRemoteERC20Address(string localDenom) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) GetToRemoteERC20Address(opts *bind.CallOpts, localDenom string) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "getToRemoteERC20Address", localDenom)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetToRemoteERC20Address is a free data retrieval call binding the contract method 0x9548153f.
//
// Solidity: function getToRemoteERC20Address(string localDenom) view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) GetToRemoteERC20Address(localDenom string) (common.Address, error) {
	return _Erc20Wrapper.Contract.GetToRemoteERC20Address(&_Erc20Wrapper.CallOpts, localDenom)
}

// GetToRemoteERC20Address is a free data retrieval call binding the contract method 0x9548153f.
//
// Solidity: function getToRemoteERC20Address(string localDenom) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) GetToRemoteERC20Address(localDenom string) (common.Address, error) {
	return _Erc20Wrapper.Contract.GetToRemoteERC20Address(&_Erc20Wrapper.CallOpts, localDenom)
}

// LocalTokens is a free data retrieval call binding the contract method 0x1efb51e6.
//
// Solidity: function localTokens(address , uint8 ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) LocalTokens(opts *bind.CallOpts, arg0 common.Address, arg1 uint8) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "localTokens", arg0, arg1)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LocalTokens is a free data retrieval call binding the contract method 0x1efb51e6.
//
// Solidity: function localTokens(address , uint8 ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) LocalTokens(arg0 common.Address, arg1 uint8) (common.Address, error) {
	return _Erc20Wrapper.Contract.LocalTokens(&_Erc20Wrapper.CallOpts, arg0, arg1)
}

// LocalTokens is a free data retrieval call binding the contract method 0x1efb51e6.
//
// Solidity: function localTokens(address , uint8 ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) LocalTokens(arg0 common.Address, arg1 uint8) (common.Address, error) {
	return _Erc20Wrapper.Contract.LocalTokens(&_Erc20Wrapper.CallOpts, arg0, arg1)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) Owner() (common.Address, error) {
	return _Erc20Wrapper.Contract.Owner(&_Erc20Wrapper.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) Owner() (common.Address, error) {
	return _Erc20Wrapper.Contract.Owner(&_Erc20Wrapper.CallOpts)
}

// RemoteDecimals is a free data retrieval call binding the contract method 0x9f65ade5.
//
// Solidity: function remoteDecimals(address ) view returns(uint8)
func (_Erc20Wrapper *Erc20WrapperCaller) RemoteDecimals(opts *bind.CallOpts, arg0 common.Address) (uint8, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "remoteDecimals", arg0)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// RemoteDecimals is a free data retrieval call binding the contract method 0x9f65ade5.
//
// Solidity: function remoteDecimals(address ) view returns(uint8)
func (_Erc20Wrapper *Erc20WrapperSession) RemoteDecimals(arg0 common.Address) (uint8, error) {
	return _Erc20Wrapper.Contract.RemoteDecimals(&_Erc20Wrapper.CallOpts, arg0)
}

// RemoteDecimals is a free data retrieval call binding the contract method 0x9f65ade5.
//
// Solidity: function remoteDecimals(address ) view returns(uint8)
func (_Erc20Wrapper *Erc20WrapperCallerSession) RemoteDecimals(arg0 common.Address) (uint8, error) {
	return _Erc20Wrapper.Contract.RemoteDecimals(&_Erc20Wrapper.CallOpts, arg0)
}

// RemoteTokens is a free data retrieval call binding the contract method 0x1de5537c.
//
// Solidity: function remoteTokens(address ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) RemoteTokens(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "remoteTokens", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RemoteTokens is a free data retrieval call binding the contract method 0x1de5537c.
//
// Solidity: function remoteTokens(address ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) RemoteTokens(arg0 common.Address) (common.Address, error) {
	return _Erc20Wrapper.Contract.RemoteTokens(&_Erc20Wrapper.CallOpts, arg0)
}

// RemoteTokens is a free data retrieval call binding the contract method 0x1de5537c.
//
// Solidity: function remoteTokens(address ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) RemoteTokens(arg0 common.Address) (common.Address, error) {
	return _Erc20Wrapper.Contract.RemoteTokens(&_Erc20Wrapper.CallOpts, arg0)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Erc20Wrapper *Erc20WrapperCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Erc20Wrapper *Erc20WrapperSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Erc20Wrapper.Contract.SupportsInterface(&_Erc20Wrapper.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Erc20Wrapper *Erc20WrapperCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Erc20Wrapper.Contract.SupportsInterface(&_Erc20Wrapper.CallOpts, interfaceId)
}

// IbcAck is a paid mutator transaction binding the contract method 0x0d4f1f9d.
//
// Solidity: function ibc_ack(uint64 callback_id, bool success) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) IbcAck(opts *bind.TransactOpts, callback_id uint64, success bool) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "ibc_ack", callback_id, success)
}

// IbcAck is a paid mutator transaction binding the contract method 0x0d4f1f9d.
//
// Solidity: function ibc_ack(uint64 callback_id, bool success) returns()
func (_Erc20Wrapper *Erc20WrapperSession) IbcAck(callback_id uint64, success bool) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.IbcAck(&_Erc20Wrapper.TransactOpts, callback_id, success)
}

// IbcAck is a paid mutator transaction binding the contract method 0x0d4f1f9d.
//
// Solidity: function ibc_ack(uint64 callback_id, bool success) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) IbcAck(callback_id uint64, success bool) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.IbcAck(&_Erc20Wrapper.TransactOpts, callback_id, success)
}

// IbcTimeout is a paid mutator transaction binding the contract method 0x31a503f0.
//
// Solidity: function ibc_timeout(uint64 callback_id) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) IbcTimeout(opts *bind.TransactOpts, callback_id uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "ibc_timeout", callback_id)
}

// IbcTimeout is a paid mutator transaction binding the contract method 0x31a503f0.
//
// Solidity: function ibc_timeout(uint64 callback_id) returns()
func (_Erc20Wrapper *Erc20WrapperSession) IbcTimeout(callback_id uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.IbcTimeout(&_Erc20Wrapper.TransactOpts, callback_id)
}

// IbcTimeout is a paid mutator transaction binding the contract method 0x31a503f0.
//
// Solidity: function ibc_timeout(uint64 callback_id) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) IbcTimeout(callback_id uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.IbcTimeout(&_Erc20Wrapper.TransactOpts, callback_id)
}

// SetFactory is a paid mutator transaction binding the contract method 0x5bb47808.
//
// Solidity: function setFactory(address newFactory) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) SetFactory(opts *bind.TransactOpts, newFactory common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "setFactory", newFactory)
}

// SetFactory is a paid mutator transaction binding the contract method 0x5bb47808.
//
// Solidity: function setFactory(address newFactory) returns()
func (_Erc20Wrapper *Erc20WrapperSession) SetFactory(newFactory common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.SetFactory(&_Erc20Wrapper.TransactOpts, newFactory)
}

// SetFactory is a paid mutator transaction binding the contract method 0x5bb47808.
//
// Solidity: function setFactory(address newFactory) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) SetFactory(newFactory common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.SetFactory(&_Erc20Wrapper.TransactOpts, newFactory)
}

// ToLocal is a paid mutator transaction binding the contract method 0x1efd1a84.
//
// Solidity: function toLocal(address receiver, string remoteDenom, uint256 remoteAmount, uint8 _remoteDecimals) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) ToLocal(opts *bind.TransactOpts, receiver common.Address, remoteDenom string, remoteAmount *big.Int, _remoteDecimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "toLocal", receiver, remoteDenom, remoteAmount, _remoteDecimals)
}

// ToLocal is a paid mutator transaction binding the contract method 0x1efd1a84.
//
// Solidity: function toLocal(address receiver, string remoteDenom, uint256 remoteAmount, uint8 _remoteDecimals) returns()
func (_Erc20Wrapper *Erc20WrapperSession) ToLocal(receiver common.Address, remoteDenom string, remoteAmount *big.Int, _remoteDecimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToLocal(&_Erc20Wrapper.TransactOpts, receiver, remoteDenom, remoteAmount, _remoteDecimals)
}

// ToLocal is a paid mutator transaction binding the contract method 0x1efd1a84.
//
// Solidity: function toLocal(address receiver, string remoteDenom, uint256 remoteAmount, uint8 _remoteDecimals) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) ToLocal(receiver common.Address, remoteDenom string, remoteAmount *big.Int, _remoteDecimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToLocal(&_Erc20Wrapper.TransactOpts, receiver, remoteDenom, remoteAmount, _remoteDecimals)
}

// ToLocal0 is a paid mutator transaction binding the contract method 0x701dcf21.
//
// Solidity: function toLocal(address receiver, string remoteDenom, uint8 _remoteDecimals) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) ToLocal0(opts *bind.TransactOpts, receiver common.Address, remoteDenom string, _remoteDecimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "toLocal0", receiver, remoteDenom, _remoteDecimals)
}

// ToLocal0 is a paid mutator transaction binding the contract method 0x701dcf21.
//
// Solidity: function toLocal(address receiver, string remoteDenom, uint8 _remoteDecimals) returns()
func (_Erc20Wrapper *Erc20WrapperSession) ToLocal0(receiver common.Address, remoteDenom string, _remoteDecimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToLocal0(&_Erc20Wrapper.TransactOpts, receiver, remoteDenom, _remoteDecimals)
}

// ToLocal0 is a paid mutator transaction binding the contract method 0x701dcf21.
//
// Solidity: function toLocal(address receiver, string remoteDenom, uint8 _remoteDecimals) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) ToLocal0(receiver common.Address, remoteDenom string, _remoteDecimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToLocal0(&_Erc20Wrapper.TransactOpts, receiver, remoteDenom, _remoteDecimals)
}

// ToRemote is a paid mutator transaction binding the contract method 0xcf9ee0c3.
//
// Solidity: function toRemote(address receiver, string localDenom, uint256 localAmount) returns(address remoteToken, uint256 remoteAmount, uint8 _remoteDecimals)
func (_Erc20Wrapper *Erc20WrapperTransactor) ToRemote(opts *bind.TransactOpts, receiver common.Address, localDenom string, localAmount *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "toRemote", receiver, localDenom, localAmount)
}

// ToRemote is a paid mutator transaction binding the contract method 0xcf9ee0c3.
//
// Solidity: function toRemote(address receiver, string localDenom, uint256 localAmount) returns(address remoteToken, uint256 remoteAmount, uint8 _remoteDecimals)
func (_Erc20Wrapper *Erc20WrapperSession) ToRemote(receiver common.Address, localDenom string, localAmount *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemote(&_Erc20Wrapper.TransactOpts, receiver, localDenom, localAmount)
}

// ToRemote is a paid mutator transaction binding the contract method 0xcf9ee0c3.
//
// Solidity: function toRemote(address receiver, string localDenom, uint256 localAmount) returns(address remoteToken, uint256 remoteAmount, uint8 _remoteDecimals)
func (_Erc20Wrapper *Erc20WrapperTransactorSession) ToRemote(receiver common.Address, localDenom string, localAmount *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemote(&_Erc20Wrapper.TransactOpts, receiver, localDenom, localAmount)
}

// ToRemoteAndIBCTransfer is a paid mutator transaction binding the contract method 0x1b750022.
//
// Solidity: function toRemoteAndIBCTransfer(string localDenom, uint256 localAmount, string channel, string receiver, uint256 timeout, string memo, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) ToRemoteAndIBCTransfer(opts *bind.TransactOpts, localDenom string, localAmount *big.Int, channel string, receiver string, timeout *big.Int, memo string, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "toRemoteAndIBCTransfer", localDenom, localAmount, channel, receiver, timeout, memo, gasLimit)
}

// ToRemoteAndIBCTransfer is a paid mutator transaction binding the contract method 0x1b750022.
//
// Solidity: function toRemoteAndIBCTransfer(string localDenom, uint256 localAmount, string channel, string receiver, uint256 timeout, string memo, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperSession) ToRemoteAndIBCTransfer(localDenom string, localAmount *big.Int, channel string, receiver string, timeout *big.Int, memo string, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndIBCTransfer(&_Erc20Wrapper.TransactOpts, localDenom, localAmount, channel, receiver, timeout, memo, gasLimit)
}

// ToRemoteAndIBCTransfer is a paid mutator transaction binding the contract method 0x1b750022.
//
// Solidity: function toRemoteAndIBCTransfer(string localDenom, uint256 localAmount, string channel, string receiver, uint256 timeout, string memo, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) ToRemoteAndIBCTransfer(localDenom string, localAmount *big.Int, channel string, receiver string, timeout *big.Int, memo string, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndIBCTransfer(&_Erc20Wrapper.TransactOpts, localDenom, localAmount, channel, receiver, timeout, memo, gasLimit)
}

// ToRemoteAndIBCTransfer0 is a paid mutator transaction binding the contract method 0x24721917.
//
// Solidity: function toRemoteAndIBCTransfer(string localDenom, uint256 localAmount, string channel, string receiver, uint256 timeout) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) ToRemoteAndIBCTransfer0(opts *bind.TransactOpts, localDenom string, localAmount *big.Int, channel string, receiver string, timeout *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "toRemoteAndIBCTransfer0", localDenom, localAmount, channel, receiver, timeout)
}

// ToRemoteAndIBCTransfer0 is a paid mutator transaction binding the contract method 0x24721917.
//
// Solidity: function toRemoteAndIBCTransfer(string localDenom, uint256 localAmount, string channel, string receiver, uint256 timeout) returns()
func (_Erc20Wrapper *Erc20WrapperSession) ToRemoteAndIBCTransfer0(localDenom string, localAmount *big.Int, channel string, receiver string, timeout *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndIBCTransfer0(&_Erc20Wrapper.TransactOpts, localDenom, localAmount, channel, receiver, timeout)
}

// ToRemoteAndIBCTransfer0 is a paid mutator transaction binding the contract method 0x24721917.
//
// Solidity: function toRemoteAndIBCTransfer(string localDenom, uint256 localAmount, string channel, string receiver, uint256 timeout) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) ToRemoteAndIBCTransfer0(localDenom string, localAmount *big.Int, channel string, receiver string, timeout *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndIBCTransfer0(&_Erc20Wrapper.TransactOpts, localDenom, localAmount, channel, receiver, timeout)
}

// ToRemoteAndIBCTransfer1 is a paid mutator transaction binding the contract method 0xf787cbdd.
//
// Solidity: function toRemoteAndIBCTransfer(string localDenom, uint256 localAmount, string channel, string receiver, uint256 timeout, string memo) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) ToRemoteAndIBCTransfer1(opts *bind.TransactOpts, localDenom string, localAmount *big.Int, channel string, receiver string, timeout *big.Int, memo string) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "toRemoteAndIBCTransfer1", localDenom, localAmount, channel, receiver, timeout, memo)
}

// ToRemoteAndIBCTransfer1 is a paid mutator transaction binding the contract method 0xf787cbdd.
//
// Solidity: function toRemoteAndIBCTransfer(string localDenom, uint256 localAmount, string channel, string receiver, uint256 timeout, string memo) returns()
func (_Erc20Wrapper *Erc20WrapperSession) ToRemoteAndIBCTransfer1(localDenom string, localAmount *big.Int, channel string, receiver string, timeout *big.Int, memo string) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndIBCTransfer1(&_Erc20Wrapper.TransactOpts, localDenom, localAmount, channel, receiver, timeout, memo)
}

// ToRemoteAndIBCTransfer1 is a paid mutator transaction binding the contract method 0xf787cbdd.
//
// Solidity: function toRemoteAndIBCTransfer(string localDenom, uint256 localAmount, string channel, string receiver, uint256 timeout, string memo) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) ToRemoteAndIBCTransfer1(localDenom string, localAmount *big.Int, channel string, receiver string, timeout *big.Int, memo string) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndIBCTransfer1(&_Erc20Wrapper.TransactOpts, localDenom, localAmount, channel, receiver, timeout, memo)
}

// ToRemoteAndOPWithdraw is a paid mutator transaction binding the contract method 0x0423d4d8.
//
// Solidity: function toRemoteAndOPWithdraw(string receiver, string localDenom, uint256 localAmount, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) ToRemoteAndOPWithdraw(opts *bind.TransactOpts, receiver string, localDenom string, localAmount *big.Int, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "toRemoteAndOPWithdraw", receiver, localDenom, localAmount, gasLimit)
}

// ToRemoteAndOPWithdraw is a paid mutator transaction binding the contract method 0x0423d4d8.
//
// Solidity: function toRemoteAndOPWithdraw(string receiver, string localDenom, uint256 localAmount, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperSession) ToRemoteAndOPWithdraw(receiver string, localDenom string, localAmount *big.Int, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndOPWithdraw(&_Erc20Wrapper.TransactOpts, receiver, localDenom, localAmount, gasLimit)
}

// ToRemoteAndOPWithdraw is a paid mutator transaction binding the contract method 0x0423d4d8.
//
// Solidity: function toRemoteAndOPWithdraw(string receiver, string localDenom, uint256 localAmount, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) ToRemoteAndOPWithdraw(receiver string, localDenom string, localAmount *big.Int, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndOPWithdraw(&_Erc20Wrapper.TransactOpts, receiver, localDenom, localAmount, gasLimit)
}

// ToRemoteAndOPWithdraw0 is a paid mutator transaction binding the contract method 0xb9cf3742.
//
// Solidity: function toRemoteAndOPWithdraw(string receiver, string localDenom, uint256 localAmount) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) ToRemoteAndOPWithdraw0(opts *bind.TransactOpts, receiver string, localDenom string, localAmount *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "toRemoteAndOPWithdraw0", receiver, localDenom, localAmount)
}

// ToRemoteAndOPWithdraw0 is a paid mutator transaction binding the contract method 0xb9cf3742.
//
// Solidity: function toRemoteAndOPWithdraw(string receiver, string localDenom, uint256 localAmount) returns()
func (_Erc20Wrapper *Erc20WrapperSession) ToRemoteAndOPWithdraw0(receiver string, localDenom string, localAmount *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndOPWithdraw0(&_Erc20Wrapper.TransactOpts, receiver, localDenom, localAmount)
}

// ToRemoteAndOPWithdraw0 is a paid mutator transaction binding the contract method 0xb9cf3742.
//
// Solidity: function toRemoteAndOPWithdraw(string receiver, string localDenom, uint256 localAmount) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) ToRemoteAndOPWithdraw0(receiver string, localDenom string, localAmount *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.ToRemoteAndOPWithdraw0(&_Erc20Wrapper.TransactOpts, receiver, localDenom, localAmount)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Erc20Wrapper *Erc20WrapperSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.TransferOwnership(&_Erc20Wrapper.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.TransferOwnership(&_Erc20Wrapper.TransactOpts, newOwner)
}

// Erc20WrapperOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Erc20Wrapper contract.
type Erc20WrapperOwnershipTransferredIterator struct {
	Event *Erc20WrapperOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Erc20WrapperOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Erc20WrapperOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Erc20WrapperOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Erc20WrapperOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Erc20WrapperOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Erc20WrapperOwnershipTransferred represents a OwnershipTransferred event raised by the Erc20Wrapper contract.
type Erc20WrapperOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Erc20Wrapper *Erc20WrapperFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*Erc20WrapperOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Erc20Wrapper.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperOwnershipTransferredIterator{contract: _Erc20Wrapper.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Erc20Wrapper *Erc20WrapperFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *Erc20WrapperOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Erc20Wrapper.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Erc20WrapperOwnershipTransferred)
				if err := _Erc20Wrapper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Erc20Wrapper *Erc20WrapperFilterer) ParseOwnershipTransferred(log types.Log) (*Erc20WrapperOwnershipTransferred, error) {
	event := new(Erc20WrapperOwnershipTransferred)
	if err := _Erc20Wrapper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
