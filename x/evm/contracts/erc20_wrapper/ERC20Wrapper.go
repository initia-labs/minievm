// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package erc20_wrapper

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// Erc20WrapperMetaData contains all meta data concerning the Erc20Wrapper contract.
var Erc20WrapperMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contractERC20Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"callback_id\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"ibc_ack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"callback_id\",\"type\":\"uint64\"}],\"name\":\"ibc_timeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"originToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"unwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"originToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wrappedAmt\",\"type\":\"uint256\"}],\"name\":\"unwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"}],\"name\":\"wrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"gas_limit\",\"type\":\"uint64\"}],\"name\":\"wrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"}],\"name\":\"wrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wrappedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60806040525f8060146101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550348015610037575f80fd5b5060405161382e38038061382e8339818101604052810190610059919061013c565b335f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610167565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61010b826100e2565b9050919050565b61011b81610101565b8114610125575f80fd5b50565b5f8151905061013681610112565b92915050565b5f60208284031215610151576101506100de565b5b5f61015e84828501610128565b91505092915050565b6136ba806101745f395ff3fe608060405234801561000f575f80fd5b50600436106100cd575f3560e01c80638da5cb5b1161008a578063c45a015511610064578063c45a0155146101e3578063d5c6b50414610201578063ea67cd4314610231578063f2fde38b1461024d576100cd565b80638da5cb5b1461018d5780639a111432146101ab578063b72df26a146101c7576100cd565b806301ffc9a7146100d15780630d4f1f9d1461010157806331a503f01461011d5780635bb47808146101395780637a30f1ff146101555780638cc7104f14610171575b5f80fd5b6100eb60048036038101906100e69190611ee0565b610269565b6040516100f89190611f25565b60405180910390f35b61011b60048036038101906101169190611fa5565b6102d2565b005b61013760048036038101906101329190611fe3565b610353565b005b610153600480360381019061014e9190612068565b6103cd565b005b61016f600480360381019061016a9190612093565b6104ed565b005b61018b60048036038101906101869190612104565b610649565b005b61019561072a565b6040516101a29190612163565b60405180910390f35b6101c560048036038101906101c091906122b8565b61074d565b005b6101e160048036038101906101dc9190612367565b610797565b005b6101eb610bb5565b6040516101f891906124b3565b60405180910390f35b61021b60048036038101906102169190612068565b610bda565b6040516102289190612163565b60405180910390f35b61024b600480360381019061024691906124cc565b610c0a565b005b61026760048036038101906102629190612068565b610c24565b005b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610340576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033790612629565b60405180910390fd5b8061034f5761034e82610d6c565b5b5050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b890612629565b60405180910390fd5b6103ca81610d6c565b50565b600173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461043c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043390612691565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036104aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a1906126f9565b60405180910390fd5b8060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b5f60025f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036105bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b290612761565b60405180910390fd5b5f8173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016105f59190612163565b602060405180830381865afa158015610610573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106349190612793565b9050610643828533868561109a565b50505050565b5f60025f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610717576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070e90612761565b60405180910390fd5b610724818533868661109a565b50505050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61079085858585856040518060400160405280600281526020017f7b7d000000000000000000000000000000000000000000000000000000000000815250610c0a565b5050505050565b6107a086611215565b8573ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b81526004016107dd939291906127cd565b6020604051808303815f875af11580156107f9573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061081d9190612816565b505f610897858873ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561086c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108909190612877565b6006611550565b905060025f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930836040518363ffffffff1660e01b81526004016109309291906128a2565b5f604051808303815f87803b158015610947575f80fd5b505af1158015610959573d5f803e3d5ffd5b5050505060015f60148282829054906101000a900467ffffffffffffffff1661098291906128f6565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018281525060035f8060149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201559050505f610b2b8960025f8b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684888b8961166c565b905060f173ffffffffffffffffffffffffffffffffffffffff166356c657a582856040518363ffffffff1660e01b8152600401610b69929190612990565b6020604051808303815f875af1158015610b85573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ba99190612816565b50505050505050505050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002602052805f5260405f205f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610c1c8686868686866203d090610797565b505050505050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c7a575f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610cb1575f80fd5b8073ffffffffffffffffffffffffffffffffffffffff165f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3805f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b5f60035f8367ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f206040518060600160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152505090505f60025f836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610f24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1b90612761565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166342966c6883604001516040518263ffffffff1660e01b8152600401610f6191906129be565b5f604051808303815f87803b158015610f78575f80fd5b505af1158015610f8a573d5f803e3d5ffd5b505050505f61100f83604001516006856020015173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fe6573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061100a9190612877565b611550565b9050826020015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb845f0151836040518363ffffffff1660e01b81526004016110539291906128a2565b6020604051808303815f875af115801561106f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110939190612816565b5050505050565b8473ffffffffffffffffffffffffffffffffffffffff166379cc679084836040518363ffffffff1660e01b81526004016110d59291906128a2565b6020604051808303815f875af11580156110f1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111159190612816565b505f61118f8260068773ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611166573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061118a9190612877565b611550565b90508473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff1660e01b81526004016111cc9291906128a2565b6020604051808303815f875af11580156111e8573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061120c9190612816565b50505050505050565b5f73ffffffffffffffffffffffffffffffffffffffff1660025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361154d575f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306ef1a866040518060400160405280600781526020017f57726170706564000000000000000000000000000000000000000000000000008152508473ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa158015611360573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906113889190612a45565b604051602001611399929190612ac6565b6040516020818303038152906040526040518060400160405280600181526020017f57000000000000000000000000000000000000000000000000000000000000008152508573ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa158015611426573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f8201168201806040525081019061144e9190612a45565b60405160200161145f929190612ac6565b60405160208183030381529060405260066040518463ffffffff1660e01b815260040161148e93929190612af8565b6020604051808303815f875af11580156114aa573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114ce9190612b4f565b90508060025f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b50565b5f8160ff168360ff1611156115de575f828461156c9190612b7a565b60ff16600a61157b9190612cdd565b90505f818661158a9190612d54565b146115ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c190612dce565b60405180910390fd5b80856115d69190612dec565b915050611623565b8160ff168360ff16101561161e575f83836115f99190612b7a565b60ff16600a6116089190612cdd565b905080856116169190612e1c565b915050611622565b8390505b5b5f8103611665576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165c90612ea7565b60405180910390fd5b9392505050565b60605f6116975f60149054906101000a900467ffffffffffffffff1667ffffffffffffffff166119f4565b6116a030611abe565b6040516020016116b1929190612fc9565b60405160208183030381529060405290505f60f373ffffffffffffffffffffffffffffffffffffffff16635cc855e385846040518363ffffffff1660e01b81526004016116ff92919061300d565b5f60405180830381865afa158015611719573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906117419190612a45565b905060f373ffffffffffffffffffffffffffffffffffffffff16638d5c88178a6040518263ffffffff1660e01b815260040161177d9190613042565b5f60405180830381865afa158015611797573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906117bf9190612a45565b60f173ffffffffffffffffffffffffffffffffffffffff166381cf0f6a8a6040518263ffffffff1660e01b81526004016117f99190612163565b5f60405180830381865afa158015611813573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f8201168201806040525081019061183b9190612a45565b611844896119f4565b60f173ffffffffffffffffffffffffffffffffffffffff16636af32a55306040518263ffffffff1660e01b815260040161187e9190612163565b5f60405180830381865afa158015611898573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906118c09190612a45565b60f373ffffffffffffffffffffffffffffffffffffffff16638d5c88178a6040518263ffffffff1660e01b81526004016118fa9190613042565b5f60405180830381865afa158015611914573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f8201168201806040525081019061193c9190612a45565b6119458b6119f4565b60f373ffffffffffffffffffffffffffffffffffffffff16638d5c8817886040518263ffffffff1660e01b815260040161197f9190613042565b5f60405180830381865afa158015611999573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906119c19190612a45565b6040516020016119d797969594939291906134e0565b604051602081830303815290604052925050509695505050505050565b60605f6001611a0284611aeb565b0190505f8167ffffffffffffffff811115611a2057611a1f612194565b5b6040519080825280601f01601f191660200182016040528015611a525781602001600182028036833780820191505090505b5090505f82602001820190505b600115611ab3578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611aa857611aa7612d27565b5b0494505f8503611a5f575b819350505050919050565b6060611ae48273ffffffffffffffffffffffffffffffffffffffff16601460ff16611c3c565b9050919050565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611b47577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611b3d57611b3c612d27565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611b84576d04ee2d6d415b85acef81000000008381611b7a57611b79612d27565b5b0492506020810190505b662386f26fc100008310611bb357662386f26fc100008381611ba957611ba8612d27565b5b0492506010810190505b6305f5e1008310611bdc576305f5e1008381611bd257611bd1612d27565b5b0492506008810190505b6127108310611c01576127108381611bf757611bf6612d27565b5b0492506004810190505b60648310611c245760648381611c1a57611c19612d27565b5b0492506002810190505b600a8310611c33576001810190505b80915050919050565b60605f8390505f6002846002611c529190612e1c565b611c5c91906135ff565b67ffffffffffffffff811115611c7557611c74612194565b5b6040519080825280601f01601f191660200182016040528015611ca75781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000815f81518110611cde57611cdd613632565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611d4157611d40613632565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053505f6001856002611d7f9190612e1c565b611d8991906135ff565b90505b6001811115611e28577f3031323334353637383961626364656600000000000000000000000000000000600f841660108110611dcb57611dca613632565b5b1a60f81b828281518110611de257611de1613632565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350600483901c925080611e219061365f565b9050611d8c565b505f8214611e6f5784846040517fe22e27eb000000000000000000000000000000000000000000000000000000008152600401611e66929190613686565b60405180910390fd5b809250505092915050565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611ebf81611e8b565b8114611ec9575f80fd5b50565b5f81359050611eda81611eb6565b92915050565b5f60208284031215611ef557611ef4611e83565b5b5f611f0284828501611ecc565b91505092915050565b5f8115159050919050565b611f1f81611f0b565b82525050565b5f602082019050611f385f830184611f16565b92915050565b5f67ffffffffffffffff82169050919050565b611f5a81611f3e565b8114611f64575f80fd5b50565b5f81359050611f7581611f51565b92915050565b611f8481611f0b565b8114611f8e575f80fd5b50565b5f81359050611f9f81611f7b565b92915050565b5f8060408385031215611fbb57611fba611e83565b5b5f611fc885828601611f67565b9250506020611fd985828601611f91565b9150509250929050565b5f60208284031215611ff857611ff7611e83565b5b5f61200584828501611f67565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6120378261200e565b9050919050565b6120478161202d565b8114612051575f80fd5b50565b5f813590506120628161203e565b92915050565b5f6020828403121561207d5761207c611e83565b5b5f61208a84828501612054565b91505092915050565b5f80604083850312156120a9576120a8611e83565b5b5f6120b685828601612054565b92505060206120c785828601612054565b9150509250929050565b5f819050919050565b6120e3816120d1565b81146120ed575f80fd5b50565b5f813590506120fe816120da565b92915050565b5f805f6060848603121561211b5761211a611e83565b5b5f61212886828701612054565b935050602061213986828701612054565b925050604061214a868287016120f0565b9150509250925092565b61215d8161202d565b82525050565b5f6020820190506121765f830184612154565b92915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6121ca82612184565b810181811067ffffffffffffffff821117156121e9576121e8612194565b5b80604052505050565b5f6121fb611e7a565b905061220782826121c1565b919050565b5f67ffffffffffffffff82111561222657612225612194565b5b61222f82612184565b9050602081019050919050565b828183375f83830152505050565b5f61225c6122578461220c565b6121f2565b90508281526020810184848401111561227857612277612180565b5b61228384828561223c565b509392505050565b5f82601f83011261229f5761229e61217c565b5b81356122af84826020860161224a565b91505092915050565b5f805f805f60a086880312156122d1576122d0611e83565b5b5f86013567ffffffffffffffff8111156122ee576122ed611e87565b5b6122fa8882890161228b565b955050602061230b88828901612054565b945050604086013567ffffffffffffffff81111561232c5761232b611e87565b5b6123388882890161228b565b9350506060612349888289016120f0565b925050608061235a888289016120f0565b9150509295509295909350565b5f805f805f805f60e0888a03121561238257612381611e83565b5b5f88013567ffffffffffffffff81111561239f5761239e611e87565b5b6123ab8a828b0161228b565b97505060206123bc8a828b01612054565b965050604088013567ffffffffffffffff8111156123dd576123dc611e87565b5b6123e98a828b0161228b565b95505060606123fa8a828b016120f0565b945050608061240b8a828b016120f0565b93505060a088013567ffffffffffffffff81111561242c5761242b611e87565b5b6124388a828b0161228b565b92505060c06124498a828b01611f67565b91505092959891949750929550565b5f819050919050565b5f61247b6124766124718461200e565b612458565b61200e565b9050919050565b5f61248c82612461565b9050919050565b5f61249d82612482565b9050919050565b6124ad81612493565b82525050565b5f6020820190506124c65f8301846124a4565b92915050565b5f805f805f8060c087890312156124e6576124e5611e83565b5b5f87013567ffffffffffffffff81111561250357612502611e87565b5b61250f89828a0161228b565b965050602061252089828a01612054565b955050604087013567ffffffffffffffff81111561254157612540611e87565b5b61254d89828a0161228b565b945050606061255e89828a016120f0565b935050608061256f89828a016120f0565b92505060a087013567ffffffffffffffff8111156125905761258f611e87565b5b61259c89828a0161228b565b9150509295509295509295565b5f82825260208201905092915050565b7f6f6e6c792074686520636f6e747261637420697473656c662063616e2063616c5f8201527f6c20746869732066756e6374696f6e0000000000000000000000000000000000602082015250565b5f612613602f836125a9565b915061261e826125b9565b604082019050919050565b5f6020820190508181035f83015261264081612607565b9050919050565b7f45524332303a2063616c6c6572206973206e6f742074686520636861696e00005f82015250565b5f61267b601e836125a9565b915061268682612647565b602082019050919050565b5f6020820190508181035f8301526126a88161266f565b9050919050565b7f696e76616c696420666163746f727920616464726573730000000000000000005f82015250565b5f6126e36017836125a9565b91506126ee826126af565b602082019050919050565b5f6020820190508181035f830152612710816126d7565b9050919050565b7f7772617070656420746f6b656e20646f65736e277420657869737400000000005f82015250565b5f61274b601b836125a9565b915061275682612717565b602082019050919050565b5f6020820190508181035f8301526127788161273f565b9050919050565b5f8151905061278d816120da565b92915050565b5f602082840312156127a8576127a7611e83565b5b5f6127b58482850161277f565b91505092915050565b6127c7816120d1565b82525050565b5f6060820190506127e05f830186612154565b6127ed6020830185612154565b6127fa60408301846127be565b949350505050565b5f8151905061281081611f7b565b92915050565b5f6020828403121561282b5761282a611e83565b5b5f61283884828501612802565b91505092915050565b5f60ff82169050919050565b61285681612841565b8114612860575f80fd5b50565b5f815190506128718161284d565b92915050565b5f6020828403121561288c5761288b611e83565b5b5f61289984828501612863565b91505092915050565b5f6040820190506128b55f830185612154565b6128c260208301846127be565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61290082611f3e565b915061290b83611f3e565b9250828201905067ffffffffffffffff81111561292b5761292a6128c9565b5b92915050565b5f81519050919050565b8281835e5f83830152505050565b5f61295382612931565b61295d81856125a9565b935061296d81856020860161293b565b61297681612184565b840191505092915050565b61298a81611f3e565b82525050565b5f6040820190508181035f8301526129a88185612949565b90506129b76020830184612981565b9392505050565b5f6020820190506129d15f8301846127be565b92915050565b5f6129e96129e48461220c565b6121f2565b905082815260208101848484011115612a0557612a04612180565b5b612a1084828561293b565b509392505050565b5f82601f830112612a2c57612a2b61217c565b5b8151612a3c8482602086016129d7565b91505092915050565b5f60208284031215612a5a57612a59611e83565b5b5f82015167ffffffffffffffff811115612a7757612a76611e87565b5b612a8384828501612a18565b91505092915050565b5f81905092915050565b5f612aa082612931565b612aaa8185612a8c565b9350612aba81856020860161293b565b80840191505092915050565b5f612ad18285612a96565b9150612add8284612a96565b91508190509392505050565b612af281612841565b82525050565b5f6060820190508181035f830152612b108186612949565b90508181036020830152612b248185612949565b9050612b336040830184612ae9565b949350505050565b5f81519050612b498161203e565b92915050565b5f60208284031215612b6457612b63611e83565b5b5f612b7184828501612b3b565b91505092915050565b5f612b8482612841565b9150612b8f83612841565b9250828203905060ff811115612ba857612ba76128c9565b5b92915050565b5f8160011c9050919050565b5f808291508390505b6001851115612c0357808604811115612bdf57612bde6128c9565b5b6001851615612bee5780820291505b8081029050612bfc85612bae565b9450612bc3565b94509492505050565b5f82612c1b5760019050612cd6565b81612c28575f9050612cd6565b8160018114612c3e5760028114612c4857612c77565b6001915050612cd6565b60ff841115612c5a57612c596128c9565b5b8360020a915084821115612c7157612c706128c9565b5b50612cd6565b5060208310610133831016604e8410600b8410161715612cac5782820a905083811115612ca757612ca66128c9565b5b612cd6565b612cb98484846001612bba565b92509050818404811115612cd057612ccf6128c9565b5b81810290505b9392505050565b5f612ce7826120d1565b9150612cf2836120d1565b9250612d1f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612c0c565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f612d5e826120d1565b9150612d69836120d1565b925082612d7957612d78612d27565b5b828206905092915050565b7f6475737420616d6f756e742073686f756c64206265207a65726f0000000000005f82015250565b5f612db8601a836125a9565b9150612dc382612d84565b602082019050919050565b5f6020820190508181035f830152612de581612dac565b9050919050565b5f612df6826120d1565b9150612e01836120d1565b925082612e1157612e10612d27565b5b828204905092915050565b5f612e26826120d1565b9150612e31836120d1565b9250828202612e3f816120d1565b91508282048414831517612e5657612e556128c9565b5b5092915050565b7f636f6e76657274656420616d6f756e74206973207a65726f00000000000000005f82015250565b5f612e916018836125a9565b9150612e9c82612e5d565b602082019050919050565b5f6020820190508181035f830152612ebe81612e85565b9050919050565b7f7b2265766d223a207b226173796e635f63616c6c6261636b223a207b226964225f8201527f3a20000000000000000000000000000000000000000000000000000000000000602082015250565b5f612f1f602283612a8c565b9150612f2a82612ec5565b602282019050919050565b7f2c22636f6e74726163745f61646472657373223a2200000000000000000000005f82015250565b5f612f69601583612a8c565b9150612f7482612f35565b601582019050919050565b7f227d7d7d000000000000000000000000000000000000000000000000000000005f82015250565b5f612fb3600483612a8c565b9150612fbe82612f7f565b600482019050919050565b5f612fd382612f13565b9150612fdf8285612a96565b9150612fea82612f5d565b9150612ff68284612a96565b915061300182612fa7565b91508190509392505050565b5f6040820190508181035f8301526130258185612949565b905081810360208301526130398184612949565b90509392505050565b5f6020820190508181035f83015261305a8184612949565b905092915050565b7f7b224074797065223a20222f6962632e6170706c69636174696f6e732e7472615f8201527f6e736665722e76312e4d73675472616e73666572222c00000000000000000000602082015250565b5f6130bc603683612a8c565b91506130c782613062565b603682019050919050565b7f22736f757263655f706f7274223a20227472616e73666572222c0000000000005f82015250565b5f613106601a83612a8c565b9150613111826130d2565b601a82019050919050565b7f22736f757263655f6368616e6e656c223a2000000000000000000000000000005f82015250565b5f613150601283612a8c565b915061315b8261311c565b601282019050919050565b7f2c000000000000000000000000000000000000000000000000000000000000005f82015250565b5f61319a600183612a8c565b91506131a582613166565b600182019050919050565b7f22746f6b656e223a207b202264656e6f6d223a202200000000000000000000005f82015250565b5f6131e4601583612a8c565b91506131ef826131b0565b601582019050919050565b7f222c0000000000000000000000000000000000000000000000000000000000005f82015250565b5f61322e600283612a8c565b9150613239826131fa565b600282019050919050565b7f22616d6f756e74223a20220000000000000000000000000000000000000000005f82015250565b5f613278600b83612a8c565b915061328382613244565b600b82019050919050565b7f227d2c00000000000000000000000000000000000000000000000000000000005f82015250565b5f6132c2600383612a8c565b91506132cd8261328e565b600382019050919050565b7f2273656e646572223a20220000000000000000000000000000000000000000005f82015250565b5f61330c600b83612a8c565b9150613317826132d8565b600b82019050919050565b7f227265636569766572223a2000000000000000000000000000000000000000005f82015250565b5f613356600c83612a8c565b915061336182613322565b600c82019050919050565b7f2274696d656f75745f686569676874223a207b227265766973696f6e5f6e756d5f8201527f626572223a202230222c227265766973696f6e5f686569676874223a2022302260208201527f7d2c000000000000000000000000000000000000000000000000000000000000604082015250565b5f6133ec604283612a8c565b91506133f78261336c565b604282019050919050565b7f2274696d656f75745f74696d657374616d70223a2022000000000000000000005f82015250565b5f613436601683612a8c565b915061344182613402565b601682019050919050565b7f226d656d6f223a200000000000000000000000000000000000000000000000005f82015250565b5f613480600883612a8c565b915061348b8261344c565b600882019050919050565b7f7d000000000000000000000000000000000000000000000000000000000000005f82015250565b5f6134ca600183612a8c565b91506134d582613496565b600182019050919050565b5f6134ea826130b0565b91506134f5826130fa565b915061350082613144565b915061350c828a612a96565b91506135178261318e565b9150613522826131d8565b915061352e8289612a96565b915061353982613222565b91506135448261326c565b91506135508288612a96565b915061355b826132b6565b915061356682613300565b91506135728287612a96565b915061357d82613222565b91506135888261334a565b91506135948286612a96565b915061359f8261318e565b91506135aa826133e0565b91506135b58261342a565b91506135c18285612a96565b91506135cc82613222565b91506135d782613474565b91506135e38284612a96565b91506135ee826134be565b915081905098975050505050505050565b5f613609826120d1565b9150613614836120d1565b925082820190508082111561362c5761362b6128c9565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f613669826120d1565b91505f820361367b5761367a6128c9565b5b600182039050919050565b5f6040820190506136995f8301856127be565b6136a660208301846127be565b939250505056fea164736f6c6343000819000a",
}

// Erc20WrapperABI is the input ABI used to generate the binding from.
// Deprecated: Use Erc20WrapperMetaData.ABI instead.
var Erc20WrapperABI = Erc20WrapperMetaData.ABI

// Erc20WrapperBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use Erc20WrapperMetaData.Bin instead.
var Erc20WrapperBin = Erc20WrapperMetaData.Bin

// DeployErc20Wrapper deploys a new Ethereum contract, binding an instance of Erc20Wrapper to it.
func DeployErc20Wrapper(auth *bind.TransactOpts, backend bind.ContractBackend, erc20Factory common.Address) (common.Address, *types.Transaction, *Erc20Wrapper, error) {
	parsed, err := Erc20WrapperMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(Erc20WrapperBin), backend, erc20Factory)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Erc20Wrapper{Erc20WrapperCaller: Erc20WrapperCaller{contract: contract}, Erc20WrapperTransactor: Erc20WrapperTransactor{contract: contract}, Erc20WrapperFilterer: Erc20WrapperFilterer{contract: contract}}, nil
}

// Erc20Wrapper is an auto generated Go binding around an Ethereum contract.
type Erc20Wrapper struct {
	Erc20WrapperCaller     // Read-only binding to the contract
	Erc20WrapperTransactor // Write-only binding to the contract
	Erc20WrapperFilterer   // Log filterer for contract events
}

// Erc20WrapperCaller is an auto generated read-only Go binding around an Ethereum contract.
type Erc20WrapperCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Erc20WrapperTransactor is an auto generated write-only Go binding around an Ethereum contract.
type Erc20WrapperTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Erc20WrapperFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type Erc20WrapperFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Erc20WrapperSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type Erc20WrapperSession struct {
	Contract     *Erc20Wrapper     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// Erc20WrapperCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type Erc20WrapperCallerSession struct {
	Contract *Erc20WrapperCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// Erc20WrapperTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type Erc20WrapperTransactorSession struct {
	Contract     *Erc20WrapperTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// Erc20WrapperRaw is an auto generated low-level Go binding around an Ethereum contract.
type Erc20WrapperRaw struct {
	Contract *Erc20Wrapper // Generic contract binding to access the raw methods on
}

// Erc20WrapperCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type Erc20WrapperCallerRaw struct {
	Contract *Erc20WrapperCaller // Generic read-only contract binding to access the raw methods on
}

// Erc20WrapperTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type Erc20WrapperTransactorRaw struct {
	Contract *Erc20WrapperTransactor // Generic write-only contract binding to access the raw methods on
}

// NewErc20Wrapper creates a new instance of Erc20Wrapper, bound to a specific deployed contract.
func NewErc20Wrapper(address common.Address, backend bind.ContractBackend) (*Erc20Wrapper, error) {
	contract, err := bindErc20Wrapper(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Erc20Wrapper{Erc20WrapperCaller: Erc20WrapperCaller{contract: contract}, Erc20WrapperTransactor: Erc20WrapperTransactor{contract: contract}, Erc20WrapperFilterer: Erc20WrapperFilterer{contract: contract}}, nil
}

// NewErc20WrapperCaller creates a new read-only instance of Erc20Wrapper, bound to a specific deployed contract.
func NewErc20WrapperCaller(address common.Address, caller bind.ContractCaller) (*Erc20WrapperCaller, error) {
	contract, err := bindErc20Wrapper(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperCaller{contract: contract}, nil
}

// NewErc20WrapperTransactor creates a new write-only instance of Erc20Wrapper, bound to a specific deployed contract.
func NewErc20WrapperTransactor(address common.Address, transactor bind.ContractTransactor) (*Erc20WrapperTransactor, error) {
	contract, err := bindErc20Wrapper(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperTransactor{contract: contract}, nil
}

// NewErc20WrapperFilterer creates a new log filterer instance of Erc20Wrapper, bound to a specific deployed contract.
func NewErc20WrapperFilterer(address common.Address, filterer bind.ContractFilterer) (*Erc20WrapperFilterer, error) {
	contract, err := bindErc20Wrapper(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperFilterer{contract: contract}, nil
}

// bindErc20Wrapper binds a generic wrapper to an already deployed contract.
func bindErc20Wrapper(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := Erc20WrapperMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Erc20Wrapper *Erc20WrapperRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Erc20Wrapper.Contract.Erc20WrapperCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Erc20Wrapper *Erc20WrapperRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.Erc20WrapperTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Erc20Wrapper *Erc20WrapperRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.Erc20WrapperTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Erc20Wrapper *Erc20WrapperCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Erc20Wrapper.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Erc20Wrapper *Erc20WrapperTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Erc20Wrapper *Erc20WrapperTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.contract.Transact(opts, method, params...)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) Factory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "factory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) Factory() (common.Address, error) {
	return _Erc20Wrapper.Contract.Factory(&_Erc20Wrapper.CallOpts)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) Factory() (common.Address, error) {
	return _Erc20Wrapper.Contract.Factory(&_Erc20Wrapper.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) Owner() (common.Address, error) {
	return _Erc20Wrapper.Contract.Owner(&_Erc20Wrapper.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) Owner() (common.Address, error) {
	return _Erc20Wrapper.Contract.Owner(&_Erc20Wrapper.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Erc20Wrapper *Erc20WrapperCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Erc20Wrapper *Erc20WrapperSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Erc20Wrapper.Contract.SupportsInterface(&_Erc20Wrapper.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Erc20Wrapper *Erc20WrapperCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Erc20Wrapper.Contract.SupportsInterface(&_Erc20Wrapper.CallOpts, interfaceId)
}

// WrappedTokens is a free data retrieval call binding the contract method 0xd5c6b504.
//
// Solidity: function wrappedTokens(address ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) WrappedTokens(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "wrappedTokens", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// WrappedTokens is a free data retrieval call binding the contract method 0xd5c6b504.
//
// Solidity: function wrappedTokens(address ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) WrappedTokens(arg0 common.Address) (common.Address, error) {
	return _Erc20Wrapper.Contract.WrappedTokens(&_Erc20Wrapper.CallOpts, arg0)
}

// WrappedTokens is a free data retrieval call binding the contract method 0xd5c6b504.
//
// Solidity: function wrappedTokens(address ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) WrappedTokens(arg0 common.Address) (common.Address, error) {
	return _Erc20Wrapper.Contract.WrappedTokens(&_Erc20Wrapper.CallOpts, arg0)
}

// IbcAck is a paid mutator transaction binding the contract method 0x0d4f1f9d.
//
// Solidity: function ibc_ack(uint64 callback_id, bool success) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) IbcAck(opts *bind.TransactOpts, callback_id uint64, success bool) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "ibc_ack", callback_id, success)
}

// IbcAck is a paid mutator transaction binding the contract method 0x0d4f1f9d.
//
// Solidity: function ibc_ack(uint64 callback_id, bool success) returns()
func (_Erc20Wrapper *Erc20WrapperSession) IbcAck(callback_id uint64, success bool) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.IbcAck(&_Erc20Wrapper.TransactOpts, callback_id, success)
}

// IbcAck is a paid mutator transaction binding the contract method 0x0d4f1f9d.
//
// Solidity: function ibc_ack(uint64 callback_id, bool success) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) IbcAck(callback_id uint64, success bool) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.IbcAck(&_Erc20Wrapper.TransactOpts, callback_id, success)
}

// IbcTimeout is a paid mutator transaction binding the contract method 0x31a503f0.
//
// Solidity: function ibc_timeout(uint64 callback_id) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) IbcTimeout(opts *bind.TransactOpts, callback_id uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "ibc_timeout", callback_id)
}

// IbcTimeout is a paid mutator transaction binding the contract method 0x31a503f0.
//
// Solidity: function ibc_timeout(uint64 callback_id) returns()
func (_Erc20Wrapper *Erc20WrapperSession) IbcTimeout(callback_id uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.IbcTimeout(&_Erc20Wrapper.TransactOpts, callback_id)
}

// IbcTimeout is a paid mutator transaction binding the contract method 0x31a503f0.
//
// Solidity: function ibc_timeout(uint64 callback_id) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) IbcTimeout(callback_id uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.IbcTimeout(&_Erc20Wrapper.TransactOpts, callback_id)
}

// SetFactory is a paid mutator transaction binding the contract method 0x5bb47808.
//
// Solidity: function setFactory(address newFactory) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) SetFactory(opts *bind.TransactOpts, newFactory common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "setFactory", newFactory)
}

// SetFactory is a paid mutator transaction binding the contract method 0x5bb47808.
//
// Solidity: function setFactory(address newFactory) returns()
func (_Erc20Wrapper *Erc20WrapperSession) SetFactory(newFactory common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.SetFactory(&_Erc20Wrapper.TransactOpts, newFactory)
}

// SetFactory is a paid mutator transaction binding the contract method 0x5bb47808.
//
// Solidity: function setFactory(address newFactory) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) SetFactory(newFactory common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.SetFactory(&_Erc20Wrapper.TransactOpts, newFactory)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Erc20Wrapper *Erc20WrapperSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.TransferOwnership(&_Erc20Wrapper.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.TransferOwnership(&_Erc20Wrapper.TransactOpts, newOwner)
}

// Unwrap is a paid mutator transaction binding the contract method 0x7a30f1ff.
//
// Solidity: function unwrap(address originToken, address receiver) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) Unwrap(opts *bind.TransactOpts, originToken common.Address, receiver common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "unwrap", originToken, receiver)
}

// Unwrap is a paid mutator transaction binding the contract method 0x7a30f1ff.
//
// Solidity: function unwrap(address originToken, address receiver) returns()
func (_Erc20Wrapper *Erc20WrapperSession) Unwrap(originToken common.Address, receiver common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.Unwrap(&_Erc20Wrapper.TransactOpts, originToken, receiver)
}

// Unwrap is a paid mutator transaction binding the contract method 0x7a30f1ff.
//
// Solidity: function unwrap(address originToken, address receiver) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) Unwrap(originToken common.Address, receiver common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.Unwrap(&_Erc20Wrapper.TransactOpts, originToken, receiver)
}

// Unwrap0 is a paid mutator transaction binding the contract method 0x8cc7104f.
//
// Solidity: function unwrap(address originToken, address receiver, uint256 wrappedAmt) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) Unwrap0(opts *bind.TransactOpts, originToken common.Address, receiver common.Address, wrappedAmt *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "unwrap0", originToken, receiver, wrappedAmt)
}

// Unwrap0 is a paid mutator transaction binding the contract method 0x8cc7104f.
//
// Solidity: function unwrap(address originToken, address receiver, uint256 wrappedAmt) returns()
func (_Erc20Wrapper *Erc20WrapperSession) Unwrap0(originToken common.Address, receiver common.Address, wrappedAmt *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.Unwrap0(&_Erc20Wrapper.TransactOpts, originToken, receiver, wrappedAmt)
}

// Unwrap0 is a paid mutator transaction binding the contract method 0x8cc7104f.
//
// Solidity: function unwrap(address originToken, address receiver, uint256 wrappedAmt) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) Unwrap0(originToken common.Address, receiver common.Address, wrappedAmt *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.Unwrap0(&_Erc20Wrapper.TransactOpts, originToken, receiver, wrappedAmt)
}

// Wrap is a paid mutator transaction binding the contract method 0x9a111432.
//
// Solidity: function wrap(string channel, address token, string receiver, uint256 amount, uint256 timeout) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) Wrap(opts *bind.TransactOpts, channel string, token common.Address, receiver string, amount *big.Int, timeout *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "wrap", channel, token, receiver, amount, timeout)
}

// Wrap is a paid mutator transaction binding the contract method 0x9a111432.
//
// Solidity: function wrap(string channel, address token, string receiver, uint256 amount, uint256 timeout) returns()
func (_Erc20Wrapper *Erc20WrapperSession) Wrap(channel string, token common.Address, receiver string, amount *big.Int, timeout *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.Wrap(&_Erc20Wrapper.TransactOpts, channel, token, receiver, amount, timeout)
}

// Wrap is a paid mutator transaction binding the contract method 0x9a111432.
//
// Solidity: function wrap(string channel, address token, string receiver, uint256 amount, uint256 timeout) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) Wrap(channel string, token common.Address, receiver string, amount *big.Int, timeout *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.Wrap(&_Erc20Wrapper.TransactOpts, channel, token, receiver, amount, timeout)
}

// Wrap0 is a paid mutator transaction binding the contract method 0xb72df26a.
//
// Solidity: function wrap(string channel, address token, string receiver, uint256 amount, uint256 timeout, string memo, uint64 gas_limit) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) Wrap0(opts *bind.TransactOpts, channel string, token common.Address, receiver string, amount *big.Int, timeout *big.Int, memo string, gas_limit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "wrap0", channel, token, receiver, amount, timeout, memo, gas_limit)
}

// Wrap0 is a paid mutator transaction binding the contract method 0xb72df26a.
//
// Solidity: function wrap(string channel, address token, string receiver, uint256 amount, uint256 timeout, string memo, uint64 gas_limit) returns()
func (_Erc20Wrapper *Erc20WrapperSession) Wrap0(channel string, token common.Address, receiver string, amount *big.Int, timeout *big.Int, memo string, gas_limit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.Wrap0(&_Erc20Wrapper.TransactOpts, channel, token, receiver, amount, timeout, memo, gas_limit)
}

// Wrap0 is a paid mutator transaction binding the contract method 0xb72df26a.
//
// Solidity: function wrap(string channel, address token, string receiver, uint256 amount, uint256 timeout, string memo, uint64 gas_limit) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) Wrap0(channel string, token common.Address, receiver string, amount *big.Int, timeout *big.Int, memo string, gas_limit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.Wrap0(&_Erc20Wrapper.TransactOpts, channel, token, receiver, amount, timeout, memo, gas_limit)
}

// Wrap1 is a paid mutator transaction binding the contract method 0xea67cd43.
//
// Solidity: function wrap(string channel, address token, string receiver, uint256 amount, uint256 timeout, string memo) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) Wrap1(opts *bind.TransactOpts, channel string, token common.Address, receiver string, amount *big.Int, timeout *big.Int, memo string) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "wrap1", channel, token, receiver, amount, timeout, memo)
}

// Wrap1 is a paid mutator transaction binding the contract method 0xea67cd43.
//
// Solidity: function wrap(string channel, address token, string receiver, uint256 amount, uint256 timeout, string memo) returns()
func (_Erc20Wrapper *Erc20WrapperSession) Wrap1(channel string, token common.Address, receiver string, amount *big.Int, timeout *big.Int, memo string) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.Wrap1(&_Erc20Wrapper.TransactOpts, channel, token, receiver, amount, timeout, memo)
}

// Wrap1 is a paid mutator transaction binding the contract method 0xea67cd43.
//
// Solidity: function wrap(string channel, address token, string receiver, uint256 amount, uint256 timeout, string memo) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) Wrap1(channel string, token common.Address, receiver string, amount *big.Int, timeout *big.Int, memo string) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.Wrap1(&_Erc20Wrapper.TransactOpts, channel, token, receiver, amount, timeout, memo)
}

// Erc20WrapperOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Erc20Wrapper contract.
type Erc20WrapperOwnershipTransferredIterator struct {
	Event *Erc20WrapperOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Erc20WrapperOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Erc20WrapperOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Erc20WrapperOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Erc20WrapperOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Erc20WrapperOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Erc20WrapperOwnershipTransferred represents a OwnershipTransferred event raised by the Erc20Wrapper contract.
type Erc20WrapperOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Erc20Wrapper *Erc20WrapperFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*Erc20WrapperOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Erc20Wrapper.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperOwnershipTransferredIterator{contract: _Erc20Wrapper.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Erc20Wrapper *Erc20WrapperFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *Erc20WrapperOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Erc20Wrapper.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Erc20WrapperOwnershipTransferred)
				if err := _Erc20Wrapper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Erc20Wrapper *Erc20WrapperFilterer) ParseOwnershipTransferred(log types.Log) (*Erc20WrapperOwnershipTransferred, error) {
	event := new(Erc20WrapperOwnershipTransferred)
	if err := _Erc20Wrapper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
