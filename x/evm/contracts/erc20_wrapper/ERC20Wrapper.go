// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package erc20_wrapper

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// Erc20WrapperMetaData contains all meta data concerning the Erc20Wrapper contract.
var Erc20WrapperMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contractERC20Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"callback_id\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"ibc_ack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"callback_id\",\"type\":\"uint64\"}],\"name\":\"ibc_timeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"localTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"remoteTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"remoteDenom\",\"type\":\"string\"}],\"name\":\"unwrapLocal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"remoteDenom\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"remoteAmount\",\"type\":\"uint256\"}],\"name\":\"unwrapLocal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"localToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"}],\"name\":\"unwrapRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"localToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"}],\"name\":\"unwrapRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"localToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"}],\"name\":\"unwrapRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"localToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"}],\"name\":\"wrapLocal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"localToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"}],\"name\":\"wrapLocal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"localToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"}],\"name\":\"wrapLocal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"remoteDenom\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"remoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"remoteDecimals\",\"type\":\"uint8\"}],\"name\":\"wrapRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040525f8060146101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550348015610037575f80fd5b5060405161481f38038061481f8339818101604052810190610059919061013c565b335f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610167565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61010b826100e2565b9050919050565b61011b81610101565b8114610125575f80fd5b50565b5f8151905061013681610112565b92915050565b5f60208284031215610151576101506100de565b5b5f61015e84828501610128565b91505092915050565b6146ab806101745f395ff3fe608060405234801561000f575f80fd5b5060043610610114575f3560e01c80638da5cb5b116100a0578063c59114c21161006f578063c59114c2146102c4578063d96e6e91146102e0578063dd4f77f0146102fc578063e1d015f214610318578063f2fde38b1461033457610114565b80638da5cb5b146102505780639c9d60571461026e578063a9dff95b1461028a578063c45a0155146102a657610114565b80631de5537c116100e75780631de5537c1461019c5780631efb51e6146101cc57806331a503f0146101fc5780635bb47808146102185780635e7faa551461023457610114565b806301ffc9a71461011857806305f1f68e146101485780630d4f1f9d146101645780630f86678214610180575b5f80fd5b610132600480360381019061012d9190612d5f565b610350565b60405161013f9190612da4565b60405180910390f35b610162600480360381019061015d9190612f53565b6103b9565b005b61017e60048036038101906101799190613014565b6105a8565b005b61019a60048036038101906101959190613085565b610629565b005b6101b660048036038101906101b19190613134565b610673565b6040516101c3919061316e565b60405180910390f35b6101e660048036038101906101e191906131bd565b6106a3565b6040516101f3919061316e565b60405180910390f35b610216600480360381019061021191906131fb565b6106e0565b005b610232600480360381019061022d9190613134565b61075a565b005b61024e60048036038101906102499190613226565b61087a565b005b610258610d04565b604051610265919061316e565b60405180910390f35b61028860048036038101906102839190613317565b610d27565b005b6102a4600480360381019061029f9190613085565b610d41565b005b6102ae610d8b565b6040516102bb919061344f565b60405180910390f35b6102de60048036038101906102d99190613317565b610db0565b005b6102fa60048036038101906102f59190613468565b610dca565b005b610316600480360381019061031191906134d4565b610f3e565b005b610332600480360381019061032d9190613226565b611137565b005b61034e60048036038101906103499190613134565b61114f565b005b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b5f60f173ffffffffffffffffffffffffffffffffffffffff16632b3324ce836040518263ffffffff1660e01b81526004016103f491906135b4565b602060405180830381865afa15801561040f573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061043391906135e8565b90505f60045f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f600660ff1660ff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610519576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105109061365d565b60405180910390fd5b5f8273ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610553919061316e565b602060405180830381865afa15801561056e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610592919061368f565b90506105a18383338885611297565b5050505050565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610616576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060d9061372a565b60405180910390fd5b806106255761062482611412565b5b5050565b61066c85858585856040518060400160405280600281526020017f7b7d000000000000000000000000000000000000000000000000000000000000815250610d27565b5050505050565b6002602052805f5260405f205f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6004602052815f5260405f20602052805f5260405f205f915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461074e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107459061372a565b60405180910390fd5b61075781611412565b50565b600173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c090613792565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610837576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082e906137fa565b60405180910390fd5b8060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6108838661180a565b8573ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b81526004016108c093929190613827565b6020604051808303815f875af11580156108dc573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109009190613870565b505f61097a858873ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561094f573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061097391906138af565b6006611bd6565b90505f60025f8973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f8173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a26573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a4a91906138af565b90508173ffffffffffffffffffffffffffffffffffffffff166340c10f1930856040518363ffffffff1660e01b8152600401610a879291906138da565b5f604051808303815f87803b158015610a9e575f80fd5b505af1158015610ab0573d5f803e3d5ffd5b5050505060015f60148282829054906101000a900467ffffffffffffffff16610ad9919061392e565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018260ff1681526020016001151581525060035f8060149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015f6101000a81548160ff021916908360ff16021790555060808201518160030160016101000a81548160ff0219169083151502179055509050505f610c788b84868a8d8b611cf2565b905060f173ffffffffffffffffffffffffffffffffffffffff166356c657a582876040518363ffffffff1660e01b8152600401610cb6929190613978565b6020604051808303815f875af1158015610cd2573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610cf69190613870565b505050505050505050505050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610d398686868686866203d090611137565b505050505050565b610d8485858585856040518060400160405280600281526020017f7b7d000000000000000000000000000000000000000000000000000000000000815250610db0565b5050505050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610dc28686868686866203d09061087a565b505050505050565b5f60f173ffffffffffffffffffffffffffffffffffffffff16632b3324ce846040518263ffffffff1660e01b8152600401610e0591906135b4565b602060405180830381865afa158015610e20573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e4491906135e8565b90505f60045f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f600660ff1660ff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610f2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f219061365d565b60405180910390fd5b610f378282338887611297565b5050505050565b5f60f173ffffffffffffffffffffffffffffffffffffffff16632b3324ce856040518263ffffffff1660e01b8152600401610f7991906135b4565b602060405180830381865afa158015610f94573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fb891906135e8565b9050610fc4818361207a565b5f60045f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8460ff1660ff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b815260040161107693929190613827565b6020604051808303815f875af1158015611092573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110b69190613870565b505f6110c485856012611bd6565b90508173ffffffffffffffffffffffffffffffffffffffff166340c10f1988836040518363ffffffff1660e01b81526004016111019291906138da565b5f604051808303815f87803b158015611118575f80fd5b505af115801561112a573d5f803e3d5ffd5b5050505050505050505050565b6111468787878787878761245b565b50505050505050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111a5575f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036111dc575f80fd5b8073ffffffffffffffffffffffffffffffffffffffff165f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3805f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b8473ffffffffffffffffffffffffffffffffffffffff166379cc679084836040518363ffffffff1660e01b81526004016112d29291906138da565b6020604051808303815f875af11580156112ee573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113129190613870565b505f61138c8260068773ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611363573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061138791906138af565b611bd6565b90508473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff1660e01b81526004016113c99291906138da565b6020604051808303815f875af11580156113e5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114099190613870565b50505050505050565b5f60035f8367ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f206040518060a00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015f9054906101000a900460ff1660ff1660ff1681526020016003820160019054906101000a900460ff16151515158152505090505f60045f836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f836060015160ff1660ff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361161a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116119061365d565b60405180910390fd5b5f61169a836040015184606001518473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611671573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061169591906138af565b611bd6565b905082608001511561179857826020015173ffffffffffffffffffffffffffffffffffffffff166342966c6884604001516040518263ffffffff1660e01b81526004016116e791906139a6565b5f604051808303815f87803b1580156116fe575f80fd5b505af1158015611710573d5f803e3d5ffd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb845f0151836040518363ffffffff1660e01b81526004016117529291906138da565b6020604051808303815f875af115801561176e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906117929190613870565b50611804565b8173ffffffffffffffffffffffffffffffffffffffff166340c10f19845f0151836040518363ffffffff1660e01b81526004016117d69291906138da565b5f604051808303815f87803b1580156117ed575f80fd5b505af11580156117ff573d5f803e3d5ffd5b505050505b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff1660025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611bd3575f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306ef1a866040518060400160405280600781526020017f57726170706564000000000000000000000000000000000000000000000000008152508473ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa158015611955573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f8201168201806040525081019061197d9190613a2d565b60405160200161198e929190613aae565b6040516020818303038152906040526040518060400160405280600181526020017f57000000000000000000000000000000000000000000000000000000000000008152508573ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa158015611a1b573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190611a439190613a2d565b604051602001611a54929190613aae565b60405160208183030381529060405260066040518463ffffffff1660e01b8152600401611a8393929190613ae0565b6020604051808303815f875af1158015611a9f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ac391906135e8565b90508060025f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160045f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f600660ff1660ff1681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b50565b5f8160ff168360ff161115611c64575f8284611bf29190613b23565b60ff16600a611c019190613c86565b90505f8186611c109190613cfd565b14611c50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4790613d77565b60405180910390fd5b8085611c5c9190613d95565b915050611ca9565b8160ff168360ff161015611ca4575f8383611c7f9190613b23565b60ff16600a611c8e9190613c86565b90508085611c9c9190613dc5565b915050611ca8565b8390505b5b5f8103611ceb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ce290613e50565b60405180910390fd5b9392505050565b60605f611d1d5f60149054906101000a900467ffffffffffffffff1667ffffffffffffffff16612873565b611d263061293d565b604051602001611d37929190613f72565b60405160208183030381529060405290505f60f373ffffffffffffffffffffffffffffffffffffffff16635cc855e385846040518363ffffffff1660e01b8152600401611d85929190613fb6565b5f60405180830381865afa158015611d9f573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190611dc79190613a2d565b905060f373ffffffffffffffffffffffffffffffffffffffff16638d5c88178a6040518263ffffffff1660e01b8152600401611e0391906135b4565b5f60405180830381865afa158015611e1d573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190611e459190613a2d565b60f173ffffffffffffffffffffffffffffffffffffffff166381cf0f6a8a6040518263ffffffff1660e01b8152600401611e7f919061316e565b5f60405180830381865afa158015611e99573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190611ec19190613a2d565b611eca89612873565b60f173ffffffffffffffffffffffffffffffffffffffff16636af32a55306040518263ffffffff1660e01b8152600401611f04919061316e565b5f60405180830381865afa158015611f1e573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190611f469190613a2d565b60f373ffffffffffffffffffffffffffffffffffffffff16638d5c88178a6040518263ffffffff1660e01b8152600401611f8091906135b4565b5f60405180830381865afa158015611f9a573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190611fc29190613a2d565b611fcb8b612873565b60f373ffffffffffffffffffffffffffffffffffffffff16638d5c8817886040518263ffffffff1660e01b815260040161200591906135b4565b5f60405180830381865afa15801561201f573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906120479190613a2d565b60405160200161205d9796959493929190614469565b604051602081830303815290604052925050509695505050505050565b5f73ffffffffffffffffffffffffffffffffffffffff1660045f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8360ff1660ff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603612457575f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306ef1a866040518060400160405280600781526020017f57726170706564000000000000000000000000000000000000000000000000008152508573ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa1580156121da573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906122029190613a2d565b604051602001612213929190613aae565b6040516020818303038152906040526040518060400160405280600181526020017f57000000000000000000000000000000000000000000000000000000000000008152508673ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa1580156122a0573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906122c89190613a2d565b6040516020016122d9929190613aae565b60405160208183030381529060405260126040518463ffffffff1660e01b815260040161230893929190613ae0565b6020604051808303815f875af1158015612324573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061234891906135e8565b90508060045f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8460ff1660ff1681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b5050565b8573ffffffffffffffffffffffffffffffffffffffff166379cc679033866040518363ffffffff1660e01b81526004016124969291906138da565b6020604051808303815f875af11580156124b2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906124d69190613870565b505f60025f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036125a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161259c906145d2565b60405180910390fd5b5f8173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125ef573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061261391906138af565b90505f61262287601284611bd6565b905060015f60148282829054906101000a900467ffffffffffffffff16612649919061392e565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018281526020018360ff1681526020015f151581525060035f8060149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015f6101000a81548160ff021916908360ff16021790555060808201518160030160016101000a81548160ff0219169083151502179055509050505f6127e78b85848a8d8b611cf2565b905060f173ffffffffffffffffffffffffffffffffffffffff166356c657a582876040518363ffffffff1660e01b8152600401612825929190613978565b6020604051808303815f875af1158015612841573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906128659190613870565b505050505050505050505050565b60605f60016128818461296a565b0190505f8167ffffffffffffffff81111561289f5761289e612e2f565b5b6040519080825280601f01601f1916602001820160405280156128d15781602001600182028036833780820191505090505b5090505f82602001820190505b600115612932578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161292757612926613cd0565b5b0494505f85036128de575b819350505050919050565b60606129638273ffffffffffffffffffffffffffffffffffffffff16601460ff16612abb565b9050919050565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106129c6577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816129bc576129bb613cd0565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612a03576d04ee2d6d415b85acef810000000083816129f9576129f8613cd0565b5b0492506020810190505b662386f26fc100008310612a3257662386f26fc100008381612a2857612a27613cd0565b5b0492506010810190505b6305f5e1008310612a5b576305f5e1008381612a5157612a50613cd0565b5b0492506008810190505b6127108310612a80576127108381612a7657612a75613cd0565b5b0492506004810190505b60648310612aa35760648381612a9957612a98613cd0565b5b0492506002810190505b600a8310612ab2576001810190505b80915050919050565b60605f8390505f6002846002612ad19190613dc5565b612adb91906145f0565b67ffffffffffffffff811115612af457612af3612e2f565b5b6040519080825280601f01601f191660200182016040528015612b265781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000815f81518110612b5d57612b5c614623565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612bc057612bbf614623565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053505f6001856002612bfe9190613dc5565b612c0891906145f0565b90505b6001811115612ca7577f3031323334353637383961626364656600000000000000000000000000000000600f841660108110612c4a57612c49614623565b5b1a60f81b828281518110612c6157612c60614623565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350600483901c925080612ca090614650565b9050612c0b565b505f8214612cee5784846040517fe22e27eb000000000000000000000000000000000000000000000000000000008152600401612ce5929190614677565b60405180910390fd5b809250505092915050565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612d3e81612d0a565b8114612d48575f80fd5b50565b5f81359050612d5981612d35565b92915050565b5f60208284031215612d7457612d73612d02565b5b5f612d8184828501612d4b565b91505092915050565b5f8115159050919050565b612d9e81612d8a565b82525050565b5f602082019050612db75f830184612d95565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f612de682612dbd565b9050919050565b612df681612ddc565b8114612e00575f80fd5b50565b5f81359050612e1181612ded565b92915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b612e6582612e1f565b810181811067ffffffffffffffff82111715612e8457612e83612e2f565b5b80604052505050565b5f612e96612cf9565b9050612ea28282612e5c565b919050565b5f67ffffffffffffffff821115612ec157612ec0612e2f565b5b612eca82612e1f565b9050602081019050919050565b828183375f83830152505050565b5f612ef7612ef284612ea7565b612e8d565b905082815260208101848484011115612f1357612f12612e1b565b5b612f1e848285612ed7565b509392505050565b5f82601f830112612f3a57612f39612e17565b5b8135612f4a848260208601612ee5565b91505092915050565b5f8060408385031215612f6957612f68612d02565b5b5f612f7685828601612e03565b925050602083013567ffffffffffffffff811115612f9757612f96612d06565b5b612fa385828601612f26565b9150509250929050565b5f67ffffffffffffffff82169050919050565b612fc981612fad565b8114612fd3575f80fd5b50565b5f81359050612fe481612fc0565b92915050565b612ff381612d8a565b8114612ffd575f80fd5b50565b5f8135905061300e81612fea565b92915050565b5f806040838503121561302a57613029612d02565b5b5f61303785828601612fd6565b925050602061304885828601613000565b9150509250929050565b5f819050919050565b61306481613052565b811461306e575f80fd5b50565b5f8135905061307f8161305b565b92915050565b5f805f805f60a0868803121561309e5761309d612d02565b5b5f86013567ffffffffffffffff8111156130bb576130ba612d06565b5b6130c788828901612f26565b95505060206130d888828901612e03565b945050604086013567ffffffffffffffff8111156130f9576130f8612d06565b5b61310588828901612f26565b935050606061311688828901613071565b925050608061312788828901613071565b9150509295509295909350565b5f6020828403121561314957613148612d02565b5b5f61315684828501612e03565b91505092915050565b61316881612ddc565b82525050565b5f6020820190506131815f83018461315f565b92915050565b5f60ff82169050919050565b61319c81613187565b81146131a6575f80fd5b50565b5f813590506131b781613193565b92915050565b5f80604083850312156131d3576131d2612d02565b5b5f6131e085828601612e03565b92505060206131f1858286016131a9565b9150509250929050565b5f602082840312156132105761320f612d02565b5b5f61321d84828501612fd6565b91505092915050565b5f805f805f805f60e0888a03121561324157613240612d02565b5b5f88013567ffffffffffffffff81111561325e5761325d612d06565b5b61326a8a828b01612f26565b975050602061327b8a828b01612e03565b965050604088013567ffffffffffffffff81111561329c5761329b612d06565b5b6132a88a828b01612f26565b95505060606132b98a828b01613071565b94505060806132ca8a828b01613071565b93505060a088013567ffffffffffffffff8111156132eb576132ea612d06565b5b6132f78a828b01612f26565b92505060c06133088a828b01612fd6565b91505092959891949750929550565b5f805f805f8060c0878903121561333157613330612d02565b5b5f87013567ffffffffffffffff81111561334e5761334d612d06565b5b61335a89828a01612f26565b965050602061336b89828a01612e03565b955050604087013567ffffffffffffffff81111561338c5761338b612d06565b5b61339889828a01612f26565b94505060606133a989828a01613071565b93505060806133ba89828a01613071565b92505060a087013567ffffffffffffffff8111156133db576133da612d06565b5b6133e789828a01612f26565b9150509295509295509295565b5f819050919050565b5f61341761341261340d84612dbd565b6133f4565b612dbd565b9050919050565b5f613428826133fd565b9050919050565b5f6134398261341e565b9050919050565b6134498161342f565b82525050565b5f6020820190506134625f830184613440565b92915050565b5f805f6060848603121561347f5761347e612d02565b5b5f61348c86828701612e03565b935050602084013567ffffffffffffffff8111156134ad576134ac612d06565b5b6134b986828701612f26565b92505060406134ca86828701613071565b9150509250925092565b5f805f80608085870312156134ec576134eb612d02565b5b5f6134f987828801612e03565b945050602085013567ffffffffffffffff81111561351a57613519612d06565b5b61352687828801612f26565b935050604061353787828801613071565b9250506060613548878288016131a9565b91505092959194509250565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f61358682613554565b613590818561355e565b93506135a081856020860161356e565b6135a981612e1f565b840191505092915050565b5f6020820190508181035f8301526135cc818461357c565b905092915050565b5f815190506135e281612ded565b92915050565b5f602082840312156135fd576135fc612d02565b5b5f61360a848285016135d4565b91505092915050565b7f6c6f63616c20746f6b656e20646f65736e2774206578697374000000000000005f82015250565b5f61364760198361355e565b915061365282613613565b602082019050919050565b5f6020820190508181035f8301526136748161363b565b9050919050565b5f815190506136898161305b565b92915050565b5f602082840312156136a4576136a3612d02565b5b5f6136b18482850161367b565b91505092915050565b7f6f6e6c792074686520636f6e747261637420697473656c662063616e2063616c5f8201527f6c20746869732066756e6374696f6e0000000000000000000000000000000000602082015250565b5f613714602f8361355e565b915061371f826136ba565b604082019050919050565b5f6020820190508181035f83015261374181613708565b9050919050565b7f45524332303a2063616c6c6572206973206e6f742074686520636861696e00005f82015250565b5f61377c601e8361355e565b915061378782613748565b602082019050919050565b5f6020820190508181035f8301526137a981613770565b9050919050565b7f696e76616c696420666163746f727920616464726573730000000000000000005f82015250565b5f6137e460178361355e565b91506137ef826137b0565b602082019050919050565b5f6020820190508181035f830152613811816137d8565b9050919050565b61382181613052565b82525050565b5f60608201905061383a5f83018661315f565b613847602083018561315f565b6138546040830184613818565b949350505050565b5f8151905061386a81612fea565b92915050565b5f6020828403121561388557613884612d02565b5b5f6138928482850161385c565b91505092915050565b5f815190506138a981613193565b92915050565b5f602082840312156138c4576138c3612d02565b5b5f6138d18482850161389b565b91505092915050565b5f6040820190506138ed5f83018561315f565b6138fa6020830184613818565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61393882612fad565b915061394383612fad565b9250828201905067ffffffffffffffff81111561396357613962613901565b5b92915050565b61397281612fad565b82525050565b5f6040820190508181035f830152613990818561357c565b905061399f6020830184613969565b9392505050565b5f6020820190506139b95f830184613818565b92915050565b5f6139d16139cc84612ea7565b612e8d565b9050828152602081018484840111156139ed576139ec612e1b565b5b6139f884828561356e565b509392505050565b5f82601f830112613a1457613a13612e17565b5b8151613a248482602086016139bf565b91505092915050565b5f60208284031215613a4257613a41612d02565b5b5f82015167ffffffffffffffff811115613a5f57613a5e612d06565b5b613a6b84828501613a00565b91505092915050565b5f81905092915050565b5f613a8882613554565b613a928185613a74565b9350613aa281856020860161356e565b80840191505092915050565b5f613ab98285613a7e565b9150613ac58284613a7e565b91508190509392505050565b613ada81613187565b82525050565b5f6060820190508181035f830152613af8818661357c565b90508181036020830152613b0c818561357c565b9050613b1b6040830184613ad1565b949350505050565b5f613b2d82613187565b9150613b3883613187565b9250828203905060ff811115613b5157613b50613901565b5b92915050565b5f8160011c9050919050565b5f808291508390505b6001851115613bac57808604811115613b8857613b87613901565b5b6001851615613b975780820291505b8081029050613ba585613b57565b9450613b6c565b94509492505050565b5f82613bc45760019050613c7f565b81613bd1575f9050613c7f565b8160018114613be75760028114613bf157613c20565b6001915050613c7f565b60ff841115613c0357613c02613901565b5b8360020a915084821115613c1a57613c19613901565b5b50613c7f565b5060208310610133831016604e8410600b8410161715613c555782820a905083811115613c5057613c4f613901565b5b613c7f565b613c628484846001613b63565b92509050818404811115613c7957613c78613901565b5b81810290505b9392505050565b5f613c9082613052565b9150613c9b83613052565b9250613cc87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613bb5565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f613d0782613052565b9150613d1283613052565b925082613d2257613d21613cd0565b5b828206905092915050565b7f6475737420616d6f756e742073686f756c64206265207a65726f0000000000005f82015250565b5f613d61601a8361355e565b9150613d6c82613d2d565b602082019050919050565b5f6020820190508181035f830152613d8e81613d55565b9050919050565b5f613d9f82613052565b9150613daa83613052565b925082613dba57613db9613cd0565b5b828204905092915050565b5f613dcf82613052565b9150613dda83613052565b9250828202613de881613052565b91508282048414831517613dff57613dfe613901565b5b5092915050565b7f636f6e76657274656420616d6f756e74206973207a65726f00000000000000005f82015250565b5f613e3a60188361355e565b9150613e4582613e06565b602082019050919050565b5f6020820190508181035f830152613e6781613e2e565b9050919050565b7f7b2265766d223a207b226173796e635f63616c6c6261636b223a207b226964225f8201527f3a20000000000000000000000000000000000000000000000000000000000000602082015250565b5f613ec8602283613a74565b9150613ed382613e6e565b602282019050919050565b7f2c22636f6e74726163745f61646472657373223a2200000000000000000000005f82015250565b5f613f12601583613a74565b9150613f1d82613ede565b601582019050919050565b7f227d7d7d000000000000000000000000000000000000000000000000000000005f82015250565b5f613f5c600483613a74565b9150613f6782613f28565b600482019050919050565b5f613f7c82613ebc565b9150613f888285613a7e565b9150613f9382613f06565b9150613f9f8284613a7e565b9150613faa82613f50565b91508190509392505050565b5f6040820190508181035f830152613fce818561357c565b90508181036020830152613fe2818461357c565b90509392505050565b7f7b224074797065223a20222f6962632e6170706c69636174696f6e732e7472615f8201527f6e736665722e76312e4d73675472616e73666572222c00000000000000000000602082015250565b5f614045603683613a74565b915061405082613feb565b603682019050919050565b7f22736f757263655f706f7274223a20227472616e73666572222c0000000000005f82015250565b5f61408f601a83613a74565b915061409a8261405b565b601a82019050919050565b7f22736f757263655f6368616e6e656c223a2000000000000000000000000000005f82015250565b5f6140d9601283613a74565b91506140e4826140a5565b601282019050919050565b7f2c000000000000000000000000000000000000000000000000000000000000005f82015250565b5f614123600183613a74565b915061412e826140ef565b600182019050919050565b7f22746f6b656e223a207b202264656e6f6d223a202200000000000000000000005f82015250565b5f61416d601583613a74565b915061417882614139565b601582019050919050565b7f222c0000000000000000000000000000000000000000000000000000000000005f82015250565b5f6141b7600283613a74565b91506141c282614183565b600282019050919050565b7f22616d6f756e74223a20220000000000000000000000000000000000000000005f82015250565b5f614201600b83613a74565b915061420c826141cd565b600b82019050919050565b7f227d2c00000000000000000000000000000000000000000000000000000000005f82015250565b5f61424b600383613a74565b915061425682614217565b600382019050919050565b7f2273656e646572223a20220000000000000000000000000000000000000000005f82015250565b5f614295600b83613a74565b91506142a082614261565b600b82019050919050565b7f227265636569766572223a2000000000000000000000000000000000000000005f82015250565b5f6142df600c83613a74565b91506142ea826142ab565b600c82019050919050565b7f2274696d656f75745f686569676874223a207b227265766973696f6e5f6e756d5f8201527f626572223a202230222c227265766973696f6e5f686569676874223a2022302260208201527f7d2c000000000000000000000000000000000000000000000000000000000000604082015250565b5f614375604283613a74565b9150614380826142f5565b604282019050919050565b7f2274696d656f75745f74696d657374616d70223a2022000000000000000000005f82015250565b5f6143bf601683613a74565b91506143ca8261438b565b601682019050919050565b7f226d656d6f223a200000000000000000000000000000000000000000000000005f82015250565b5f614409600883613a74565b9150614414826143d5565b600882019050919050565b7f7d000000000000000000000000000000000000000000000000000000000000005f82015250565b5f614453600183613a74565b915061445e8261441f565b600182019050919050565b5f61447382614039565b915061447e82614083565b9150614489826140cd565b9150614495828a613a7e565b91506144a082614117565b91506144ab82614161565b91506144b78289613a7e565b91506144c2826141ab565b91506144cd826141f5565b91506144d98288613a7e565b91506144e48261423f565b91506144ef82614289565b91506144fb8287613a7e565b9150614506826141ab565b9150614511826142d3565b915061451d8286613a7e565b915061452882614117565b915061453382614369565b915061453e826143b3565b915061454a8285613a7e565b9150614555826141ab565b9150614560826143fd565b915061456c8284613a7e565b915061457782614447565b915081905098975050505050505050565b7f72656d6f746520746f6b656e20646f65736e27742065786973740000000000005f82015250565b5f6145bc601a8361355e565b91506145c782614588565b602082019050919050565b5f6020820190508181035f8301526145e9816145b0565b9050919050565b5f6145fa82613052565b915061460583613052565b925082820190508082111561461d5761461c613901565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f61465a82613052565b91505f820361466c5761466b613901565b5b600182039050919050565b5f60408201905061468a5f830185613818565b6146976020830184613818565b939250505056fea164736f6c6343000819000a",
}

// Erc20WrapperABI is the input ABI used to generate the binding from.
// Deprecated: Use Erc20WrapperMetaData.ABI instead.
var Erc20WrapperABI = Erc20WrapperMetaData.ABI

// Erc20WrapperBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use Erc20WrapperMetaData.Bin instead.
var Erc20WrapperBin = Erc20WrapperMetaData.Bin

// DeployErc20Wrapper deploys a new Ethereum contract, binding an instance of Erc20Wrapper to it.
func DeployErc20Wrapper(auth *bind.TransactOpts, backend bind.ContractBackend, erc20Factory common.Address) (common.Address, *types.Transaction, *Erc20Wrapper, error) {
	parsed, err := Erc20WrapperMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(Erc20WrapperBin), backend, erc20Factory)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Erc20Wrapper{Erc20WrapperCaller: Erc20WrapperCaller{contract: contract}, Erc20WrapperTransactor: Erc20WrapperTransactor{contract: contract}, Erc20WrapperFilterer: Erc20WrapperFilterer{contract: contract}}, nil
}

// Erc20Wrapper is an auto generated Go binding around an Ethereum contract.
type Erc20Wrapper struct {
	Erc20WrapperCaller     // Read-only binding to the contract
	Erc20WrapperTransactor // Write-only binding to the contract
	Erc20WrapperFilterer   // Log filterer for contract events
}

// Erc20WrapperCaller is an auto generated read-only Go binding around an Ethereum contract.
type Erc20WrapperCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Erc20WrapperTransactor is an auto generated write-only Go binding around an Ethereum contract.
type Erc20WrapperTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Erc20WrapperFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type Erc20WrapperFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Erc20WrapperSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type Erc20WrapperSession struct {
	Contract     *Erc20Wrapper     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// Erc20WrapperCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type Erc20WrapperCallerSession struct {
	Contract *Erc20WrapperCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// Erc20WrapperTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type Erc20WrapperTransactorSession struct {
	Contract     *Erc20WrapperTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// Erc20WrapperRaw is an auto generated low-level Go binding around an Ethereum contract.
type Erc20WrapperRaw struct {
	Contract *Erc20Wrapper // Generic contract binding to access the raw methods on
}

// Erc20WrapperCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type Erc20WrapperCallerRaw struct {
	Contract *Erc20WrapperCaller // Generic read-only contract binding to access the raw methods on
}

// Erc20WrapperTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type Erc20WrapperTransactorRaw struct {
	Contract *Erc20WrapperTransactor // Generic write-only contract binding to access the raw methods on
}

// NewErc20Wrapper creates a new instance of Erc20Wrapper, bound to a specific deployed contract.
func NewErc20Wrapper(address common.Address, backend bind.ContractBackend) (*Erc20Wrapper, error) {
	contract, err := bindErc20Wrapper(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Erc20Wrapper{Erc20WrapperCaller: Erc20WrapperCaller{contract: contract}, Erc20WrapperTransactor: Erc20WrapperTransactor{contract: contract}, Erc20WrapperFilterer: Erc20WrapperFilterer{contract: contract}}, nil
}

// NewErc20WrapperCaller creates a new read-only instance of Erc20Wrapper, bound to a specific deployed contract.
func NewErc20WrapperCaller(address common.Address, caller bind.ContractCaller) (*Erc20WrapperCaller, error) {
	contract, err := bindErc20Wrapper(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperCaller{contract: contract}, nil
}

// NewErc20WrapperTransactor creates a new write-only instance of Erc20Wrapper, bound to a specific deployed contract.
func NewErc20WrapperTransactor(address common.Address, transactor bind.ContractTransactor) (*Erc20WrapperTransactor, error) {
	contract, err := bindErc20Wrapper(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperTransactor{contract: contract}, nil
}

// NewErc20WrapperFilterer creates a new log filterer instance of Erc20Wrapper, bound to a specific deployed contract.
func NewErc20WrapperFilterer(address common.Address, filterer bind.ContractFilterer) (*Erc20WrapperFilterer, error) {
	contract, err := bindErc20Wrapper(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperFilterer{contract: contract}, nil
}

// bindErc20Wrapper binds a generic wrapper to an already deployed contract.
func bindErc20Wrapper(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := Erc20WrapperMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Erc20Wrapper *Erc20WrapperRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Erc20Wrapper.Contract.Erc20WrapperCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Erc20Wrapper *Erc20WrapperRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.Erc20WrapperTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Erc20Wrapper *Erc20WrapperRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.Erc20WrapperTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Erc20Wrapper *Erc20WrapperCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Erc20Wrapper.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Erc20Wrapper *Erc20WrapperTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Erc20Wrapper *Erc20WrapperTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.contract.Transact(opts, method, params...)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) Factory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "factory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) Factory() (common.Address, error) {
	return _Erc20Wrapper.Contract.Factory(&_Erc20Wrapper.CallOpts)
}

// Factory is a free data retrieval call binding the contract method 0xc45a0155.
//
// Solidity: function factory() view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) Factory() (common.Address, error) {
	return _Erc20Wrapper.Contract.Factory(&_Erc20Wrapper.CallOpts)
}

// LocalTokens is a free data retrieval call binding the contract method 0x1efb51e6.
//
// Solidity: function localTokens(address , uint8 ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) LocalTokens(opts *bind.CallOpts, arg0 common.Address, arg1 uint8) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "localTokens", arg0, arg1)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LocalTokens is a free data retrieval call binding the contract method 0x1efb51e6.
//
// Solidity: function localTokens(address , uint8 ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) LocalTokens(arg0 common.Address, arg1 uint8) (common.Address, error) {
	return _Erc20Wrapper.Contract.LocalTokens(&_Erc20Wrapper.CallOpts, arg0, arg1)
}

// LocalTokens is a free data retrieval call binding the contract method 0x1efb51e6.
//
// Solidity: function localTokens(address , uint8 ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) LocalTokens(arg0 common.Address, arg1 uint8) (common.Address, error) {
	return _Erc20Wrapper.Contract.LocalTokens(&_Erc20Wrapper.CallOpts, arg0, arg1)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) Owner() (common.Address, error) {
	return _Erc20Wrapper.Contract.Owner(&_Erc20Wrapper.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) Owner() (common.Address, error) {
	return _Erc20Wrapper.Contract.Owner(&_Erc20Wrapper.CallOpts)
}

// RemoteTokens is a free data retrieval call binding the contract method 0x1de5537c.
//
// Solidity: function remoteTokens(address ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) RemoteTokens(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "remoteTokens", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RemoteTokens is a free data retrieval call binding the contract method 0x1de5537c.
//
// Solidity: function remoteTokens(address ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) RemoteTokens(arg0 common.Address) (common.Address, error) {
	return _Erc20Wrapper.Contract.RemoteTokens(&_Erc20Wrapper.CallOpts, arg0)
}

// RemoteTokens is a free data retrieval call binding the contract method 0x1de5537c.
//
// Solidity: function remoteTokens(address ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) RemoteTokens(arg0 common.Address) (common.Address, error) {
	return _Erc20Wrapper.Contract.RemoteTokens(&_Erc20Wrapper.CallOpts, arg0)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Erc20Wrapper *Erc20WrapperCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Erc20Wrapper *Erc20WrapperSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Erc20Wrapper.Contract.SupportsInterface(&_Erc20Wrapper.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Erc20Wrapper *Erc20WrapperCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Erc20Wrapper.Contract.SupportsInterface(&_Erc20Wrapper.CallOpts, interfaceId)
}

// IbcAck is a paid mutator transaction binding the contract method 0x0d4f1f9d.
//
// Solidity: function ibc_ack(uint64 callback_id, bool success) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) IbcAck(opts *bind.TransactOpts, callback_id uint64, success bool) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "ibc_ack", callback_id, success)
}

// IbcAck is a paid mutator transaction binding the contract method 0x0d4f1f9d.
//
// Solidity: function ibc_ack(uint64 callback_id, bool success) returns()
func (_Erc20Wrapper *Erc20WrapperSession) IbcAck(callback_id uint64, success bool) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.IbcAck(&_Erc20Wrapper.TransactOpts, callback_id, success)
}

// IbcAck is a paid mutator transaction binding the contract method 0x0d4f1f9d.
//
// Solidity: function ibc_ack(uint64 callback_id, bool success) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) IbcAck(callback_id uint64, success bool) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.IbcAck(&_Erc20Wrapper.TransactOpts, callback_id, success)
}

// IbcTimeout is a paid mutator transaction binding the contract method 0x31a503f0.
//
// Solidity: function ibc_timeout(uint64 callback_id) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) IbcTimeout(opts *bind.TransactOpts, callback_id uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "ibc_timeout", callback_id)
}

// IbcTimeout is a paid mutator transaction binding the contract method 0x31a503f0.
//
// Solidity: function ibc_timeout(uint64 callback_id) returns()
func (_Erc20Wrapper *Erc20WrapperSession) IbcTimeout(callback_id uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.IbcTimeout(&_Erc20Wrapper.TransactOpts, callback_id)
}

// IbcTimeout is a paid mutator transaction binding the contract method 0x31a503f0.
//
// Solidity: function ibc_timeout(uint64 callback_id) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) IbcTimeout(callback_id uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.IbcTimeout(&_Erc20Wrapper.TransactOpts, callback_id)
}

// SetFactory is a paid mutator transaction binding the contract method 0x5bb47808.
//
// Solidity: function setFactory(address newFactory) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) SetFactory(opts *bind.TransactOpts, newFactory common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "setFactory", newFactory)
}

// SetFactory is a paid mutator transaction binding the contract method 0x5bb47808.
//
// Solidity: function setFactory(address newFactory) returns()
func (_Erc20Wrapper *Erc20WrapperSession) SetFactory(newFactory common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.SetFactory(&_Erc20Wrapper.TransactOpts, newFactory)
}

// SetFactory is a paid mutator transaction binding the contract method 0x5bb47808.
//
// Solidity: function setFactory(address newFactory) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) SetFactory(newFactory common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.SetFactory(&_Erc20Wrapper.TransactOpts, newFactory)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Erc20Wrapper *Erc20WrapperSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.TransferOwnership(&_Erc20Wrapper.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.TransferOwnership(&_Erc20Wrapper.TransactOpts, newOwner)
}

// UnwrapLocal is a paid mutator transaction binding the contract method 0x05f1f68e.
//
// Solidity: function unwrapLocal(address receiver, string remoteDenom) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) UnwrapLocal(opts *bind.TransactOpts, receiver common.Address, remoteDenom string) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "unwrapLocal", receiver, remoteDenom)
}

// UnwrapLocal is a paid mutator transaction binding the contract method 0x05f1f68e.
//
// Solidity: function unwrapLocal(address receiver, string remoteDenom) returns()
func (_Erc20Wrapper *Erc20WrapperSession) UnwrapLocal(receiver common.Address, remoteDenom string) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.UnwrapLocal(&_Erc20Wrapper.TransactOpts, receiver, remoteDenom)
}

// UnwrapLocal is a paid mutator transaction binding the contract method 0x05f1f68e.
//
// Solidity: function unwrapLocal(address receiver, string remoteDenom) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) UnwrapLocal(receiver common.Address, remoteDenom string) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.UnwrapLocal(&_Erc20Wrapper.TransactOpts, receiver, remoteDenom)
}

// UnwrapLocal0 is a paid mutator transaction binding the contract method 0xd96e6e91.
//
// Solidity: function unwrapLocal(address receiver, string remoteDenom, uint256 remoteAmount) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) UnwrapLocal0(opts *bind.TransactOpts, receiver common.Address, remoteDenom string, remoteAmount *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "unwrapLocal0", receiver, remoteDenom, remoteAmount)
}

// UnwrapLocal0 is a paid mutator transaction binding the contract method 0xd96e6e91.
//
// Solidity: function unwrapLocal(address receiver, string remoteDenom, uint256 remoteAmount) returns()
func (_Erc20Wrapper *Erc20WrapperSession) UnwrapLocal0(receiver common.Address, remoteDenom string, remoteAmount *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.UnwrapLocal0(&_Erc20Wrapper.TransactOpts, receiver, remoteDenom, remoteAmount)
}

// UnwrapLocal0 is a paid mutator transaction binding the contract method 0xd96e6e91.
//
// Solidity: function unwrapLocal(address receiver, string remoteDenom, uint256 remoteAmount) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) UnwrapLocal0(receiver common.Address, remoteDenom string, remoteAmount *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.UnwrapLocal0(&_Erc20Wrapper.TransactOpts, receiver, remoteDenom, remoteAmount)
}

// UnwrapRemote is a paid mutator transaction binding the contract method 0x0f866782.
//
// Solidity: function unwrapRemote(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) UnwrapRemote(opts *bind.TransactOpts, channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "unwrapRemote", channel, localToken, receiver, localAmount, timeout)
}

// UnwrapRemote is a paid mutator transaction binding the contract method 0x0f866782.
//
// Solidity: function unwrapRemote(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout) returns()
func (_Erc20Wrapper *Erc20WrapperSession) UnwrapRemote(channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.UnwrapRemote(&_Erc20Wrapper.TransactOpts, channel, localToken, receiver, localAmount, timeout)
}

// UnwrapRemote is a paid mutator transaction binding the contract method 0x0f866782.
//
// Solidity: function unwrapRemote(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) UnwrapRemote(channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.UnwrapRemote(&_Erc20Wrapper.TransactOpts, channel, localToken, receiver, localAmount, timeout)
}

// UnwrapRemote0 is a paid mutator transaction binding the contract method 0x9c9d6057.
//
// Solidity: function unwrapRemote(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout, string memo) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) UnwrapRemote0(opts *bind.TransactOpts, channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int, memo string) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "unwrapRemote0", channel, localToken, receiver, localAmount, timeout, memo)
}

// UnwrapRemote0 is a paid mutator transaction binding the contract method 0x9c9d6057.
//
// Solidity: function unwrapRemote(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout, string memo) returns()
func (_Erc20Wrapper *Erc20WrapperSession) UnwrapRemote0(channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int, memo string) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.UnwrapRemote0(&_Erc20Wrapper.TransactOpts, channel, localToken, receiver, localAmount, timeout, memo)
}

// UnwrapRemote0 is a paid mutator transaction binding the contract method 0x9c9d6057.
//
// Solidity: function unwrapRemote(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout, string memo) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) UnwrapRemote0(channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int, memo string) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.UnwrapRemote0(&_Erc20Wrapper.TransactOpts, channel, localToken, receiver, localAmount, timeout, memo)
}

// UnwrapRemote1 is a paid mutator transaction binding the contract method 0xe1d015f2.
//
// Solidity: function unwrapRemote(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout, string memo, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) UnwrapRemote1(opts *bind.TransactOpts, channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int, memo string, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "unwrapRemote1", channel, localToken, receiver, localAmount, timeout, memo, gasLimit)
}

// UnwrapRemote1 is a paid mutator transaction binding the contract method 0xe1d015f2.
//
// Solidity: function unwrapRemote(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout, string memo, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperSession) UnwrapRemote1(channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int, memo string, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.UnwrapRemote1(&_Erc20Wrapper.TransactOpts, channel, localToken, receiver, localAmount, timeout, memo, gasLimit)
}

// UnwrapRemote1 is a paid mutator transaction binding the contract method 0xe1d015f2.
//
// Solidity: function unwrapRemote(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout, string memo, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) UnwrapRemote1(channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int, memo string, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.UnwrapRemote1(&_Erc20Wrapper.TransactOpts, channel, localToken, receiver, localAmount, timeout, memo, gasLimit)
}

// WrapLocal is a paid mutator transaction binding the contract method 0x5e7faa55.
//
// Solidity: function wrapLocal(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout, string memo, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) WrapLocal(opts *bind.TransactOpts, channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int, memo string, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "wrapLocal", channel, localToken, receiver, localAmount, timeout, memo, gasLimit)
}

// WrapLocal is a paid mutator transaction binding the contract method 0x5e7faa55.
//
// Solidity: function wrapLocal(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout, string memo, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperSession) WrapLocal(channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int, memo string, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.WrapLocal(&_Erc20Wrapper.TransactOpts, channel, localToken, receiver, localAmount, timeout, memo, gasLimit)
}

// WrapLocal is a paid mutator transaction binding the contract method 0x5e7faa55.
//
// Solidity: function wrapLocal(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout, string memo, uint64 gasLimit) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) WrapLocal(channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int, memo string, gasLimit uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.WrapLocal(&_Erc20Wrapper.TransactOpts, channel, localToken, receiver, localAmount, timeout, memo, gasLimit)
}

// WrapLocal0 is a paid mutator transaction binding the contract method 0xa9dff95b.
//
// Solidity: function wrapLocal(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) WrapLocal0(opts *bind.TransactOpts, channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "wrapLocal0", channel, localToken, receiver, localAmount, timeout)
}

// WrapLocal0 is a paid mutator transaction binding the contract method 0xa9dff95b.
//
// Solidity: function wrapLocal(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout) returns()
func (_Erc20Wrapper *Erc20WrapperSession) WrapLocal0(channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.WrapLocal0(&_Erc20Wrapper.TransactOpts, channel, localToken, receiver, localAmount, timeout)
}

// WrapLocal0 is a paid mutator transaction binding the contract method 0xa9dff95b.
//
// Solidity: function wrapLocal(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) WrapLocal0(channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.WrapLocal0(&_Erc20Wrapper.TransactOpts, channel, localToken, receiver, localAmount, timeout)
}

// WrapLocal1 is a paid mutator transaction binding the contract method 0xc59114c2.
//
// Solidity: function wrapLocal(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout, string memo) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) WrapLocal1(opts *bind.TransactOpts, channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int, memo string) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "wrapLocal1", channel, localToken, receiver, localAmount, timeout, memo)
}

// WrapLocal1 is a paid mutator transaction binding the contract method 0xc59114c2.
//
// Solidity: function wrapLocal(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout, string memo) returns()
func (_Erc20Wrapper *Erc20WrapperSession) WrapLocal1(channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int, memo string) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.WrapLocal1(&_Erc20Wrapper.TransactOpts, channel, localToken, receiver, localAmount, timeout, memo)
}

// WrapLocal1 is a paid mutator transaction binding the contract method 0xc59114c2.
//
// Solidity: function wrapLocal(string channel, address localToken, string receiver, uint256 localAmount, uint256 timeout, string memo) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) WrapLocal1(channel string, localToken common.Address, receiver string, localAmount *big.Int, timeout *big.Int, memo string) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.WrapLocal1(&_Erc20Wrapper.TransactOpts, channel, localToken, receiver, localAmount, timeout, memo)
}

// WrapRemote is a paid mutator transaction binding the contract method 0xdd4f77f0.
//
// Solidity: function wrapRemote(address receiver, string remoteDenom, uint256 remoteAmount, uint8 remoteDecimals) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) WrapRemote(opts *bind.TransactOpts, receiver common.Address, remoteDenom string, remoteAmount *big.Int, remoteDecimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "wrapRemote", receiver, remoteDenom, remoteAmount, remoteDecimals)
}

// WrapRemote is a paid mutator transaction binding the contract method 0xdd4f77f0.
//
// Solidity: function wrapRemote(address receiver, string remoteDenom, uint256 remoteAmount, uint8 remoteDecimals) returns()
func (_Erc20Wrapper *Erc20WrapperSession) WrapRemote(receiver common.Address, remoteDenom string, remoteAmount *big.Int, remoteDecimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.WrapRemote(&_Erc20Wrapper.TransactOpts, receiver, remoteDenom, remoteAmount, remoteDecimals)
}

// WrapRemote is a paid mutator transaction binding the contract method 0xdd4f77f0.
//
// Solidity: function wrapRemote(address receiver, string remoteDenom, uint256 remoteAmount, uint8 remoteDecimals) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) WrapRemote(receiver common.Address, remoteDenom string, remoteAmount *big.Int, remoteDecimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.WrapRemote(&_Erc20Wrapper.TransactOpts, receiver, remoteDenom, remoteAmount, remoteDecimals)
}

// Erc20WrapperOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Erc20Wrapper contract.
type Erc20WrapperOwnershipTransferredIterator struct {
	Event *Erc20WrapperOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Erc20WrapperOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Erc20WrapperOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Erc20WrapperOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Erc20WrapperOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Erc20WrapperOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Erc20WrapperOwnershipTransferred represents a OwnershipTransferred event raised by the Erc20Wrapper contract.
type Erc20WrapperOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Erc20Wrapper *Erc20WrapperFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*Erc20WrapperOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Erc20Wrapper.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperOwnershipTransferredIterator{contract: _Erc20Wrapper.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Erc20Wrapper *Erc20WrapperFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *Erc20WrapperOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Erc20Wrapper.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Erc20WrapperOwnershipTransferred)
				if err := _Erc20Wrapper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Erc20Wrapper *Erc20WrapperFilterer) ParseOwnershipTransferred(log types.Log) (*Erc20WrapperOwnershipTransferred, error) {
	event := new(Erc20WrapperOwnershipTransferred)
	if err := _Erc20Wrapper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
