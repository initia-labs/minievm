// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package erc20_wrapper

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// Erc20WrapperMetaData contains all meta data concerning the Erc20Wrapper contract.
var Erc20WrapperMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC20Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"createERC20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"callback_id\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"ibc_ack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"callback_id\",\"type\":\"uint64\"}],\"name\":\"ibc_timeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"originTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"wrappedTokenDenom\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wrappedAmt\",\"type\":\"uint256\"}],\"name\":\"unwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"}],\"name\":\"wrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wrappedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60806040525f8060146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055503480156036575f80fd5b50335f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550615063806100835f395ff3fe608060405234801561000f575f80fd5b506004361061009c575f3560e01c80639a111432116100645780639a11143214610156578063b5ad1fb614610172578063d5c6b504146101a2578063f2fde38b146101d2578063fc078758146101ee5761009c565b806301ffc9a7146100a057806306ef1a86146100d05780630d4f1f9d1461010057806331a503f01461011c5780638da5cb5b14610138575b5f80fd5b6100ba60048036038101906100b59190611aac565b61020a565b6040516100c79190611af1565b60405180910390f35b6100ea60048036038101906100e59190611c7c565b610273565b6040516100f79190611d43565b60405180910390f35b61011a60048036038101906101159190611dc3565b6103f2565b005b61013660048036038101906101319190611e01565b610405565b005b610140610411565b60405161014d9190611d43565b60405180910390f35b610170600480360381019061016b9190611e89565b610434565b005b61018c60048036038101906101879190611f38565b6108da565b6040516101999190611d43565b60405180910390f35b6101bc60048036038101906101b79190611f38565b61090a565b6040516101c99190611d43565b60405180910390f35b6101ec60048036038101906101e79190611f38565b61093a565b005b61020860048036038101906102039190611f63565b610a82565b005b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b5f8084848460405161028490611a39565b6102909392919061203e565b604051809103905ff0801580156102a9573d5f803e3d5ffd5b50905060f273ffffffffffffffffffffffffffffffffffffffff1663d126274a826040518263ffffffff1660e01b81526004016102e69190611d43565b6020604051808303815f875af1158015610302573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103269190612095565b508073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b336040518263ffffffff1660e01b81526004016103609190611d43565b5f604051808303815f87803b158015610377575f80fd5b505af1158015610389573d5f803e3d5ffd5b505050503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f85e892981b234101136bc30081e0a5c44345bebc0940193230c20a43b279e2d160405160405180910390a3809150509392505050565b806104015761040082610dfb565b5b5050565b61040e81610dfb565b50565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61043d84610f36565b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161047a939291906120cf565b6020604051808303815f875af1158015610496573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104ba9190612095565b505f610534838673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610509573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061052d9190612118565b6006611259565b905060015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930836040518363ffffffff1660e01b81526004016105cd929190612143565b5f604051808303815f87803b1580156105e4575f80fd5b505af11580156105f6573d5f803e3d5ffd5b5050505060015f60148282829054906101000a900467ffffffffffffffff1661061f9190612197565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200160f173ffffffffffffffffffffffffffffffffffffffff166381cf0f6a60015f8a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016107029190611d43565b5f604051808303815f875af115801561071d573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906107459190612240565b81526020018281525060035f8060149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190816107e19190612481565b506040820151816002015590505060f173ffffffffffffffffffffffffffffffffffffffff1663d46f64e66108758860015f8a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685878a611328565b6040518263ffffffff1660e01b81526004016108919190612550565b6020604051808303815f875af11580156108ad573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108d19190612095565b50505050505050565b6002602052805f5260405f205f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001602052805f5260405f205f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610990575f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109c7575f80fd5b8073ffffffffffffffffffffffffffffffffffffffff165f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3805f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b5f60f173ffffffffffffffffffffffffffffffffffffffff16632b3324ce856040518263ffffffff1660e01b8152600401610abd9190612550565b6020604051808303815f875af1158015610ad9573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610afd9190612584565b90505f73ffffffffffffffffffffffffffffffffffffffff1660025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610bc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc0906125f9565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166379cc679033846040518363ffffffff1660e01b8152600401610c04929190612143565b6020604051808303815f875af1158015610c20573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c449190612095565b505f610d1a83600660025f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cf1573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d159190612118565b611259565b905060025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85836040518363ffffffff1660e01b8152600401610db3929190612143565b6020604051808303815f875af1158015610dcf573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610df39190612095565b505050505050565b5f60035f8367ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f206040518060600160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054610e90906122b4565b80601f0160208091040260200160405190810160405280929190818152602001828054610ebc906122b4565b8015610f075780601f10610ede57610100808354040283529160200191610f07565b820191905f5260205f20905b815481529060010190602001808311610eea57829003601f168201915b505050505081526020016002820154815250509050610f328160200151825f01518360400151610a82565b5050565b5f73ffffffffffffffffffffffffffffffffffffffff1660015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611256575f61115c6040518060400160405280600781526020017f57726170706564000000000000000000000000000000000000000000000000008152508373ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa158015611047573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f8201168201806040525081019061106f9190612240565b604051602001611080929190612651565b6040516020818303038152906040526040518060400160405280600181526020017f57000000000000000000000000000000000000000000000000000000000000008152508473ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa15801561110d573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906111359190612240565b604051602001611146929190612651565b604051602081830303815290604052600661149a565b90508060015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b50565b5f8160ff168360ff16111561129a575f82846112759190612674565b60ff16600a61128491906127d7565b90508085611292919061284e565b9150506112df565b8160ff168360ff1610156112da575f83836112b59190612674565b60ff16600a6112c491906127d7565b905080856112d2919061287e565b9150506112de565b8390505b5b5f8103611321576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131890612909565b60405180910390fd5b9392505050565b60608560f173ffffffffffffffffffffffffffffffffffffffff166381cf0f6a876040518263ffffffff1660e01b81526004016113659190611d43565b5f604051808303815f875af1158015611380573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906113a89190612240565b6113b1866115b3565b60f173ffffffffffffffffffffffffffffffffffffffff16636af32a55306040518263ffffffff1660e01b81526004016113eb9190611d43565b5f604051808303815f875af1158015611406573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f8201168201806040525081019061142e9190612240565b85611438886115b3565b6114605f60149054906101000a900467ffffffffffffffff1667ffffffffffffffff166115b3565b6114693061167d565b604051602001611480989796959493929190612def565b604051602081830303815290604052905095945050505050565b5f808484846040516114ab90611a39565b6114b79392919061203e565b604051809103905ff0801580156114d0573d5f803e3d5ffd5b50905060f273ffffffffffffffffffffffffffffffffffffffff1663d126274a826040518263ffffffff1660e01b815260040161150d9190611d43565b6020604051808303815f875af1158015611529573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061154d9190612095565b503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f85e892981b234101136bc30081e0a5c44345bebc0940193230c20a43b279e2d160405160405180910390a3809150509392505050565b60605f60016115c1846116aa565b0190505f8167ffffffffffffffff8111156115df576115de611b22565b5b6040519080825280601f01601f1916602001820160405280156116115781602001600182028036833780820191505090505b5090505f82602001820190505b600115611672578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161166757611666612821565b5b0494505f850361161e575b819350505050919050565b60606116a38273ffffffffffffffffffffffffffffffffffffffff16601460ff166117fb565b9050919050565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611706577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816116fc576116fb612821565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611743576d04ee2d6d415b85acef8100000000838161173957611738612821565b5b0492506020810190505b662386f26fc10000831061177257662386f26fc10000838161176857611767612821565b5b0492506010810190505b6305f5e100831061179b576305f5e100838161179157611790612821565b5b0492506008810190505b61271083106117c05761271083816117b6576117b5612821565b5b0492506004810190505b606483106117e357606483816117d9576117d8612821565b5b0492506002810190505b600a83106117f2576001810190505b80915050919050565b60605f8390505f6002846002611811919061287e565b61181b9190612f3c565b67ffffffffffffffff81111561183457611833611b22565b5b6040519080825280601f01601f1916602001820160405280156118665781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000815f8151811061189d5761189c612f6f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611900576118ff612f6f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053505f600185600261193e919061287e565b6119489190612f3c565b90505b60018111156119e7577f3031323334353637383961626364656600000000000000000000000000000000600f84166010811061198a57611989612f6f565b5b1a60f81b8282815181106119a1576119a0612f6f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350600483901c9250806119e090612f9c565b905061194b565b505f8214611a2e5784846040517fe22e27eb000000000000000000000000000000000000000000000000000000008152600401611a25929190612fc3565b60405180910390fd5b809250505092915050565b61204380612feb83390190565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611a8b81611a57565b8114611a95575f80fd5b50565b5f81359050611aa681611a82565b92915050565b5f60208284031215611ac157611ac0611a4f565b5b5f611ace84828501611a98565b91505092915050565b5f8115159050919050565b611aeb81611ad7565b82525050565b5f602082019050611b045f830184611ae2565b92915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b611b5882611b12565b810181811067ffffffffffffffff82111715611b7757611b76611b22565b5b80604052505050565b5f611b89611a46565b9050611b958282611b4f565b919050565b5f67ffffffffffffffff821115611bb457611bb3611b22565b5b611bbd82611b12565b9050602081019050919050565b828183375f83830152505050565b5f611bea611be584611b9a565b611b80565b905082815260208101848484011115611c0657611c05611b0e565b5b611c11848285611bca565b509392505050565b5f82601f830112611c2d57611c2c611b0a565b5b8135611c3d848260208601611bd8565b91505092915050565b5f60ff82169050919050565b611c5b81611c46565b8114611c65575f80fd5b50565b5f81359050611c7681611c52565b92915050565b5f805f60608486031215611c9357611c92611a4f565b5b5f84013567ffffffffffffffff811115611cb057611caf611a53565b5b611cbc86828701611c19565b935050602084013567ffffffffffffffff811115611cdd57611cdc611a53565b5b611ce986828701611c19565b9250506040611cfa86828701611c68565b9150509250925092565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611d2d82611d04565b9050919050565b611d3d81611d23565b82525050565b5f602082019050611d565f830184611d34565b92915050565b5f67ffffffffffffffff82169050919050565b611d7881611d5c565b8114611d82575f80fd5b50565b5f81359050611d9381611d6f565b92915050565b611da281611ad7565b8114611dac575f80fd5b50565b5f81359050611dbd81611d99565b92915050565b5f8060408385031215611dd957611dd8611a4f565b5b5f611de685828601611d85565b9250506020611df785828601611daf565b9150509250929050565b5f60208284031215611e1657611e15611a4f565b5b5f611e2384828501611d85565b91505092915050565b611e3581611d23565b8114611e3f575f80fd5b50565b5f81359050611e5081611e2c565b92915050565b5f819050919050565b611e6881611e56565b8114611e72575f80fd5b50565b5f81359050611e8381611e5f565b92915050565b5f805f805f60a08688031215611ea257611ea1611a4f565b5b5f86013567ffffffffffffffff811115611ebf57611ebe611a53565b5b611ecb88828901611c19565b9550506020611edc88828901611e42565b945050604086013567ffffffffffffffff811115611efd57611efc611a53565b5b611f0988828901611c19565b9350506060611f1a88828901611e75565b9250506080611f2b88828901611e75565b9150509295509295909350565b5f60208284031215611f4d57611f4c611a4f565b5b5f611f5a84828501611e42565b91505092915050565b5f805f60608486031215611f7a57611f79611a4f565b5b5f84013567ffffffffffffffff811115611f9757611f96611a53565b5b611fa386828701611c19565b9350506020611fb486828701611e42565b9250506040611fc586828701611e75565b9150509250925092565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f61200182611fcf565b61200b8185611fd9565b935061201b818560208601611fe9565b61202481611b12565b840191505092915050565b61203881611c46565b82525050565b5f6060820190508181035f8301526120568186611ff7565b9050818103602083015261206a8185611ff7565b9050612079604083018461202f565b949350505050565b5f8151905061208f81611d99565b92915050565b5f602082840312156120aa576120a9611a4f565b5b5f6120b784828501612081565b91505092915050565b6120c981611e56565b82525050565b5f6060820190506120e25f830186611d34565b6120ef6020830185611d34565b6120fc60408301846120c0565b949350505050565b5f8151905061211281611c52565b92915050565b5f6020828403121561212d5761212c611a4f565b5b5f61213a84828501612104565b91505092915050565b5f6040820190506121565f830185611d34565b61216360208301846120c0565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6121a182611d5c565b91506121ac83611d5c565b9250828201905067ffffffffffffffff8111156121cc576121cb61216a565b5b92915050565b5f6121e46121df84611b9a565b611b80565b905082815260208101848484011115612200576121ff611b0e565b5b61220b848285611fe9565b509392505050565b5f82601f83011261222757612226611b0a565b5b81516122378482602086016121d2565b91505092915050565b5f6020828403121561225557612254611a4f565b5b5f82015167ffffffffffffffff81111561227257612271611a53565b5b61227e84828501612213565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806122cb57607f821691505b6020821081036122de576122dd612287565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026123407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612305565b61234a8683612305565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61238561238061237b84611e56565b612362565b611e56565b9050919050565b5f819050919050565b61239e8361236b565b6123b26123aa8261238c565b848454612311565b825550505050565b5f90565b6123c66123ba565b6123d1818484612395565b505050565b5b818110156123f4576123e95f826123be565b6001810190506123d7565b5050565b601f8211156124395761240a816122e4565b612413846122f6565b81016020851015612422578190505b61243661242e856122f6565b8301826123d6565b50505b505050565b5f82821c905092915050565b5f6124595f198460080261243e565b1980831691505092915050565b5f612471838361244a565b9150826002028217905092915050565b61248a82611fcf565b67ffffffffffffffff8111156124a3576124a2611b22565b5b6124ad82546122b4565b6124b88282856123f8565b5f60209050601f8311600181146124e9575f84156124d7578287015190505b6124e18582612466565b865550612548565b601f1984166124f7866122e4565b5f5b8281101561251e578489015182556001820191506020850194506020810190506124f9565b8683101561253b5784890151612537601f89168261244a565b8355505b6001600288020188555050505b505050505050565b5f6020820190508181035f8301526125688184611ff7565b905092915050565b5f8151905061257e81611e2c565b92915050565b5f6020828403121561259957612598611a4f565b5b5f6125a684828501612570565b91505092915050565b7f6f726967696e20746f6b656e20646f65736e27742065786973740000000000005f82015250565b5f6125e3601a83611fd9565b91506125ee826125af565b602082019050919050565b5f6020820190508181035f830152612610816125d7565b9050919050565b5f81905092915050565b5f61262b82611fcf565b6126358185612617565b9350612645818560208601611fe9565b80840191505092915050565b5f61265c8285612621565b91506126688284612621565b91508190509392505050565b5f61267e82611c46565b915061268983611c46565b9250828203905060ff8111156126a2576126a161216a565b5b92915050565b5f8160011c9050919050565b5f808291508390505b60018511156126fd578086048111156126d9576126d861216a565b5b60018516156126e85780820291505b80810290506126f6856126a8565b94506126bd565b94509492505050565b5f8261271557600190506127d0565b81612722575f90506127d0565b8160018114612738576002811461274257612771565b60019150506127d0565b60ff8411156127545761275361216a565b5b8360020a91508482111561276b5761276a61216a565b5b506127d0565b5060208310610133831016604e8410600b84101617156127a65782820a9050838111156127a1576127a061216a565b5b6127d0565b6127b384848460016126b4565b925090508184048111156127ca576127c961216a565b5b81810290505b9392505050565b5f6127e182611e56565b91506127ec83611e56565b92506128197fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612706565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f61285882611e56565b915061286383611e56565b92508261287357612872612821565b5b828204905092915050565b5f61288882611e56565b915061289383611e56565b92508282026128a181611e56565b915082820484148315176128b8576128b761216a565b5b5092915050565b7f636f6e76657274656420616d6f756e74206973207a65726f00000000000000005f82015250565b5f6128f3601883611fd9565b91506128fe826128bf565b602082019050919050565b5f6020820190508181035f830152612920816128e7565b9050919050565b7f7b224074797065223a20222f6962632e6170706c69636174696f6e732e7472615f8201527f6e736665722e76312e4d73675472616e73666572222c00000000000000000000602082015250565b5f612981603683612617565b915061298c82612927565b603682019050919050565b7f22736f757263655f706f7274223a20227472616e73666572222c0000000000005f82015250565b5f6129cb601a83612617565b91506129d682612997565b601a82019050919050565b7f22736f757263655f6368616e6e656c223a2022000000000000000000000000005f82015250565b5f612a15601383612617565b9150612a20826129e1565b601382019050919050565b7f222c0000000000000000000000000000000000000000000000000000000000005f82015250565b5f612a5f600283612617565b9150612a6a82612a2b565b600282019050919050565b7f22746f6b656e223a207b202264656e6f6d223a202200000000000000000000005f82015250565b5f612aa9601583612617565b9150612ab482612a75565b601582019050919050565b7f22616d6f756e74223a20220000000000000000000000000000000000000000005f82015250565b5f612af3600b83612617565b9150612afe82612abf565b600b82019050919050565b7f227d2c00000000000000000000000000000000000000000000000000000000005f82015250565b5f612b3d600383612617565b9150612b4882612b09565b600382019050919050565b7f2273656e646572223a20220000000000000000000000000000000000000000005f82015250565b5f612b87600b83612617565b9150612b9282612b53565b600b82019050919050565b7f227265636569766572223a2022000000000000000000000000000000000000005f82015250565b5f612bd1600d83612617565b9150612bdc82612b9d565b600d82019050919050565b7f2274696d656f75745f686569676874223a207b227265766973696f6e5f6e756d5f8201527f626572223a202230222c227265766973696f6e5f686569676874223a2022302260208201527f7d2c000000000000000000000000000000000000000000000000000000000000604082015250565b5f612c67604283612617565b9150612c7282612be7565b604282019050919050565b7f2274696d656f75745f74696d657374616d70223a2022000000000000000000005f82015250565b5f612cb1601683612617565b9150612cbc82612c7d565b601682019050919050565b7f226d656d6f223a2022222c0000000000000000000000000000000000000000005f82015250565b5f612cfb600b83612617565b9150612d0682612cc7565b600b82019050919050565b7f226173796e635f63616c6c6261636b223a207b226964223a20220000000000005f82015250565b5f612d45601a83612617565b9150612d5082612d11565b601a82019050919050565b7f22636f6e74726163745f61646472657373223a202200000000000000000000005f82015250565b5f612d8f601583612617565b9150612d9a82612d5b565b601582019050919050565b7f227d7d00000000000000000000000000000000000000000000000000000000005f82015250565b5f612dd9600383612617565b9150612de482612da5565b600382019050919050565b5f612df982612975565b9150612e04826129bf565b9150612e0f82612a09565b9150612e1b828b612621565b9150612e2682612a53565b9150612e3182612a9d565b9150612e3d828a612621565b9150612e4882612a53565b9150612e5382612ae7565b9150612e5f8289612621565b9150612e6a82612b31565b9150612e7582612b7b565b9150612e818288612621565b9150612e8c82612a53565b9150612e9782612bc5565b9150612ea38287612621565b9150612eae82612a53565b9150612eb982612c5b565b9150612ec482612ca5565b9150612ed08286612621565b9150612edb82612a53565b9150612ee682612cef565b9150612ef182612d39565b9150612efd8285612621565b9150612f0882612a53565b9150612f1382612d83565b9150612f1f8284612621565b9150612f2a82612dcd565b91508190509998505050505050505050565b5f612f4682611e56565b9150612f5183611e56565b9250828201905080821115612f6957612f6861216a565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f612fa682611e56565b91505f8203612fb857612fb761216a565b5b600182039050919050565b5f604082019050612fd65f8301856120c0565b612fe360208301846120c0565b939250505056fe608060405234801561000f575f80fd5b5060405161204338038061204383398181016040528101906100319190610235565b335f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826003908161007f91906104ca565b50816004908161008f91906104ca565b508060055f6101000a81548160ff021916908360ff160217905550505050610599565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610111826100cb565b810181811067ffffffffffffffff821117156101305761012f6100db565b5b80604052505050565b5f6101426100b2565b905061014e8282610108565b919050565b5f67ffffffffffffffff82111561016d5761016c6100db565b5b610176826100cb565b9050602081019050919050565b8281835e5f83830152505050565b5f6101a361019e84610153565b610139565b9050828152602081018484840111156101bf576101be6100c7565b5b6101ca848285610183565b509392505050565b5f82601f8301126101e6576101e56100c3565b5b81516101f6848260208601610191565b91505092915050565b5f60ff82169050919050565b610214816101ff565b811461021e575f80fd5b50565b5f8151905061022f8161020b565b92915050565b5f805f6060848603121561024c5761024b6100bb565b5b5f84015167ffffffffffffffff811115610269576102686100bf565b5b610275868287016101d2565b935050602084015167ffffffffffffffff811115610296576102956100bf565b5b6102a2868287016101d2565b92505060406102b386828701610221565b9150509250925092565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061030b57607f821691505b60208210810361031e5761031d6102c7565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026103807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610345565b61038a8683610345565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f6103ce6103c96103c4846103a2565b6103ab565b6103a2565b9050919050565b5f819050919050565b6103e7836103b4565b6103fb6103f3826103d5565b848454610351565b825550505050565b5f90565b61040f610403565b61041a8184846103de565b505050565b5b8181101561043d576104325f82610407565b600181019050610420565b5050565b601f8211156104825761045381610324565b61045c84610336565b8101602085101561046b578190505b61047f61047785610336565b83018261041f565b50505b505050565b5f82821c905092915050565b5f6104a25f1984600802610487565b1980831691505092915050565b5f6104ba8383610493565b9150826002028217905092915050565b6104d3826102bd565b67ffffffffffffffff8111156104ec576104eb6100db565b5b6104f682546102f4565b610501828285610441565b5f60209050601f831160018114610532575f8415610520578287015190505b61052a85826104af565b865550610591565b601f19841661054086610324565b5f5b8281101561056757848901518255600182019150602085019450602081019050610542565b868310156105845784890151610580601f891682610493565b8355505b6001600288020188555050505b505050505050565b611a9d806105a65f395ff3fe608060405234801561000f575f80fd5b5060043610610114575f3560e01c806342966c68116100a057806395d89b411161006f57806395d89b41146102f0578063a9059cbb1461030e578063dd62ed3e1461033e578063f2fde38b1461036e578063fe1195ec1461038a57610114565b806342966c681461025657806370a082311461027257806379cc6790146102a25780638da5cb5b146102d257610114565b80631988513b116100e75780631988513b146101b457806323b872dd146101d05780632d688ca814610200578063313ce5671461021c57806340c10f191461023a57610114565b806301ffc9a71461011857806306fdde0314610148578063095ea7b31461016657806318160ddd14610196575b5f80fd5b610132600480360381019061012d919061143b565b6103a6565b60405161013f9190611480565b60405180910390f35b61015061041f565b60405161015d9190611509565b60405180910390f35b610180600480360381019061017b91906115b6565b6104ab565b60405161018d9190611480565b60405180910390f35b61019e610598565b6040516101ab9190611603565b60405180910390f35b6101ce60048036038101906101c9919061161c565b61059e565b005b6101ea60048036038101906101e5919061161c565b61061d565b6040516101f79190611480565b60405180910390f35b61021a600480360381019061021591906115b6565b61077d565b005b6102246107fa565b6040516102319190611687565b60405180910390f35b610254600480360381019061024f91906115b6565b61080c565b005b610270600480360381019061026b91906116a0565b61092b565b005b61028c600480360381019061028791906116cb565b6109f3565b6040516102999190611603565b60405180910390f35b6102bc60048036038101906102b791906115b6565b610a08565b6040516102c99190611480565b60405180910390f35b6102da610b66565b6040516102e79190611705565b60405180910390f35b6102f8610b89565b6040516103059190611509565b60405180910390f35b610328600480360381019061032391906115b6565b610c15565b6040516103359190611480565b60405180910390f35b6103586004803603810190610353919061171e565b610ce6565b6040516103659190611603565b60405180910390f35b610388600480360381019061038391906116cb565b610d06565b005b6103a4600480360381019061039f91906115b6565b610e4e565b005b5f7f8da6da19000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610418575061041782610ecb565b5b9050919050565b6003805461042c90611789565b80601f016020809104026020016040519081016040528092919081815260200182805461045890611789565b80156104a35780601f1061047a576101008083540402835291602001916104a3565b820191905f5260205f20905b81548152906001019060200180831161048657829003601f168201915b505050505081565b5f8160025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516105869190611603565b60405180910390a36001905092915050565b60065481565b600173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461060d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060490611803565b60405180910390fd5b610618838383610f34565b505050565b5f8260f173ffffffffffffffffffffffffffffffffffffffff1663f2af9ac9826040518263ffffffff1660e01b81526004016106599190611705565b602060405180830381865afa158015610674573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610698919061184b565b156106d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cf906118e6565b60405180910390fd5b8260025f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825461075f9190611931565b92505081905550610771858585610f34565b60019150509392505050565b600173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e390611803565b60405180910390fd5b6107f6828261113f565b5050565b60055f9054906101000a900460ff1681565b8160f173ffffffffffffffffffffffffffffffffffffffff1663f2af9ac9826040518263ffffffff1660e01b81526004016108479190611705565b602060405180830381865afa158015610862573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610886919061184b565b156108c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bd906119ae565b60405180910390fd5b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461091c575f80fd5b610926838361113f565b505050565b3360f173ffffffffffffffffffffffffffffffffffffffff166360dc402f826040518263ffffffff1660e01b81526004016109669190611705565b602060405180830381865afa158015610981573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109a5919061184b565b156109e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109dc90611a16565b60405180910390fd5b6109ef338361130e565b5050565b6001602052805f5260405f205f915090505481565b5f8260f173ffffffffffffffffffffffffffffffffffffffff166360dc402f826040518263ffffffff1660e01b8152600401610a449190611705565b602060405180830381865afa158015610a5f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a83919061184b565b15610ac3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aba90611a16565b60405180910390fd5b8260025f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254610b4a9190611931565b92505081905550610b5b848461130e565b600191505092915050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60048054610b9690611789565b80601f0160208091040260200160405190810160405280929190818152602001828054610bc290611789565b8015610c0d5780601f10610be457610100808354040283529160200191610c0d565b820191905f5260205f20905b815481529060010190602001808311610bf057829003601f168201915b505050505081565b5f8260f173ffffffffffffffffffffffffffffffffffffffff1663f2af9ac9826040518263ffffffff1660e01b8152600401610c519190611705565b602060405180830381865afa158015610c6c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c90919061184b565b15610cd0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc7906118e6565b60405180910390fd5b610cdb338585610f34565b600191505092915050565b6002602052815f5260405f20602052805f5260405f205f91509150505481565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d5c575f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610d93575f80fd5b8073ffffffffffffffffffffffffffffffffffffffff165f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3805f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ebd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eb490611803565b60405180910390fd5b610ec7828261130e565b5050565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b8160f273ffffffffffffffffffffffffffffffffffffffff16634e25ab64826040518263ffffffff1660e01b8152600401610f6f9190611705565b602060405180830381865afa158015610f8a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fae919061184b565b61102e5760f273ffffffffffffffffffffffffffffffffffffffff1663ceeae52a826040518263ffffffff1660e01b8152600401610fec9190611705565b6020604051808303815f875af1158015611008573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061102c919061184b565b505b8160015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825461107a9190611931565b925050819055508160015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546110cd9190611a34565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516111319190611603565b60405180910390a350505050565b8160f273ffffffffffffffffffffffffffffffffffffffff16634e25ab64826040518263ffffffff1660e01b815260040161117a9190611705565b602060405180830381865afa158015611195573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111b9919061184b565b6112395760f273ffffffffffffffffffffffffffffffffffffffff1663ceeae52a826040518263ffffffff1660e01b81526004016111f79190611705565b6020604051808303815f875af1158015611213573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611237919061184b565b505b8160015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546112859190611a34565b925050819055508160065f82825461129d9190611a34565b925050819055508273ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516113019190611603565b60405180910390a3505050565b8060015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825461135a9190611931565b925050819055508060065f8282546113729190611931565b925050819055505f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516113d69190611603565b60405180910390a35050565b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61141a816113e6565b8114611424575f80fd5b50565b5f8135905061143581611411565b92915050565b5f602082840312156114505761144f6113e2565b5b5f61145d84828501611427565b91505092915050565b5f8115159050919050565b61147a81611466565b82525050565b5f6020820190506114935f830184611471565b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6114db82611499565b6114e581856114a3565b93506114f58185602086016114b3565b6114fe816114c1565b840191505092915050565b5f6020820190508181035f83015261152181846114d1565b905092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61155282611529565b9050919050565b61156281611548565b811461156c575f80fd5b50565b5f8135905061157d81611559565b92915050565b5f819050919050565b61159581611583565b811461159f575f80fd5b50565b5f813590506115b08161158c565b92915050565b5f80604083850312156115cc576115cb6113e2565b5b5f6115d98582860161156f565b92505060206115ea858286016115a2565b9150509250929050565b6115fd81611583565b82525050565b5f6020820190506116165f8301846115f4565b92915050565b5f805f60608486031215611633576116326113e2565b5b5f6116408682870161156f565b93505060206116518682870161156f565b9250506040611662868287016115a2565b9150509250925092565b5f60ff82169050919050565b6116818161166c565b82525050565b5f60208201905061169a5f830184611678565b92915050565b5f602082840312156116b5576116b46113e2565b5b5f6116c2848285016115a2565b91505092915050565b5f602082840312156116e0576116df6113e2565b5b5f6116ed8482850161156f565b91505092915050565b6116ff81611548565b82525050565b5f6020820190506117185f8301846116f6565b92915050565b5f8060408385031215611734576117336113e2565b5b5f6117418582860161156f565b92505060206117528582860161156f565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806117a057607f821691505b6020821081036117b3576117b261175c565b5b50919050565b7f45524332303a2063616c6c6572206973206e6f742074686520636861696e00005f82015250565b5f6117ed601e836114a3565b91506117f8826117b9565b602082019050919050565b5f6020820190508181035f83015261181a816117e1565b9050919050565b61182a81611466565b8114611834575f80fd5b50565b5f8151905061184581611821565b92915050565b5f602082840312156118605761185f6113e2565b5b5f61186d84828501611837565b91505092915050565b7f45524332303a207472616e7366657220746f20626c6f636b65642061646472655f8201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b5f6118d06022836114a3565b91506118db82611876565b604082019050919050565b5f6020820190508181035f8301526118fd816118c4565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61193b82611583565b915061194683611583565b925082820390508181111561195e5761195d611904565b5b92915050565b7f45524332303a206d696e7420746f20626c6f636b6564206164647265737300005f82015250565b5f611998601e836114a3565b91506119a382611964565b602082019050919050565b5f6020820190508181035f8301526119c58161198c565b9050919050565b7f45524332303a206275726e2066726f6d206d6f64756c652061646472657373005f82015250565b5f611a00601f836114a3565b9150611a0b826119cc565b602082019050919050565b5f6020820190508181035f830152611a2d816119f4565b9050919050565b5f611a3e82611583565b9150611a4983611583565b9250828201905080821115611a6157611a60611904565b5b9291505056fea2646970667358221220de4043b1adb87162ffc06c0127fc335d705e04b467c9acd7522c8721ebd4c4bb64736f6c63430008190033a26469706673582212201e63799203856c1d9ca3b7a3cc0115f1473f3140b6501abeb6be28bf8ce6324964736f6c63430008190033",
}

// Erc20WrapperABI is the input ABI used to generate the binding from.
// Deprecated: Use Erc20WrapperMetaData.ABI instead.
var Erc20WrapperABI = Erc20WrapperMetaData.ABI

// Erc20WrapperBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use Erc20WrapperMetaData.Bin instead.
var Erc20WrapperBin = Erc20WrapperMetaData.Bin

// DeployErc20Wrapper deploys a new Ethereum contract, binding an instance of Erc20Wrapper to it.
func DeployErc20Wrapper(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Erc20Wrapper, error) {
	parsed, err := Erc20WrapperMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(Erc20WrapperBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Erc20Wrapper{Erc20WrapperCaller: Erc20WrapperCaller{contract: contract}, Erc20WrapperTransactor: Erc20WrapperTransactor{contract: contract}, Erc20WrapperFilterer: Erc20WrapperFilterer{contract: contract}}, nil
}

// Erc20Wrapper is an auto generated Go binding around an Ethereum contract.
type Erc20Wrapper struct {
	Erc20WrapperCaller     // Read-only binding to the contract
	Erc20WrapperTransactor // Write-only binding to the contract
	Erc20WrapperFilterer   // Log filterer for contract events
}

// Erc20WrapperCaller is an auto generated read-only Go binding around an Ethereum contract.
type Erc20WrapperCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Erc20WrapperTransactor is an auto generated write-only Go binding around an Ethereum contract.
type Erc20WrapperTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Erc20WrapperFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type Erc20WrapperFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Erc20WrapperSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type Erc20WrapperSession struct {
	Contract     *Erc20Wrapper     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// Erc20WrapperCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type Erc20WrapperCallerSession struct {
	Contract *Erc20WrapperCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// Erc20WrapperTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type Erc20WrapperTransactorSession struct {
	Contract     *Erc20WrapperTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// Erc20WrapperRaw is an auto generated low-level Go binding around an Ethereum contract.
type Erc20WrapperRaw struct {
	Contract *Erc20Wrapper // Generic contract binding to access the raw methods on
}

// Erc20WrapperCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type Erc20WrapperCallerRaw struct {
	Contract *Erc20WrapperCaller // Generic read-only contract binding to access the raw methods on
}

// Erc20WrapperTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type Erc20WrapperTransactorRaw struct {
	Contract *Erc20WrapperTransactor // Generic write-only contract binding to access the raw methods on
}

// NewErc20Wrapper creates a new instance of Erc20Wrapper, bound to a specific deployed contract.
func NewErc20Wrapper(address common.Address, backend bind.ContractBackend) (*Erc20Wrapper, error) {
	contract, err := bindErc20Wrapper(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Erc20Wrapper{Erc20WrapperCaller: Erc20WrapperCaller{contract: contract}, Erc20WrapperTransactor: Erc20WrapperTransactor{contract: contract}, Erc20WrapperFilterer: Erc20WrapperFilterer{contract: contract}}, nil
}

// NewErc20WrapperCaller creates a new read-only instance of Erc20Wrapper, bound to a specific deployed contract.
func NewErc20WrapperCaller(address common.Address, caller bind.ContractCaller) (*Erc20WrapperCaller, error) {
	contract, err := bindErc20Wrapper(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperCaller{contract: contract}, nil
}

// NewErc20WrapperTransactor creates a new write-only instance of Erc20Wrapper, bound to a specific deployed contract.
func NewErc20WrapperTransactor(address common.Address, transactor bind.ContractTransactor) (*Erc20WrapperTransactor, error) {
	contract, err := bindErc20Wrapper(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperTransactor{contract: contract}, nil
}

// NewErc20WrapperFilterer creates a new log filterer instance of Erc20Wrapper, bound to a specific deployed contract.
func NewErc20WrapperFilterer(address common.Address, filterer bind.ContractFilterer) (*Erc20WrapperFilterer, error) {
	contract, err := bindErc20Wrapper(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperFilterer{contract: contract}, nil
}

// bindErc20Wrapper binds a generic wrapper to an already deployed contract.
func bindErc20Wrapper(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := Erc20WrapperMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Erc20Wrapper *Erc20WrapperRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Erc20Wrapper.Contract.Erc20WrapperCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Erc20Wrapper *Erc20WrapperRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.Erc20WrapperTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Erc20Wrapper *Erc20WrapperRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.Erc20WrapperTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Erc20Wrapper *Erc20WrapperCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Erc20Wrapper.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Erc20Wrapper *Erc20WrapperTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Erc20Wrapper *Erc20WrapperTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.contract.Transact(opts, method, params...)
}

// OriginTokens is a free data retrieval call binding the contract method 0xb5ad1fb6.
//
// Solidity: function originTokens(address ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) OriginTokens(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "originTokens", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OriginTokens is a free data retrieval call binding the contract method 0xb5ad1fb6.
//
// Solidity: function originTokens(address ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) OriginTokens(arg0 common.Address) (common.Address, error) {
	return _Erc20Wrapper.Contract.OriginTokens(&_Erc20Wrapper.CallOpts, arg0)
}

// OriginTokens is a free data retrieval call binding the contract method 0xb5ad1fb6.
//
// Solidity: function originTokens(address ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) OriginTokens(arg0 common.Address) (common.Address, error) {
	return _Erc20Wrapper.Contract.OriginTokens(&_Erc20Wrapper.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) Owner() (common.Address, error) {
	return _Erc20Wrapper.Contract.Owner(&_Erc20Wrapper.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) Owner() (common.Address, error) {
	return _Erc20Wrapper.Contract.Owner(&_Erc20Wrapper.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Erc20Wrapper *Erc20WrapperCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Erc20Wrapper *Erc20WrapperSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Erc20Wrapper.Contract.SupportsInterface(&_Erc20Wrapper.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Erc20Wrapper *Erc20WrapperCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Erc20Wrapper.Contract.SupportsInterface(&_Erc20Wrapper.CallOpts, interfaceId)
}

// WrappedTokens is a free data retrieval call binding the contract method 0xd5c6b504.
//
// Solidity: function wrappedTokens(address ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCaller) WrappedTokens(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _Erc20Wrapper.contract.Call(opts, &out, "wrappedTokens", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// WrappedTokens is a free data retrieval call binding the contract method 0xd5c6b504.
//
// Solidity: function wrappedTokens(address ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) WrappedTokens(arg0 common.Address) (common.Address, error) {
	return _Erc20Wrapper.Contract.WrappedTokens(&_Erc20Wrapper.CallOpts, arg0)
}

// WrappedTokens is a free data retrieval call binding the contract method 0xd5c6b504.
//
// Solidity: function wrappedTokens(address ) view returns(address)
func (_Erc20Wrapper *Erc20WrapperCallerSession) WrappedTokens(arg0 common.Address) (common.Address, error) {
	return _Erc20Wrapper.Contract.WrappedTokens(&_Erc20Wrapper.CallOpts, arg0)
}

// CreateERC20 is a paid mutator transaction binding the contract method 0x06ef1a86.
//
// Solidity: function createERC20(string name, string symbol, uint8 decimals) returns(address)
func (_Erc20Wrapper *Erc20WrapperTransactor) CreateERC20(opts *bind.TransactOpts, name string, symbol string, decimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "createERC20", name, symbol, decimals)
}

// CreateERC20 is a paid mutator transaction binding the contract method 0x06ef1a86.
//
// Solidity: function createERC20(string name, string symbol, uint8 decimals) returns(address)
func (_Erc20Wrapper *Erc20WrapperSession) CreateERC20(name string, symbol string, decimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.CreateERC20(&_Erc20Wrapper.TransactOpts, name, symbol, decimals)
}

// CreateERC20 is a paid mutator transaction binding the contract method 0x06ef1a86.
//
// Solidity: function createERC20(string name, string symbol, uint8 decimals) returns(address)
func (_Erc20Wrapper *Erc20WrapperTransactorSession) CreateERC20(name string, symbol string, decimals uint8) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.CreateERC20(&_Erc20Wrapper.TransactOpts, name, symbol, decimals)
}

// IbcAck is a paid mutator transaction binding the contract method 0x0d4f1f9d.
//
// Solidity: function ibc_ack(uint64 callback_id, bool success) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) IbcAck(opts *bind.TransactOpts, callback_id uint64, success bool) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "ibc_ack", callback_id, success)
}

// IbcAck is a paid mutator transaction binding the contract method 0x0d4f1f9d.
//
// Solidity: function ibc_ack(uint64 callback_id, bool success) returns()
func (_Erc20Wrapper *Erc20WrapperSession) IbcAck(callback_id uint64, success bool) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.IbcAck(&_Erc20Wrapper.TransactOpts, callback_id, success)
}

// IbcAck is a paid mutator transaction binding the contract method 0x0d4f1f9d.
//
// Solidity: function ibc_ack(uint64 callback_id, bool success) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) IbcAck(callback_id uint64, success bool) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.IbcAck(&_Erc20Wrapper.TransactOpts, callback_id, success)
}

// IbcTimeout is a paid mutator transaction binding the contract method 0x31a503f0.
//
// Solidity: function ibc_timeout(uint64 callback_id) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) IbcTimeout(opts *bind.TransactOpts, callback_id uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "ibc_timeout", callback_id)
}

// IbcTimeout is a paid mutator transaction binding the contract method 0x31a503f0.
//
// Solidity: function ibc_timeout(uint64 callback_id) returns()
func (_Erc20Wrapper *Erc20WrapperSession) IbcTimeout(callback_id uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.IbcTimeout(&_Erc20Wrapper.TransactOpts, callback_id)
}

// IbcTimeout is a paid mutator transaction binding the contract method 0x31a503f0.
//
// Solidity: function ibc_timeout(uint64 callback_id) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) IbcTimeout(callback_id uint64) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.IbcTimeout(&_Erc20Wrapper.TransactOpts, callback_id)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Erc20Wrapper *Erc20WrapperSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.TransferOwnership(&_Erc20Wrapper.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.TransferOwnership(&_Erc20Wrapper.TransactOpts, newOwner)
}

// Unwrap is a paid mutator transaction binding the contract method 0xfc078758.
//
// Solidity: function unwrap(string wrappedTokenDenom, address receiver, uint256 wrappedAmt) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) Unwrap(opts *bind.TransactOpts, wrappedTokenDenom string, receiver common.Address, wrappedAmt *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "unwrap", wrappedTokenDenom, receiver, wrappedAmt)
}

// Unwrap is a paid mutator transaction binding the contract method 0xfc078758.
//
// Solidity: function unwrap(string wrappedTokenDenom, address receiver, uint256 wrappedAmt) returns()
func (_Erc20Wrapper *Erc20WrapperSession) Unwrap(wrappedTokenDenom string, receiver common.Address, wrappedAmt *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.Unwrap(&_Erc20Wrapper.TransactOpts, wrappedTokenDenom, receiver, wrappedAmt)
}

// Unwrap is a paid mutator transaction binding the contract method 0xfc078758.
//
// Solidity: function unwrap(string wrappedTokenDenom, address receiver, uint256 wrappedAmt) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) Unwrap(wrappedTokenDenom string, receiver common.Address, wrappedAmt *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.Unwrap(&_Erc20Wrapper.TransactOpts, wrappedTokenDenom, receiver, wrappedAmt)
}

// Wrap is a paid mutator transaction binding the contract method 0x9a111432.
//
// Solidity: function wrap(string channel, address token, string receiver, uint256 amount, uint256 timeout) returns()
func (_Erc20Wrapper *Erc20WrapperTransactor) Wrap(opts *bind.TransactOpts, channel string, token common.Address, receiver string, amount *big.Int, timeout *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.contract.Transact(opts, "wrap", channel, token, receiver, amount, timeout)
}

// Wrap is a paid mutator transaction binding the contract method 0x9a111432.
//
// Solidity: function wrap(string channel, address token, string receiver, uint256 amount, uint256 timeout) returns()
func (_Erc20Wrapper *Erc20WrapperSession) Wrap(channel string, token common.Address, receiver string, amount *big.Int, timeout *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.Wrap(&_Erc20Wrapper.TransactOpts, channel, token, receiver, amount, timeout)
}

// Wrap is a paid mutator transaction binding the contract method 0x9a111432.
//
// Solidity: function wrap(string channel, address token, string receiver, uint256 amount, uint256 timeout) returns()
func (_Erc20Wrapper *Erc20WrapperTransactorSession) Wrap(channel string, token common.Address, receiver string, amount *big.Int, timeout *big.Int) (*types.Transaction, error) {
	return _Erc20Wrapper.Contract.Wrap(&_Erc20Wrapper.TransactOpts, channel, token, receiver, amount, timeout)
}

// Erc20WrapperERC20CreatedIterator is returned from FilterERC20Created and is used to iterate over the raw logs and unpacked data for ERC20Created events raised by the Erc20Wrapper contract.
type Erc20WrapperERC20CreatedIterator struct {
	Event *Erc20WrapperERC20Created // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Erc20WrapperERC20CreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Erc20WrapperERC20Created)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Erc20WrapperERC20Created)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Erc20WrapperERC20CreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Erc20WrapperERC20CreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Erc20WrapperERC20Created represents a ERC20Created event raised by the Erc20Wrapper contract.
type Erc20WrapperERC20Created struct {
	Erc20 common.Address
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterERC20Created is a free log retrieval operation binding the contract event 0x85e892981b234101136bc30081e0a5c44345bebc0940193230c20a43b279e2d1.
//
// Solidity: event ERC20Created(address indexed erc20, address indexed owner)
func (_Erc20Wrapper *Erc20WrapperFilterer) FilterERC20Created(opts *bind.FilterOpts, erc20 []common.Address, owner []common.Address) (*Erc20WrapperERC20CreatedIterator, error) {

	var erc20Rule []interface{}
	for _, erc20Item := range erc20 {
		erc20Rule = append(erc20Rule, erc20Item)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Erc20Wrapper.contract.FilterLogs(opts, "ERC20Created", erc20Rule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperERC20CreatedIterator{contract: _Erc20Wrapper.contract, event: "ERC20Created", logs: logs, sub: sub}, nil
}

// WatchERC20Created is a free log subscription operation binding the contract event 0x85e892981b234101136bc30081e0a5c44345bebc0940193230c20a43b279e2d1.
//
// Solidity: event ERC20Created(address indexed erc20, address indexed owner)
func (_Erc20Wrapper *Erc20WrapperFilterer) WatchERC20Created(opts *bind.WatchOpts, sink chan<- *Erc20WrapperERC20Created, erc20 []common.Address, owner []common.Address) (event.Subscription, error) {

	var erc20Rule []interface{}
	for _, erc20Item := range erc20 {
		erc20Rule = append(erc20Rule, erc20Item)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Erc20Wrapper.contract.WatchLogs(opts, "ERC20Created", erc20Rule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Erc20WrapperERC20Created)
				if err := _Erc20Wrapper.contract.UnpackLog(event, "ERC20Created", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseERC20Created is a log parse operation binding the contract event 0x85e892981b234101136bc30081e0a5c44345bebc0940193230c20a43b279e2d1.
//
// Solidity: event ERC20Created(address indexed erc20, address indexed owner)
func (_Erc20Wrapper *Erc20WrapperFilterer) ParseERC20Created(log types.Log) (*Erc20WrapperERC20Created, error) {
	event := new(Erc20WrapperERC20Created)
	if err := _Erc20Wrapper.contract.UnpackLog(event, "ERC20Created", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Erc20WrapperOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Erc20Wrapper contract.
type Erc20WrapperOwnershipTransferredIterator struct {
	Event *Erc20WrapperOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Erc20WrapperOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Erc20WrapperOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Erc20WrapperOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Erc20WrapperOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Erc20WrapperOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Erc20WrapperOwnershipTransferred represents a OwnershipTransferred event raised by the Erc20Wrapper contract.
type Erc20WrapperOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Erc20Wrapper *Erc20WrapperFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*Erc20WrapperOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Erc20Wrapper.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &Erc20WrapperOwnershipTransferredIterator{contract: _Erc20Wrapper.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Erc20Wrapper *Erc20WrapperFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *Erc20WrapperOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Erc20Wrapper.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Erc20WrapperOwnershipTransferred)
				if err := _Erc20Wrapper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Erc20Wrapper *Erc20WrapperFilterer) ParseOwnershipTransferred(log types.Log) (*Erc20WrapperOwnershipTransferred, error) {
	event := new(Erc20WrapperOwnershipTransferred)
	if err := _Erc20Wrapper.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
