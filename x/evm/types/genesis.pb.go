// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: minievm/evm/v1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the evm module's genesis state.
type GenesisState struct {
	// params defines the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// vm kv store
	KeyValues []GenesisKeyValue `protobuf:"bytes,2,rep,name=key_values,json=keyValues,proto3" json:"key_values" yaml:"key_values"`
	// erc20 contracts
	ERC20s [][]byte `protobuf:"bytes,3,rep,name=erc20s,proto3" json:"erc20s,omitempty" yaml:"erc20s"`
	// erc20 stores
	Erc20Stores    []GenesisERC20Stores  `protobuf:"bytes,4,rep,name=erc20_stores,json=erc20Stores,proto3" json:"erc20_stores" yaml:"erc20_stores"`
	DenomTraces    []GenesisDenomTrace   `protobuf:"bytes,5,rep,name=denom_traces,json=denomTraces,proto3" json:"denom_traces" yaml:"denom_traces"`
	ClassTraces    []GenesisClassTrace   `protobuf:"bytes,6,rep,name=class_traces,json=classTraces,proto3" json:"class_traces" yaml:"class_traces"`
	EVMBlockHashes []GenesisEVMBlockHash `protobuf:"bytes,7,rep,name=evm_block_hashes,json=evmBlockHashes,proto3" json:"evm_block_hashes" yaml:"evm_block_hashes"`
	// erc20 factory contract address
	Erc20Factory []byte `protobuf:"bytes,8,opt,name=erc20_factory,json=erc20Factory,proto3" json:"erc20_factory,omitempty"`
	// erc20 wrapper contract address
	Erc20Wrapper []byte `protobuf:"bytes,9,opt,name=erc20_wrapper,json=erc20Wrapper,proto3" json:"erc20_wrapper,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f1b77281e8b59af, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetKeyValues() []GenesisKeyValue {
	if m != nil {
		return m.KeyValues
	}
	return nil
}

func (m *GenesisState) GetERC20s() [][]byte {
	if m != nil {
		return m.ERC20s
	}
	return nil
}

func (m *GenesisState) GetErc20Stores() []GenesisERC20Stores {
	if m != nil {
		return m.Erc20Stores
	}
	return nil
}

func (m *GenesisState) GetDenomTraces() []GenesisDenomTrace {
	if m != nil {
		return m.DenomTraces
	}
	return nil
}

func (m *GenesisState) GetClassTraces() []GenesisClassTrace {
	if m != nil {
		return m.ClassTraces
	}
	return nil
}

func (m *GenesisState) GetEVMBlockHashes() []GenesisEVMBlockHash {
	if m != nil {
		return m.EVMBlockHashes
	}
	return nil
}

func (m *GenesisState) GetErc20Factory() []byte {
	if m != nil {
		return m.Erc20Factory
	}
	return nil
}

func (m *GenesisState) GetErc20Wrapper() []byte {
	if m != nil {
		return m.Erc20Wrapper
	}
	return nil
}

// GenesisKeyValue defines store KV values.
type GenesisKeyValue struct {
	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GenesisKeyValue) Reset()         { *m = GenesisKeyValue{} }
func (m *GenesisKeyValue) String() string { return proto.CompactTextString(m) }
func (*GenesisKeyValue) ProtoMessage()    {}
func (*GenesisKeyValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f1b77281e8b59af, []int{1}
}
func (m *GenesisKeyValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisKeyValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisKeyValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisKeyValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisKeyValue.Merge(m, src)
}
func (m *GenesisKeyValue) XXX_Size() int {
	return m.Size()
}
func (m *GenesisKeyValue) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisKeyValue.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisKeyValue proto.InternalMessageInfo

func (m *GenesisKeyValue) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *GenesisKeyValue) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// GenesisERC20Stores defines erc20 contract addresses of an account.
type GenesisERC20Stores struct {
	Address []byte   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Stores  [][]byte `protobuf:"bytes,2,rep,name=stores,proto3" json:"stores,omitempty"`
}

func (m *GenesisERC20Stores) Reset()         { *m = GenesisERC20Stores{} }
func (m *GenesisERC20Stores) String() string { return proto.CompactTextString(m) }
func (*GenesisERC20Stores) ProtoMessage()    {}
func (*GenesisERC20Stores) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f1b77281e8b59af, []int{2}
}
func (m *GenesisERC20Stores) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisERC20Stores) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisERC20Stores.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisERC20Stores) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisERC20Stores.Merge(m, src)
}
func (m *GenesisERC20Stores) XXX_Size() int {
	return m.Size()
}
func (m *GenesisERC20Stores) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisERC20Stores.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisERC20Stores proto.InternalMessageInfo

func (m *GenesisERC20Stores) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *GenesisERC20Stores) GetStores() [][]byte {
	if m != nil {
		return m.Stores
	}
	return nil
}

// GenesisDenomTrace defines erc20 contract address of denom.
type GenesisDenomTrace struct {
	Denom           string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	ContractAddress []byte `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *GenesisDenomTrace) Reset()         { *m = GenesisDenomTrace{} }
func (m *GenesisDenomTrace) String() string { return proto.CompactTextString(m) }
func (*GenesisDenomTrace) ProtoMessage()    {}
func (*GenesisDenomTrace) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f1b77281e8b59af, []int{3}
}
func (m *GenesisDenomTrace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisDenomTrace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisDenomTrace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisDenomTrace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisDenomTrace.Merge(m, src)
}
func (m *GenesisDenomTrace) XXX_Size() int {
	return m.Size()
}
func (m *GenesisDenomTrace) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisDenomTrace.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisDenomTrace proto.InternalMessageInfo

func (m *GenesisDenomTrace) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *GenesisDenomTrace) GetContractAddress() []byte {
	if m != nil {
		return m.ContractAddress
	}
	return nil
}

type GenesisClassTrace struct {
	ClassId         string `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	ContractAddress []byte `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Uri             string `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (m *GenesisClassTrace) Reset()         { *m = GenesisClassTrace{} }
func (m *GenesisClassTrace) String() string { return proto.CompactTextString(m) }
func (*GenesisClassTrace) ProtoMessage()    {}
func (*GenesisClassTrace) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f1b77281e8b59af, []int{4}
}
func (m *GenesisClassTrace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisClassTrace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisClassTrace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisClassTrace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisClassTrace.Merge(m, src)
}
func (m *GenesisClassTrace) XXX_Size() int {
	return m.Size()
}
func (m *GenesisClassTrace) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisClassTrace.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisClassTrace proto.InternalMessageInfo

func (m *GenesisClassTrace) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *GenesisClassTrace) GetContractAddress() []byte {
	if m != nil {
		return m.ContractAddress
	}
	return nil
}

func (m *GenesisClassTrace) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

type GenesisEVMBlockHash struct {
	Hash   []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *GenesisEVMBlockHash) Reset()         { *m = GenesisEVMBlockHash{} }
func (m *GenesisEVMBlockHash) String() string { return proto.CompactTextString(m) }
func (*GenesisEVMBlockHash) ProtoMessage()    {}
func (*GenesisEVMBlockHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f1b77281e8b59af, []int{5}
}
func (m *GenesisEVMBlockHash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisEVMBlockHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisEVMBlockHash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisEVMBlockHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisEVMBlockHash.Merge(m, src)
}
func (m *GenesisEVMBlockHash) XXX_Size() int {
	return m.Size()
}
func (m *GenesisEVMBlockHash) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisEVMBlockHash.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisEVMBlockHash proto.InternalMessageInfo

func (m *GenesisEVMBlockHash) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *GenesisEVMBlockHash) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "minievm.evm.v1.GenesisState")
	proto.RegisterType((*GenesisKeyValue)(nil), "minievm.evm.v1.GenesisKeyValue")
	proto.RegisterType((*GenesisERC20Stores)(nil), "minievm.evm.v1.GenesisERC20Stores")
	proto.RegisterType((*GenesisDenomTrace)(nil), "minievm.evm.v1.GenesisDenomTrace")
	proto.RegisterType((*GenesisClassTrace)(nil), "minievm.evm.v1.GenesisClassTrace")
	proto.RegisterType((*GenesisEVMBlockHash)(nil), "minievm.evm.v1.GenesisEVMBlockHash")
}

func init() { proto.RegisterFile("minievm/evm/v1/genesis.proto", fileDescriptor_2f1b77281e8b59af) }

var fileDescriptor_2f1b77281e8b59af = []byte{
	// 639 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xcd, 0x4e, 0xdb, 0x4c,
	0x14, 0x86, 0x63, 0x12, 0x0c, 0x4c, 0xcc, 0xdf, 0x80, 0xf8, 0x0c, 0x7c, 0xb2, 0xd3, 0x61, 0x93,
	0x56, 0x6a, 0x02, 0xa1, 0x9b, 0x76, 0x87, 0xa1, 0xb4, 0x55, 0x55, 0xa9, 0x1a, 0x10, 0x55, 0xbb,
	0xb1, 0x26, 0xf6, 0x34, 0xb6, 0x12, 0xc7, 0x91, 0xc7, 0xb8, 0xf5, 0xae, 0x97, 0xd0, 0xcb, 0x42,
	0xea, 0x86, 0x65, 0x57, 0x51, 0x15, 0xee, 0x80, 0x2b, 0xa8, 0xe6, 0x27, 0xc4, 0x0d, 0xa4, 0x52,
	0x17, 0x96, 0xce, 0x39, 0xf3, 0xfa, 0x79, 0x47, 0xe7, 0x1c, 0x0d, 0xf8, 0x3f, 0x0a, 0xfb, 0x21,
	0xcd, 0xa2, 0x26, 0xff, 0xb2, 0x83, 0x66, 0x87, 0xf6, 0x29, 0x0b, 0x59, 0x63, 0x90, 0xc4, 0x69,
	0x0c, 0x57, 0xd4, 0x69, 0x83, 0x7f, 0xd9, 0xc1, 0xce, 0x66, 0x27, 0xee, 0xc4, 0xe2, 0xa8, 0xc9,
	0x23, 0xa9, 0xda, 0xd9, 0x99, 0x62, 0xa4, 0xf9, 0x80, 0x2a, 0x02, 0xfa, 0x31, 0x0f, 0x8c, 0x57,
	0x92, 0x79, 0x96, 0x92, 0x94, 0xc2, 0x67, 0x40, 0x1f, 0x90, 0x84, 0x44, 0xcc, 0xd4, 0x6a, 0x5a,
	0xbd, 0xda, 0xda, 0x6a, 0xfc, 0xe9, 0xd1, 0x78, 0x2f, 0x4e, 0x9d, 0xca, 0xd5, 0xd0, 0x2e, 0x61,
	0xa5, 0x85, 0x1f, 0x01, 0xe8, 0xd2, 0xdc, 0xcd, 0x48, 0xef, 0x92, 0x32, 0x73, 0xae, 0x56, 0xae,
	0x57, 0x5b, 0xf6, 0xf4, 0x9f, 0xca, 0xe7, 0x2d, 0xcd, 0x2f, 0xb8, 0xce, 0xd9, 0xe6, 0x88, 0xdb,
	0xa1, 0xbd, 0x9e, 0x93, 0xa8, 0xf7, 0x02, 0x4d, 0x00, 0x08, 0x2f, 0x75, 0x95, 0x88, 0xc1, 0x43,
	0xa0, 0xd3, 0xc4, 0x6b, 0xed, 0x33, 0xb3, 0x5c, 0x2b, 0xd7, 0x0d, 0x67, 0x77, 0x34, 0xb4, 0xf5,
	0x97, 0xf8, 0xb8, 0xb5, 0xcf, 0x6e, 0x87, 0xf6, 0xb2, 0xfc, 0x57, 0x2a, 0x10, 0x56, 0x52, 0xd8,
	0x06, 0x86, 0x88, 0x5c, 0x96, 0xc6, 0x09, 0x65, 0x66, 0x45, 0xdc, 0x08, 0xcd, 0xb8, 0x91, 0xa0,
	0x9d, 0x09, 0xa5, 0xb3, 0xab, 0x2e, 0xb5, 0x51, 0x00, 0x2b, 0x0a, 0xc2, 0x55, 0x91, 0x4a, 0x25,
	0x24, 0xc0, 0xf0, 0x69, 0x3f, 0x8e, 0xdc, 0x34, 0x21, 0x1e, 0x65, 0xe6, 0xbc, 0xf0, 0x78, 0x34,
	0xc3, 0xe3, 0x84, 0x4b, 0xcf, 0xb9, 0x72, 0xda, 0xa2, 0x08, 0x41, 0xb8, 0xea, 0xdf, 0x09, 0x85,
	0x85, 0xd7, 0x23, 0x8c, 0x8d, 0x2d, 0xf4, 0xbf, 0x5a, 0x1c, 0x73, 0xe9, 0x83, 0x16, 0x45, 0x08,
	0xc2, 0x55, 0xef, 0x4e, 0xc8, 0xe0, 0x37, 0x0d, 0xac, 0xd1, 0x2c, 0x72, 0xdb, 0xbd, 0xd8, 0xeb,
	0xba, 0x01, 0x61, 0x01, 0x65, 0xe6, 0x82, 0xf0, 0xd9, 0x9b, 0xd5, 0xae, 0x8b, 0x77, 0x0e, 0x57,
	0xbf, 0x26, 0x2c, 0x70, 0x0e, 0xb8, 0xd3, 0x68, 0x68, 0xaf, 0x14, 0xab, 0x94, 0x8f, 0xe6, 0x3f,
	0xd5, 0xc1, 0x29, 0x38, 0xc2, 0x2b, 0x34, 0x8b, 0x0a, 0x52, 0xb8, 0x07, 0x96, 0x65, 0x9b, 0x3f,
	0x13, 0x2f, 0x8d, 0x93, 0xdc, 0x5c, 0xac, 0x69, 0x75, 0x03, 0xcb, 0x09, 0x9e, 0xca, 0xda, 0x44,
	0xf4, 0x25, 0x21, 0x83, 0x01, 0x4d, 0xcc, 0xa5, 0x82, 0xe8, 0x83, 0xac, 0xa1, 0xe7, 0x60, 0x75,
	0x6a, 0xc9, 0xe0, 0x1a, 0x28, 0x77, 0x69, 0x2e, 0x96, 0xd9, 0xc0, 0x3c, 0x84, 0x9b, 0x60, 0x5e,
	0xac, 0x99, 0x39, 0x27, 0x6a, 0x32, 0x41, 0xa7, 0x00, 0xde, 0xdf, 0x06, 0x68, 0x82, 0x05, 0xe2,
	0xfb, 0x09, 0x65, 0x4c, 0x11, 0xc6, 0x29, 0xdc, 0x02, 0xba, 0xda, 0x2d, 0xbe, 0xed, 0x06, 0x56,
	0x19, 0x3a, 0x07, 0xeb, 0xf7, 0x26, 0xce, 0x2d, 0xc5, 0x58, 0x05, 0x64, 0x09, 0xcb, 0x04, 0x3e,
	0x06, 0x6b, 0x5e, 0xdc, 0xe7, 0x53, 0x49, 0xdd, 0xb1, 0x8b, 0xbc, 0xd3, 0xea, 0xb8, 0x7e, 0x24,
	0xcb, 0xa8, 0x7b, 0x47, 0x9d, 0x0c, 0x19, 0x6e, 0x83, 0x45, 0x39, 0xd8, 0xd0, 0x57, 0xe0, 0x05,
	0x91, 0xbf, 0xf1, 0xff, 0x01, 0xcd, 0x1b, 0x74, 0x99, 0x84, 0x66, 0x59, 0x00, 0x78, 0x88, 0x8e,
	0xc0, 0xc6, 0x03, 0x93, 0x86, 0x10, 0x54, 0xf8, 0x04, 0x55, 0x23, 0x44, 0xcc, 0xbb, 0x10, 0xd0,
	0xb0, 0x13, 0xa4, 0x82, 0x5e, 0xc1, 0x2a, 0x73, 0x4e, 0xae, 0x46, 0x96, 0x76, 0x3d, 0xb2, 0xb4,
	0x5f, 0x23, 0x4b, 0xfb, 0x7e, 0x63, 0x95, 0xae, 0x6f, 0xac, 0xd2, 0xcf, 0x1b, 0xab, 0xf4, 0xe9,
	0x49, 0x27, 0x4c, 0x83, 0xcb, 0x76, 0xc3, 0x8b, 0xa3, 0x66, 0xd8, 0x0f, 0xd3, 0x90, 0x3c, 0xed,
	0x91, 0x36, 0x6b, 0x8e, 0xdf, 0xa8, 0xaf, 0xe2, 0x95, 0x12, 0x4f, 0x54, 0x5b, 0x17, 0x6f, 0xd4,
	0xe1, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x42, 0x40, 0x76, 0xad, 0x05, 0x05, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Erc20Wrapper) > 0 {
		i -= len(m.Erc20Wrapper)
		copy(dAtA[i:], m.Erc20Wrapper)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Erc20Wrapper)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Erc20Factory) > 0 {
		i -= len(m.Erc20Factory)
		copy(dAtA[i:], m.Erc20Factory)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Erc20Factory)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.EVMBlockHashes) > 0 {
		for iNdEx := len(m.EVMBlockHashes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EVMBlockHashes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.ClassTraces) > 0 {
		for iNdEx := len(m.ClassTraces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClassTraces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.DenomTraces) > 0 {
		for iNdEx := len(m.DenomTraces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DenomTraces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Erc20Stores) > 0 {
		for iNdEx := len(m.Erc20Stores) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Erc20Stores[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ERC20s) > 0 {
		for iNdEx := len(m.ERC20s) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ERC20s[iNdEx])
			copy(dAtA[i:], m.ERC20s[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.ERC20s[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.KeyValues) > 0 {
		for iNdEx := len(m.KeyValues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyValues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GenesisKeyValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisKeyValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisKeyValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisERC20Stores) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisERC20Stores) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisERC20Stores) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stores) > 0 {
		for iNdEx := len(m.Stores) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Stores[iNdEx])
			copy(dAtA[i:], m.Stores[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.Stores[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisDenomTrace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisDenomTrace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisDenomTrace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisClassTrace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisClassTrace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisClassTrace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisEVMBlockHash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisEVMBlockHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisEVMBlockHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.KeyValues) > 0 {
		for _, e := range m.KeyValues {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ERC20s) > 0 {
		for _, b := range m.ERC20s {
			l = len(b)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Erc20Stores) > 0 {
		for _, e := range m.Erc20Stores {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.DenomTraces) > 0 {
		for _, e := range m.DenomTraces {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ClassTraces) > 0 {
		for _, e := range m.ClassTraces {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.EVMBlockHashes) > 0 {
		for _, e := range m.EVMBlockHashes {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = len(m.Erc20Factory)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.Erc20Wrapper)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *GenesisKeyValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *GenesisERC20Stores) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.Stores) > 0 {
		for _, b := range m.Stores {
			l = len(b)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *GenesisDenomTrace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *GenesisClassTrace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *GenesisEVMBlockHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovGenesis(uint64(m.Height))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyValues = append(m.KeyValues, GenesisKeyValue{})
			if err := m.KeyValues[len(m.KeyValues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ERC20s", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ERC20s = append(m.ERC20s, make([]byte, postIndex-iNdEx))
			copy(m.ERC20s[len(m.ERC20s)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20Stores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Erc20Stores = append(m.Erc20Stores, GenesisERC20Stores{})
			if err := m.Erc20Stores[len(m.Erc20Stores)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomTraces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomTraces = append(m.DenomTraces, GenesisDenomTrace{})
			if err := m.DenomTraces[len(m.DenomTraces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassTraces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassTraces = append(m.ClassTraces, GenesisClassTrace{})
			if err := m.ClassTraces[len(m.ClassTraces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EVMBlockHashes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EVMBlockHashes = append(m.EVMBlockHashes, GenesisEVMBlockHash{})
			if err := m.EVMBlockHashes[len(m.EVMBlockHashes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20Factory", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Erc20Factory = append(m.Erc20Factory[:0], dAtA[iNdEx:postIndex]...)
			if m.Erc20Factory == nil {
				m.Erc20Factory = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20Wrapper", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Erc20Wrapper = append(m.Erc20Wrapper[:0], dAtA[iNdEx:postIndex]...)
			if m.Erc20Wrapper == nil {
				m.Erc20Wrapper = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisKeyValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisKeyValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisKeyValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisERC20Stores) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisERC20Stores: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisERC20Stores: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stores", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stores = append(m.Stores, make([]byte, postIndex-iNdEx))
			copy(m.Stores[len(m.Stores)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisDenomTrace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisDenomTrace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisDenomTrace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = append(m.ContractAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.ContractAddress == nil {
				m.ContractAddress = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisClassTrace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisClassTrace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisClassTrace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = append(m.ContractAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.ContractAddress == nil {
				m.ContractAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisEVMBlockHash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisEVMBlockHash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisEVMBlockHash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
