// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: minievm/evm/v1/types.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the set of move parameters.
type Params struct {
	// extra_eips defines the additional EIPs for the vm.Config
	ExtraEIPs []int64 `protobuf:"varint,1,rep,packed,name=extra_eips,json=extraEips,proto3" json:"extra_eips,omitempty" yaml:"extra_eips"`
	// It is a list of addresses with permission to distribute contracts,
	// and an empty list is interpreted as allowing anyone to distribute.
	AllowedPublishers []string `protobuf:"bytes,2,rep,name=allowed_publishers,json=allowedPublishers,proto3" json:"allowed_publishers,omitempty" yaml:"allowed_publishers"`
	// allow_custom_erc20 defines whether the chain allows custom erc20 tokens
	// to be registered on cosmos bank interface.
	AllowCustomERC20    bool     `protobuf:"varint,3,opt,name=allow_custom_erc20,json=allowCustomErc20,proto3" json:"allow_custom_erc20,omitempty"`
	AllowedCustomERC20s []string `protobuf:"bytes,4,rep,name=allowed_custom_erc20s,json=allowedCustomErc20s,proto3" json:"allowed_custom_erc20s,omitempty" yaml:"allowed_custom_erc20s"`
	// fee_denom defines the fee denom for the evm transactions
	FeeDenom string `protobuf:"bytes,5,opt,name=fee_denom,json=feeDenom,proto3" json:"fee_denom,omitempty" yaml:"fee_denom"`
	// gas_refund_ratio defines the gas refund ratio for the evm transactions
	// If the gas refund ratio is 0, the gas refund is disabled.
	GasRefundRatio cosmossdk_io_math.LegacyDec `protobuf:"bytes,6,opt,name=gas_refund_ratio,json=gasRefundRatio,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"gas_refund_ratio" yaml:"gas_refund_ratio"`
	// num_retain_block_hashes defines the number of block hashes to retain
	// for the evm opcode `BLOCKHASH`.
	//
	// minimum is 256 and 0 means no limit.
	NumRetainBlockHashes uint64 `protobuf:"varint,7,opt,name=num_retain_block_hashes,json=numRetainBlockHashes,proto3" json:"num_retain_block_hashes,omitempty" yaml:"num_retain_block_hashes"`
	// gas_enforcement specifies the rules for enforcing gas usage on EVM transactions.
	// If this field is null, gas enforcement is disabled and no restrictions will be applied.
	GasEnforcement *GasEnforcement `protobuf:"bytes,8,opt,name=gas_enforcement,json=gasEnforcement,proto3" json:"gas_enforcement,omitempty" yaml:"gas_enforcement"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_98c9eab1c4bf0154, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

type GasEnforcement struct {
	// max_gas_fee_cap sets an upper bound on the gas price (base fee + tip) for a single EVM transaction.
	// If set to 0, no gas price cap is enforced.
	MaxGasFeeCap cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=max_gas_fee_cap,json=maxGasFeeCap,proto3,customtype=cosmossdk.io/math.Int" json:"max_gas_fee_cap" yaml:"max_gas_fee_cap"`
	// max_gas_limit sets the maximum gas limit allowed for a single EVM transaction.
	// If set to 0, no gas limit restriction is applied.
	MaxGasLimit uint64 `protobuf:"varint,2,opt,name=max_gas_limit,json=maxGasLimit,proto3" json:"max_gas_limit,omitempty" yaml:"max_gas_limit"`
	// unlimited_gas_senders is a list of addresses that are exempt from gas price and limit restrictions.
	UnlimitedGasSenders []string `protobuf:"bytes,3,rep,name=unlimited_gas_senders,json=unlimitedGasSenders,proto3" json:"unlimited_gas_senders,omitempty" yaml:"unlimited_gas_senders"`
}

func (m *GasEnforcement) Reset()         { *m = GasEnforcement{} }
func (m *GasEnforcement) String() string { return proto.CompactTextString(m) }
func (*GasEnforcement) ProtoMessage()    {}
func (*GasEnforcement) Descriptor() ([]byte, []int) {
	return fileDescriptor_98c9eab1c4bf0154, []int{1}
}
func (m *GasEnforcement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GasEnforcement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GasEnforcement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GasEnforcement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GasEnforcement.Merge(m, src)
}
func (m *GasEnforcement) XXX_Size() int {
	return m.Size()
}
func (m *GasEnforcement) XXX_DiscardUnknown() {
	xxx_messageInfo_GasEnforcement.DiscardUnknown(m)
}

var xxx_messageInfo_GasEnforcement proto.InternalMessageInfo

// Log represents a contract log event. These events are generated by
// the LOG opcode and stored/indexed by the node.
type Log struct {
	// address of the contract that generated the event
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// list of topics provided by the contract.
	Topics []string `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`
	// supplied by the contract, usually ABI-encoded
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Log) Reset()         { *m = Log{} }
func (m *Log) String() string { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()    {}
func (*Log) Descriptor() ([]byte, []int) {
	return fileDescriptor_98c9eab1c4bf0154, []int{2}
}
func (m *Log) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Log) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Log.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Log) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Log.Merge(m, src)
}
func (m *Log) XXX_Size() int {
	return m.Size()
}
func (m *Log) XXX_DiscardUnknown() {
	xxx_messageInfo_Log.DiscardUnknown(m)
}

var xxx_messageInfo_Log proto.InternalMessageInfo

type AccessTuple struct {
	// Address of the contract that will be accessed during the transaction execution.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// A list of storage keys that the transaction will interact with within the specified contract.
	// These keys represent specific storage slots in the contract's storage that are accessed or modified.
	StorageKeys []string `protobuf:"bytes,2,rep,name=storage_keys,json=storageKeys,proto3" json:"storage_keys,omitempty"`
}

func (m *AccessTuple) Reset()         { *m = AccessTuple{} }
func (m *AccessTuple) String() string { return proto.CompactTextString(m) }
func (*AccessTuple) ProtoMessage()    {}
func (*AccessTuple) Descriptor() ([]byte, []int) {
	return fileDescriptor_98c9eab1c4bf0154, []int{3}
}
func (m *AccessTuple) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccessTuple) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccessTuple.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccessTuple) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccessTuple.Merge(m, src)
}
func (m *AccessTuple) XXX_Size() int {
	return m.Size()
}
func (m *AccessTuple) XXX_DiscardUnknown() {
	xxx_messageInfo_AccessTuple.DiscardUnknown(m)
}

var xxx_messageInfo_AccessTuple proto.InternalMessageInfo

type ERC721OriginTokenInfo struct {
	TokenOriginId string `protobuf:"bytes,1,opt,name=token_origin_id,json=tokenOriginId,proto3" json:"token_origin_id,omitempty"`
	TokenUri      string `protobuf:"bytes,2,opt,name=token_uri,json=tokenUri,proto3" json:"token_uri,omitempty"`
}

func (m *ERC721OriginTokenInfo) Reset()         { *m = ERC721OriginTokenInfo{} }
func (m *ERC721OriginTokenInfo) String() string { return proto.CompactTextString(m) }
func (*ERC721OriginTokenInfo) ProtoMessage()    {}
func (*ERC721OriginTokenInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_98c9eab1c4bf0154, []int{4}
}
func (m *ERC721OriginTokenInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ERC721OriginTokenInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ERC721OriginTokenInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ERC721OriginTokenInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ERC721OriginTokenInfo.Merge(m, src)
}
func (m *ERC721OriginTokenInfo) XXX_Size() int {
	return m.Size()
}
func (m *ERC721OriginTokenInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ERC721OriginTokenInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ERC721OriginTokenInfo proto.InternalMessageInfo

type ERC721ClassInfo struct {
	ClassId    string `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	ClassName  string `protobuf:"bytes,2,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	ClassUri   string `protobuf:"bytes,3,opt,name=class_uri,json=classUri,proto3" json:"class_uri,omitempty"`
	ClassDescs string `protobuf:"bytes,4,opt,name=class_descs,json=classDescs,proto3" json:"class_descs,omitempty"`
}

func (m *ERC721ClassInfo) Reset()         { *m = ERC721ClassInfo{} }
func (m *ERC721ClassInfo) String() string { return proto.CompactTextString(m) }
func (*ERC721ClassInfo) ProtoMessage()    {}
func (*ERC721ClassInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_98c9eab1c4bf0154, []int{5}
}
func (m *ERC721ClassInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ERC721ClassInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ERC721ClassInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ERC721ClassInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ERC721ClassInfo.Merge(m, src)
}
func (m *ERC721ClassInfo) XXX_Size() int {
	return m.Size()
}
func (m *ERC721ClassInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ERC721ClassInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ERC721ClassInfo proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "minievm.evm.v1.Params")
	proto.RegisterType((*GasEnforcement)(nil), "minievm.evm.v1.GasEnforcement")
	proto.RegisterType((*Log)(nil), "minievm.evm.v1.Log")
	proto.RegisterType((*AccessTuple)(nil), "minievm.evm.v1.AccessTuple")
	proto.RegisterType((*ERC721OriginTokenInfo)(nil), "minievm.evm.v1.ERC721OriginTokenInfo")
	proto.RegisterType((*ERC721ClassInfo)(nil), "minievm.evm.v1.ERC721ClassInfo")
}

func init() { proto.RegisterFile("minievm/evm/v1/types.proto", fileDescriptor_98c9eab1c4bf0154) }

var fileDescriptor_98c9eab1c4bf0154 = []byte{
	// 915 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x55, 0xcf, 0x6f, 0xdb, 0x36,
	0x14, 0xb6, 0xe2, 0x34, 0x89, 0xe9, 0x36, 0x3f, 0x58, 0xa7, 0x51, 0xd2, 0x55, 0xf2, 0x04, 0x6c,
	0x33, 0x02, 0xd4, 0x6e, 0xb2, 0xc3, 0x80, 0xa2, 0x17, 0xcb, 0xf1, 0x32, 0xaf, 0xc1, 0x96, 0x6a,
	0xed, 0x61, 0xc3, 0x30, 0x81, 0x96, 0x68, 0x99, 0x88, 0x28, 0x0a, 0xa2, 0x94, 0xc5, 0xd8, 0x5f,
	0xb0, 0x9d, 0x06, 0xec, 0xb2, 0x63, 0x8f, 0x3d, 0xf6, 0xb0, 0x3f, 0x22, 0xc7, 0x62, 0xa7, 0x61,
	0x07, 0x61, 0x73, 0x80, 0x75, 0x67, 0xff, 0x05, 0x03, 0x49, 0x39, 0xb6, 0xdb, 0x6d, 0x07, 0x09,
	0x7c, 0xdf, 0xf7, 0xf1, 0xe3, 0xe3, 0xd3, 0xa3, 0x08, 0xf6, 0x28, 0x89, 0x08, 0x3e, 0xa7, 0x2d,
	0xf1, 0x9c, 0x1f, 0xb4, 0xd2, 0x51, 0x8c, 0x79, 0x33, 0x4e, 0x58, 0xca, 0xe0, 0x7a, 0xc1, 0x35,
	0xc5, 0x73, 0x7e, 0xb0, 0xb7, 0x85, 0x28, 0x89, 0x58, 0x4b, 0xbe, 0x95, 0x64, 0x6f, 0xd7, 0x63,
	0x9c, 0x32, 0xee, 0xca, 0xa8, 0xa5, 0x82, 0x82, 0xaa, 0x05, 0x2c, 0x60, 0x0a, 0x17, 0x23, 0x85,
	0x5a, 0x7f, 0xdd, 0x00, 0x2b, 0xa7, 0x28, 0x41, 0x94, 0xc3, 0x36, 0x00, 0xf8, 0x22, 0x4d, 0x90,
	0x8b, 0x49, 0xcc, 0x75, 0xad, 0x5e, 0x6e, 0x94, 0x6d, 0x6b, 0x9c, 0x9b, 0x95, 0xae, 0x40, 0xbb,
	0xbd, 0x53, 0x3e, 0xc9, 0xcd, 0xad, 0x11, 0xa2, 0xe1, 0x43, 0x6b, 0x26, 0xb4, 0x9c, 0x8a, 0x0c,
	0xba, 0x24, 0xe6, 0xf0, 0x09, 0x80, 0x28, 0x0c, 0xd9, 0xb7, 0xd8, 0x77, 0xe3, 0xac, 0x1f, 0x12,
	0x3e, 0xc4, 0x09, 0xd7, 0x97, 0xea, 0xe5, 0x46, 0xc5, 0xb6, 0x26, 0xb9, 0xb9, 0xab, 0x66, 0xbf,
	0xad, 0xb1, 0x5e, 0xbc, 0x7e, 0xb9, 0xaf, 0x39, 0x5b, 0x05, 0x73, 0x7a, 0x4d, 0x40, 0xbb, 0xb0,
	0x74, 0xbd, 0x8c, 0xa7, 0x8c, 0xba, 0x38, 0xf1, 0x0e, 0x1f, 0xe8, 0xe5, 0xba, 0xd6, 0x58, 0xb3,
	0x6b, 0xe3, 0xdc, 0xdc, 0x6c, 0x0b, 0xb6, 0x23, 0xc9, 0xae, 0xd3, 0x39, 0x7c, 0xe0, 0x6c, 0xa2,
	0x39, 0x44, 0xa8, 0x61, 0x0c, 0xb6, 0xa7, 0x4b, 0xce, 0xbb, 0x70, 0x7d, 0x59, 0x66, 0xf6, 0x68,
	0x9c, 0x9b, 0xb7, 0xdb, 0x4a, 0x30, 0x67, 0x24, 0xb6, 0xfb, 0xce, 0x62, 0xc2, 0x0b, 0xb3, 0x8b,
	0x9c, 0x6f, 0xa3, 0x85, 0x99, 0x92, 0x82, 0x07, 0xa0, 0x32, 0xc0, 0xd8, 0xf5, 0x71, 0xc4, 0xa8,
	0x7e, 0xa3, 0xae, 0x35, 0x2a, 0x76, 0x6d, 0x92, 0x9b, 0x9b, 0xca, 0xee, 0x9a, 0xb2, 0x9c, 0xb5,
	0x01, 0xc6, 0x47, 0x62, 0x08, 0xbf, 0x03, 0x9b, 0x01, 0xe2, 0x6e, 0x82, 0x07, 0x59, 0xe4, 0xbb,
	0x09, 0x4a, 0x09, 0xd3, 0x57, 0xe4, 0xcc, 0x27, 0x97, 0xb9, 0x59, 0xfa, 0x3d, 0x37, 0xef, 0xaa,
	0xef, 0xc9, 0xfd, 0xb3, 0x26, 0x61, 0x2d, 0x8a, 0xd2, 0x61, 0xf3, 0x04, 0x07, 0xc8, 0x1b, 0x1d,
	0x61, 0x6f, 0x92, 0x9b, 0x3b, 0xca, 0xfc, 0x4d, 0x13, 0xeb, 0xd7, 0x5f, 0xee, 0x83, 0xa2, 0x13,
	0x8e, 0xb0, 0xa7, 0x92, 0x5e, 0x0f, 0x10, 0x77, 0xa4, 0xc8, 0x11, 0x1a, 0xf8, 0x0d, 0xd8, 0x89,
	0x32, 0xea, 0x26, 0x38, 0x45, 0x24, 0x72, 0xfb, 0x21, 0xf3, 0xce, 0xdc, 0x21, 0xe2, 0x43, 0xcc,
	0xf5, 0xd5, 0xba, 0xd6, 0x58, 0xb6, 0x3f, 0x98, 0xe4, 0xa6, 0xa1, 0x16, 0xf8, 0x0f, 0x61, 0x51,
	0x8e, 0x5a, 0x94, 0x51, 0x47, 0xb2, 0xb6, 0x20, 0x3f, 0x91, 0x1c, 0x0c, 0xc0, 0x86, 0xc8, 0x0b,
	0x47, 0x03, 0x96, 0x78, 0x98, 0xe2, 0x28, 0xd5, 0xd7, 0xea, 0x5a, 0xa3, 0x7a, 0x68, 0x34, 0x17,
	0x9b, 0xba, 0x79, 0x8c, 0x78, 0x77, 0xa6, 0xb2, 0x8d, 0xcb, 0xdc, 0xd4, 0x26, 0xb9, 0x79, 0x67,
	0xb6, 0xb9, 0x39, 0x13, 0x4b, 0x6e, 0x64, 0x4e, 0xff, 0x70, 0xe7, 0xe7, 0xe7, 0x66, 0xe9, 0xef,
	0xe7, 0xa6, 0xf6, 0xc3, 0xeb, 0x97, 0xfb, 0x40, 0x1c, 0x22, 0xd5, 0xdd, 0xd6, 0x4f, 0x4b, 0x60,
	0x7d, 0xd1, 0x1b, 0x7a, 0x60, 0x83, 0xa2, 0x0b, 0x57, 0x78, 0x8a, 0x2f, 0xe2, 0xa1, 0x58, 0xd7,
	0x64, 0xc1, 0x1f, 0x15, 0x05, 0xdf, 0x7e, 0xbb, 0xe0, 0xbd, 0x28, 0x9d, 0x65, 0xf3, 0xc6, 0xec,
	0xa2, 0x02, 0x37, 0x29, 0xba, 0x38, 0x46, 0xfc, 0x63, 0x8c, 0x3b, 0x28, 0x86, 0x6d, 0x70, 0x6b,
	0x2a, 0x0b, 0x09, 0x25, 0xa9, 0xbe, 0x24, 0xeb, 0x79, 0x6f, 0x92, 0x9b, 0xb5, 0x45, 0x17, 0x49,
	0x17, 0x1e, 0x55, 0xe5, 0x71, 0x22, 0x20, 0xf8, 0x25, 0xd8, 0xce, 0x22, 0xc9, 0x62, 0x5f, 0x2a,
	0x39, 0x8e, 0x7c, 0x71, 0xb0, 0xca, 0xb2, 0x7d, 0xdf, 0x9b, 0xf5, 0xe9, 0xbf, 0xca, 0xa6, 0x7d,
	0x7a, 0x4d, 0x1e, 0x23, 0xfe, 0x45, 0x41, 0x3d, 0x06, 0xe5, 0x13, 0x16, 0x40, 0x1d, 0xac, 0x22,
	0xdf, 0x4f, 0x30, 0xe7, 0xaa, 0x02, 0xce, 0x34, 0x84, 0x77, 0xc0, 0x4a, 0xca, 0x62, 0xe2, 0x15,
	0xa7, 0xd8, 0x29, 0x22, 0x08, 0xc1, 0xb2, 0x8f, 0x52, 0x24, 0x0f, 0x62, 0xc5, 0x91, 0x63, 0xeb,
	0x53, 0x50, 0x6d, 0x7b, 0x1e, 0xe6, 0xfc, 0x69, 0x16, 0x87, 0xf8, 0x7f, 0x4c, 0xdf, 0x05, 0x37,
	0x79, 0xca, 0x12, 0x14, 0x60, 0xf7, 0x0c, 0x8f, 0xa6, 0xd6, 0xd5, 0x02, 0x7b, 0x8c, 0x47, 0xdc,
	0xfa, 0x1a, 0x6c, 0x77, 0x9d, 0xce, 0x47, 0x87, 0x07, 0x9f, 0x27, 0x24, 0x20, 0xd1, 0x53, 0x76,
	0x86, 0xa3, 0x5e, 0x34, 0x60, 0xf0, 0x7d, 0xb0, 0x91, 0x8a, 0xc0, 0x65, 0x92, 0x70, 0x89, 0x5f,
	0xb8, 0xdf, 0x92, 0xb0, 0x92, 0xf7, 0x7c, 0x78, 0x17, 0x54, 0x94, 0x2e, 0x4b, 0x88, 0xac, 0x79,
	0xc5, 0x59, 0x93, 0xc0, 0xb3, 0x84, 0x58, 0xdf, 0x6b, 0x60, 0x43, 0xd9, 0x77, 0x42, 0xc4, 0xb9,
	0x34, 0xde, 0x05, 0x6b, 0x9e, 0x08, 0x66, 0x8e, 0xab, 0x32, 0xee, 0xf9, 0xf0, 0x1e, 0x00, 0x8a,
	0x8a, 0x10, 0xc5, 0x85, 0x59, 0x45, 0x22, 0x9f, 0x21, 0x8a, 0xc5, 0x52, 0x8a, 0x16, 0x4b, 0xa9,
	0x82, 0x28, 0xab, 0x67, 0x09, 0x81, 0x26, 0xa8, 0x2a, 0xd2, 0xc7, 0xdc, 0x13, 0x7f, 0x1c, 0x41,
	0x2b, 0xbb, 0x23, 0x81, 0xd8, 0x27, 0x97, 0x7f, 0x1a, 0xa5, 0x17, 0x63, 0x43, 0xbb, 0x1c, 0x1b,
	0xda, 0xab, 0xb1, 0xa1, 0xfd, 0x31, 0x36, 0xb4, 0x1f, 0xaf, 0x8c, 0xd2, 0xab, 0x2b, 0xa3, 0xf4,
	0xdb, 0x95, 0x51, 0xfa, 0x6a, 0x3f, 0x20, 0xe9, 0x30, 0xeb, 0x37, 0x3d, 0x46, 0x5b, 0x24, 0x22,
	0x29, 0x41, 0xf7, 0x43, 0xd4, 0xe7, 0xad, 0xe9, 0x55, 0x71, 0x21, 0x2f, 0x0b, 0x79, 0x53, 0xf4,
	0x57, 0xe4, 0x6f, 0xfd, 0xc3, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x83, 0xec, 0xc2, 0xfe, 0x48,
	0x06, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ExtraEIPs) != len(that1.ExtraEIPs) {
		return false
	}
	for i := range this.ExtraEIPs {
		if this.ExtraEIPs[i] != that1.ExtraEIPs[i] {
			return false
		}
	}
	if len(this.AllowedPublishers) != len(that1.AllowedPublishers) {
		return false
	}
	for i := range this.AllowedPublishers {
		if this.AllowedPublishers[i] != that1.AllowedPublishers[i] {
			return false
		}
	}
	if this.AllowCustomERC20 != that1.AllowCustomERC20 {
		return false
	}
	if len(this.AllowedCustomERC20s) != len(that1.AllowedCustomERC20s) {
		return false
	}
	for i := range this.AllowedCustomERC20s {
		if this.AllowedCustomERC20s[i] != that1.AllowedCustomERC20s[i] {
			return false
		}
	}
	if this.FeeDenom != that1.FeeDenom {
		return false
	}
	if !this.GasRefundRatio.Equal(that1.GasRefundRatio) {
		return false
	}
	if this.NumRetainBlockHashes != that1.NumRetainBlockHashes {
		return false
	}
	if !this.GasEnforcement.Equal(that1.GasEnforcement) {
		return false
	}
	return true
}
func (this *GasEnforcement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GasEnforcement)
	if !ok {
		that2, ok := that.(GasEnforcement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MaxGasFeeCap.Equal(that1.MaxGasFeeCap) {
		return false
	}
	if this.MaxGasLimit != that1.MaxGasLimit {
		return false
	}
	if len(this.UnlimitedGasSenders) != len(that1.UnlimitedGasSenders) {
		return false
	}
	for i := range this.UnlimitedGasSenders {
		if this.UnlimitedGasSenders[i] != that1.UnlimitedGasSenders[i] {
			return false
		}
	}
	return true
}
func (this *Log) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Log)
	if !ok {
		that2, ok := that.(Log)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if len(this.Topics) != len(that1.Topics) {
		return false
	}
	for i := range this.Topics {
		if this.Topics[i] != that1.Topics[i] {
			return false
		}
	}
	if this.Data != that1.Data {
		return false
	}
	return true
}
func (this *AccessTuple) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AccessTuple)
	if !ok {
		that2, ok := that.(AccessTuple)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if len(this.StorageKeys) != len(that1.StorageKeys) {
		return false
	}
	for i := range this.StorageKeys {
		if this.StorageKeys[i] != that1.StorageKeys[i] {
			return false
		}
	}
	return true
}
func (this *ERC721OriginTokenInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ERC721OriginTokenInfo)
	if !ok {
		that2, ok := that.(ERC721OriginTokenInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TokenOriginId != that1.TokenOriginId {
		return false
	}
	if this.TokenUri != that1.TokenUri {
		return false
	}
	return true
}
func (this *ERC721ClassInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ERC721ClassInfo)
	if !ok {
		that2, ok := that.(ERC721ClassInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClassId != that1.ClassId {
		return false
	}
	if this.ClassName != that1.ClassName {
		return false
	}
	if this.ClassUri != that1.ClassUri {
		return false
	}
	if this.ClassDescs != that1.ClassDescs {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GasEnforcement != nil {
		{
			size, err := m.GasEnforcement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.NumRetainBlockHashes != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.NumRetainBlockHashes))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.GasRefundRatio.Size()
		i -= size
		if _, err := m.GasRefundRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.FeeDenom) > 0 {
		i -= len(m.FeeDenom)
		copy(dAtA[i:], m.FeeDenom)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.FeeDenom)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AllowedCustomERC20s) > 0 {
		for iNdEx := len(m.AllowedCustomERC20s) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedCustomERC20s[iNdEx])
			copy(dAtA[i:], m.AllowedCustomERC20s[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.AllowedCustomERC20s[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.AllowCustomERC20 {
		i--
		if m.AllowCustomERC20 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.AllowedPublishers) > 0 {
		for iNdEx := len(m.AllowedPublishers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedPublishers[iNdEx])
			copy(dAtA[i:], m.AllowedPublishers[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.AllowedPublishers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ExtraEIPs) > 0 {
		dAtA3 := make([]byte, len(m.ExtraEIPs)*10)
		var j2 int
		for _, num1 := range m.ExtraEIPs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintTypes(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GasEnforcement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GasEnforcement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GasEnforcement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnlimitedGasSenders) > 0 {
		for iNdEx := len(m.UnlimitedGasSenders) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UnlimitedGasSenders[iNdEx])
			copy(dAtA[i:], m.UnlimitedGasSenders[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.UnlimitedGasSenders[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.MaxGasLimit != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxGasLimit))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.MaxGasFeeCap.Size()
		i -= size
		if _, err := m.MaxGasFeeCap.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Log) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Log) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Log) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Topics) > 0 {
		for iNdEx := len(m.Topics) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Topics[iNdEx])
			copy(dAtA[i:], m.Topics[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Topics[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccessTuple) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccessTuple) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccessTuple) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StorageKeys) > 0 {
		for iNdEx := len(m.StorageKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StorageKeys[iNdEx])
			copy(dAtA[i:], m.StorageKeys[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.StorageKeys[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ERC721OriginTokenInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ERC721OriginTokenInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ERC721OriginTokenInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenUri) > 0 {
		i -= len(m.TokenUri)
		copy(dAtA[i:], m.TokenUri)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TokenUri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TokenOriginId) > 0 {
		i -= len(m.TokenOriginId)
		copy(dAtA[i:], m.TokenOriginId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TokenOriginId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ERC721ClassInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ERC721ClassInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ERC721ClassInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClassDescs) > 0 {
		i -= len(m.ClassDescs)
		copy(dAtA[i:], m.ClassDescs)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ClassDescs)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClassUri) > 0 {
		i -= len(m.ClassUri)
		copy(dAtA[i:], m.ClassUri)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ClassUri)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClassName) > 0 {
		i -= len(m.ClassName)
		copy(dAtA[i:], m.ClassName)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ClassName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExtraEIPs) > 0 {
		l = 0
		for _, e := range m.ExtraEIPs {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if len(m.AllowedPublishers) > 0 {
		for _, s := range m.AllowedPublishers {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.AllowCustomERC20 {
		n += 2
	}
	if len(m.AllowedCustomERC20s) > 0 {
		for _, s := range m.AllowedCustomERC20s {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.FeeDenom)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.GasRefundRatio.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.NumRetainBlockHashes != 0 {
		n += 1 + sovTypes(uint64(m.NumRetainBlockHashes))
	}
	if m.GasEnforcement != nil {
		l = m.GasEnforcement.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GasEnforcement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MaxGasFeeCap.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.MaxGasLimit != 0 {
		n += 1 + sovTypes(uint64(m.MaxGasLimit))
	}
	if len(m.UnlimitedGasSenders) > 0 {
		for _, s := range m.UnlimitedGasSenders {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *Log) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Topics) > 0 {
		for _, s := range m.Topics {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *AccessTuple) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.StorageKeys) > 0 {
		for _, s := range m.StorageKeys {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *ERC721OriginTokenInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TokenOriginId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.TokenUri)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ERC721ClassInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ClassName)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ClassUri)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ClassDescs)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ExtraEIPs = append(m.ExtraEIPs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ExtraEIPs) == 0 {
					m.ExtraEIPs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ExtraEIPs = append(m.ExtraEIPs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraEIPs", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedPublishers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedPublishers = append(m.AllowedPublishers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowCustomERC20", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowCustomERC20 = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedCustomERC20s", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedCustomERC20s = append(m.AllowedCustomERC20s, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasRefundRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasRefundRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRetainBlockHashes", wireType)
			}
			m.NumRetainBlockHashes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumRetainBlockHashes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasEnforcement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GasEnforcement == nil {
				m.GasEnforcement = &GasEnforcement{}
			}
			if err := m.GasEnforcement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GasEnforcement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GasEnforcement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GasEnforcement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGasFeeCap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxGasFeeCap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGasLimit", wireType)
			}
			m.MaxGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlimitedGasSenders", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnlimitedGasSenders = append(m.UnlimitedGasSenders, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Log) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Log: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Log: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topics", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topics = append(m.Topics, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccessTuple) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccessTuple: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccessTuple: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorageKeys = append(m.StorageKeys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ERC721OriginTokenInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ERC721OriginTokenInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ERC721OriginTokenInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenOriginId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenOriginId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ERC721ClassInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ERC721ClassInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ERC721ClassInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassDescs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassDescs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
